{"version":3,"file":"bundles/pages/index.js","sources":["webpack:///components/CodeStyles.js","webpack:///components/CourseDescription.md","webpack:///components/Lessons.js","webpack:///lessons/index.js","webpack:///lessons/javascript-redux-avoiding-array-mutations-with-concat-slice-and-spread.md","webpack:///lessons/javascript-redux-avoiding-object-mutations-with-object-assign-and-spread.md","webpack:///lessons/javascript-redux-describing-state-changes-with-actions.md","webpack:///lessons/javascript-redux-extracting-action-creators.md","webpack:///lessons/javascript-redux-extracting-container-components-filterlink.md","webpack:///lessons/javascript-redux-extracting-container-components-visibletodolist-addtodo.md","webpack:///lessons/javascript-redux-extracting-presentational-components-addtodo-footer-filterlink.md","webpack:///lessons/javascript-redux-extracting-presentational-components-todo-todolist.md","webpack:///lessons/javascript-redux-generating-containers-with-connect-from-react-redux-addtodo.md","webpack:///lessons/javascript-redux-generating-containers-with-connect-from-react-redux-footerlink.md","webpack:///lessons/javascript-redux-generating-containers-with-connect-from-react-redux-visibletodolist.md","webpack:///lessons/javascript-redux-implementing-combinereducers-from-scratch.md","webpack:///lessons/javascript-redux-implementing-store-from-scratch.md","webpack:///lessons/javascript-redux-passing-the-store-down-explicitly-via-props.md","webpack:///lessons/javascript-redux-passing-the-store-down-implicitly-via-context.md","webpack:///lessons/javascript-redux-passing-the-store-down-with-provider-from-react-redux.md","webpack:///lessons/javascript-redux-pure-and-impure-functions.md","webpack:///lessons/javascript-redux-react-counter-example.md","webpack:///lessons/javascript-redux-react-todo-list-example-adding-a-todo.md","webpack:///lessons/javascript-redux-react-todo-list-example-filtering-todos.md","webpack:///lessons/javascript-redux-react-todo-list-example-toggling-a-todo.md","webpack:///lessons/javascript-redux-reducer-composition-with-arrays.md","webpack:///lessons/javascript-redux-reducer-composition-with-combinereducers.md","webpack:///lessons/javascript-redux-reducer-composition-with-objects.md","webpack:///lessons/javascript-redux-store-methods-getstate-dispatch-and-subscribe.md","webpack:///lessons/javascript-redux-the-reducer-function.md","webpack:///lessons/javascript-redux-the-single-immutable-state-tree.md","webpack:///lessons/javascript-redux-writing-a-counter-reducer-with-tests.md","webpack:///lessons/javascript-redux-writing-a-todo-list-reducer-adding-a-todo.md","webpack:///lessons/javascript-redux-writing-a-todo-list-reducer-toggling-a-todo.md","webpack:///./node_modules/@emotion/hash/dist/index.es.js","webpack:///./node_modules/@emotion/is-prop-valid/dist/index.es.js","webpack:///./node_modules/@emotion/memoize/dist/index.es.js","webpack:///./node_modules/@emotion/stylis/dist/index.es.js","webpack:///./node_modules/@emotion/unitless/dist/index.es.js","webpack:///./node_modules/@mdx-js/tag/dist/index.js","webpack:///./node_modules/@mdx-js/tag/dist/mdx-tag.js","webpack:///./node_modules/@mdx-js/tag/node_modules/prop-types/checkPropTypes.js","webpack:///./node_modules/@mdx-js/tag/node_modules/prop-types/factoryWithTypeCheckers.js","webpack:///./node_modules/@mdx-js/tag/node_modules/prop-types/index.js","webpack:///./node_modules/@mdx-js/tag/node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack:///./node_modules/chicago-capitalize/index.js","webpack:///./node_modules/create-emotion-styled/dist/index.es.js","webpack:///./node_modules/create-emotion/dist/index.es.js","webpack:///./node_modules/create-emotion/node_modules/stylis-rule-sheet/index.js","webpack:///./node_modules/emotion/dist/index.es.js","webpack:///./node_modules/next/head.js","webpack:///./node_modules/react-emotion/dist/index.es.js","webpack:///./node_modules/react-ga/dist/react-ga.js","webpack:///./node_modules/title-case-minors/index.js","webpack:///(webpack)/buildin/harmony-module.js","webpack:///./node_modules/xregexp/xregexp-all.js","webpack:///pages/index.js"],"sourcesContent":["export default `\n.hljs-comment,\n  .hljs-quote {\n    color: #969896;\n  }\n\n  /* Tomorrow Red */\n  .hljs-variable,\n  .hljs-template-variable,\n  .hljs-tag,\n  .hljs-name,\n  .hljs-selector-id,\n  .hljs-selector-class,\n  .hljs-regexp,\n  .hljs-deletion {\n    color: #cc6666;\n  }\n\n  /* Tomorrow Orange */\n  .hljs-number,\n  .hljs-built_in,\n  .hljs-builtin-name,\n  .hljs-literal,\n  .hljs-type,\n  .hljs-params,\n  .hljs-meta,\n  .hljs-link {\n    color: #de935f;\n  }\n\n  /* Tomorrow Yellow */\n  .hljs-attribute {\n    color: #f0c674;\n  }\n\n  /* Tomorrow Green */\n  .hljs-string,\n  .hljs-symbol,\n  .hljs-bullet,\n  .hljs-addition {\n    color: #b5bd68;\n  }\n\n  /* Tomorrow Blue */\n  .hljs-title,\n  .hljs-section {\n    color: #81a2be;\n  }\n\n  /* Tomorrow Purple */\n  .hljs-keyword,\n  .hljs-selector-tag {\n    color: #b294bb;\n  }\n\n  .hljs {\n    display: block;\n    overflow-x: auto;\n    background: #1d1f21;\n    color: #c5c8c6;\n    padding: 0.5em;\n  }\n\n  .hljs-emphasis {\n    font-style: italic;\n  }\n\n  .hljs-strong {\n    font-weight: bold;\n  }\n`\n\n\n\n// WEBPACK FOOTER //\n// components/CodeStyles.js","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In this comprehensive tutorial, Dan Abramov - the creator of Redux - will teach you how to manage state in your React application with Redux.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`State management is absolutely critical in providing users with a well-crafted experience with minimal bugs.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`It's also one of the hardest aspects of a modern front-end application to get right.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Redux provides a solid, stable and mature solution to managing state in your React application. Through a handful of small, useful patterns, Redux can transform your application from a total mess of confusing and scattered state, into a delightfully organized, easy to understand modern JavaScript powerhouse.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The principles of Redux aren't new, but they are packaged and presented for you in an easy to use library that not only elevates your applications, but also improves your general understanding of building JavaScript UIs.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In this course, Dan Abramov will show you the fundamentals of Redux, so that you can start using it to simplify your applications.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// components/CourseDescription.md","import styled from 'react-emotion'\nimport { css } from 'emotion'\nimport lessons from '../lessons'\nimport capitalize from 'chicago-capitalize'\n\nconst LessonWrapper = styled('div')`\n  flex: 1 1;\n  max-width: 800px;\n`\n\nexport default () => (\n  <div\n    className={css`\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n    `}\n  >\n    {lessons.map(lesson => {\n      const Lesson = lesson.component\n      return (\n        <div\n          className={css`\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            padding-top: 50px;\n          `}\n        >\n          <div>\n            <h3>{capitalize(lesson.title)}</h3>\n          </div>\n          <LessonWrapper>\n            <Lesson />\n          </LessonWrapper>\n        </div>\n      )\n    })}\n  </div>\n)\n\n\n\n// WEBPACK FOOTER //\n// components/Lessons.js","import SingleImmutableTree from './javascript-redux-the-single-immutable-state-tree.md'\nimport StateChangesWithActions from './javascript-redux-describing-state-changes-with-actions.md'\nimport PureAndImpureFunctions from './javascript-redux-pure-and-impure-functions.md'\nimport ReducerFunction from './javascript-redux-the-reducer-function.md'\nimport CounterReducer from './javascript-redux-writing-a-counter-reducer-with-tests.md'\nimport DispatchAndSubscribe from './javascript-redux-store-methods-getstate-dispatch-and-subscribe.md'\nimport ImplementStore from './javascript-redux-implementing-store-from-scratch.md'\nimport CounterExample from './javascript-redux-react-counter-example.md'\nimport AvoidingArrayMutations from './javascript-redux-avoiding-array-mutations-with-concat-slice-and-spread.md'\nimport AvoidingObjectMutations from './javascript-redux-avoiding-object-mutations-with-object-assign-and-spread.md'\nimport TodoListReducerAddTodo from './javascript-redux-writing-a-todo-list-reducer-adding-a-todo.md'\nimport TodoListReducerToggleTodo from './javascript-redux-writing-a-todo-list-reducer-toggling-a-todo.md'\nimport ReducerCompositionArrays from './javascript-redux-reducer-composition-with-arrays.md'\nimport ReducerCompositionObjects from './javascript-redux-reducer-composition-with-objects.md'\nimport ReducerCompositionCombine from './javascript-redux-reducer-composition-with-combinereducers.md'\nimport ImplementCombineReducers from './javascript-redux-implementing-combinereducers-from-scratch.md'\nimport AddTodo from './javascript-redux-react-todo-list-example-adding-a-todo.md'\nimport ToggleTodo from './javascript-redux-react-todo-list-example-toggling-a-todo.md'\nimport FilteringTodos from './javascript-redux-react-todo-list-example-filtering-todos.md'\nimport ExtractPresentationalTodoList from './javascript-redux-extracting-presentational-components-todo-todolist.md'\nimport ExtractPresentationalFilterLink from './javascript-redux-extracting-presentational-components-addtodo-footer-filterlink.md'\nimport ExtractContainerFilterLink from './javascript-redux-extracting-container-components-filterlink.md'\nimport ExtractContainerAddTodo from './javascript-redux-extracting-container-components-visibletodolist-addtodo.md'\nimport PassStoreViaProps from './javascript-redux-passing-the-store-down-explicitly-via-props.md'\nimport PassStoreViaContext from './javascript-redux-passing-the-store-down-implicitly-via-context.md'\nimport PassStoreViaProvider from './javascript-redux-passing-the-store-down-with-provider-from-react-redux.md'\nimport GenerateWithConnectTodoList from './javascript-redux-generating-containers-with-connect-from-react-redux-visibletodolist.md'\nimport GenerateWithConnectAddTodo from './javascript-redux-generating-containers-with-connect-from-react-redux-addtodo.md'\nimport GenerateWithConnectFooter from './javascript-redux-generating-containers-with-connect-from-react-redux-footerlink.md'\nimport ExtractActionCreators from './javascript-redux-extracting-action-creators.md'\n\nexport default [\n  {\n    component: SingleImmutableTree,\n    title: 'The Single Immutable State Tree in Redux',\n    slug: 'javascript-redux-the-single-immutable-state-tree'\n  },\n  {\n    component: StateChangesWithActions,\n    title: 'Describing State Changes with Redux Actions',\n    slug: 'javascript-redux-describing-state-changes-with-actions'\n  },\n  {\n    component: PureAndImpureFunctions,\n    title: 'Pure and Impure Functions in Redux',\n    slug: 'javascript-redux-pure-and-impure-functions'\n  },\n  {\n    component: ReducerFunction,\n    title: 'The Redux render function',\n    slug: 'javascript-redux-the-reducer-function'\n  },\n  {\n    component: CounterReducer,\n    title: 'Writing a counter reducer for Redux with tests',\n    slug: 'javascript-redux-writing-a-counter-reducer-with-tests'\n  },\n  {\n    component: DispatchAndSubscribe,\n    title: 'Redux Store methods getState, dispatch, and subscribe',\n    slug: 'javascript-redux-store-methods-getstate-dispatch-and-subscribe'\n  },\n  {\n    component: ImplementStore,\n    title: 'Implementing Redux store from scratch',\n    slug: 'javascript-redux-implementing-store-from-scratch'\n  },\n  {\n    component: CounterExample,\n    title: 'Redux Counter Example',\n    slug: 'javascript-redux-react-counter-example'\n  },\n  {\n    component: AvoidingArrayMutations,\n    title: 'Avoiding Array Mutations with concat, slice, and spread',\n    slug: 'javascript-redux-avoiding-array-mutations-with-concat-slice-and-spread'\n  },\n  {\n    component: AvoidingObjectMutations,\n    title: 'Avoiding object mutations with object assign and spread',\n    slug: 'javascript-redux-avoiding-object-mutations-with-object-assign-and-spread'\n  },\n  {\n    component: TodoListReducerAddTodo,\n    title: 'Writing a todo list reduce in redux: Adding a todo',\n    slug: 'javascript-redux-writing-a-todo-list-reducer-adding-a-todo'\n  },\n  {\n    component: TodoListReducerToggleTodo,\n    title: 'Writing a todo list reduce in redux: Toggling a todo',\n    slug: 'javascript-redux-writing-a-todo-list-reducer-toggling-a-todo'\n  },\n  {\n    component: ReducerCompositionArrays,\n    title: 'Redux reducer composition with Arrays',\n    slug: 'javascript-redux-reducer-composition-with-arrays'\n  },\n  {\n    component: ReducerCompositionObjects,\n    title: 'Redux Reducer composition with objects',\n    slug: 'javascript-redux-reducer-composition-with-objects'\n  },\n  {\n    component: ReducerCompositionCombine,\n    title: 'Redux reducer composition with combineReducers',\n    slug: 'javascript-redux-reducer-composition-with-combinereducers'\n  },\n  {\n    component: ImplementCombineReducers,\n    title: 'Implement redux combineReducers from scratch',\n    slug: 'javascript-redux-implementing-combinereducers-from-scratch'\n  },\n  {\n    component: AddTodo,\n    title: 'Redux Example: Adding a Todo to a List',\n    slug: 'javascript-redux-react-todo-list-example-adding-a-todo'\n  },\n  {\n    component: ToggleTodo,\n    title: 'Redux Example: Toggling a Todo in the List',\n    slug: 'javascript-redux-react-todo-list-example-toggling-a-todo'\n  },\n  {\n    component: FilteringTodos,\n    title: 'Redux Example: Filtering Todos in a List',\n    slug: 'javascript-redux-react-todo-list-example-filtering-todos'\n  },\n  {\n    component: ExtractPresentationalTodoList,\n    title: 'Extracting a Redux Presentational Component for the Todo List',\n    slug: 'javascript-redux-extracting-presentational-components-todo-todolist'\n  },\n  {\n    component: ExtractPresentationalFilterLink,\n    title: 'Extracting a Redux Presentational Component for the AddTodo, Footer, and FilterLink',\n    slug: 'javascript-redux-extracting-presentational-components-addtodo-footer-filterlink'\n  },\n  {\n    component: ExtractContainerFilterLink,\n    title: 'Extracting a Redux Container Component for FilterLink',\n    slug: 'javascript-redux-extracting-container-components-filterlink'\n  },\n  {\n    component: ExtractContainerAddTodo,\n    title: 'Extracting a Redux Container Component for VisibleTodoList and AddTodo',\n    slug: 'javascript-redux-extracting-container-components-visibletodolist-addtodo'\n  },\n  {\n    component: PassStoreViaProps,\n    title: 'Passing the Redux store down explicitly via props',\n    slug: 'javascript-redux-passing-the-store-down-explicitly-via-props'\n  },\n  {\n    component: PassStoreViaContext,\n    title: 'Passing the Redux Store Implicitly via Context',\n    slug: 'javascript-redux-passing-the-store-down-implicitly-via-context'\n  },\n  {\n    component: PassStoreViaProvider,\n    title: 'Passing the Redux Store Down with Provider from react-redux',\n    slug: 'javascript-redux-passing-the-store-down-with-provider-from-react-redux'\n  },\n  {\n    component: GenerateWithConnectTodoList,\n    title: 'Generating redux containers with connect from react-redux for VisibleTodoList',\n    slug: 'javascript-redux-generating-containers-with-connect-from-react-redux-visibletodolist'\n  },\n  {\n    component: GenerateWithConnectAddTodo,\n    title: 'Generating redux containers with connect from react-redux for AddTodo',\n    slug: 'javascript-redux-generating-containers-with-connect-from-react-redux-addtodo'\n  },\n  {\n    component: GenerateWithConnectFooter,\n    title: 'Generating redux containers with connect from react-redux for FooterLink',\n    slug: 'javascript-redux-generating-containers-with-connect-from-react-redux-footerlink'\n  },\n  {\n    component: ExtractActionCreators,\n    title: 'Extracting Redux Action Creators',\n    slug: 'javascript-redux-extracting-action-creators'\n  }\n]\n\n\n\n// WEBPACK FOOTER //\n// lessons/index.js","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In this lesson, I use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`expect`}</MDXTag>{` Library to make test assertions, and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`deep-Freeze`}</MDXTag>{` to make sure that my code is free of mutations.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's say that I want to implement a count release application. I would need to write a few functions that operate on its state, and its state is an array of JavaScript numbers representing the individual counters.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The first function I want to write is called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`addCounter`}</MDXTag>{`, and all it should do is to append a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`0`}</MDXTag>{` at the end of the past array.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` addCounter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`list`}</MDXTag>{`) =>`}</MDXTag>{` {\n\n};\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` testAddCounter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` listBefore = [];\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` listAfter = [`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`];\n  expect(\n    addCounter(listBefore)\n  ).toEqual(listAfter);\n};\n\ntestAddCounter();\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-built_in\"]}}>{`console`}</MDXTag>{`.log(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'All tests passed'`}</MDXTag>{`);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`At first, I use the array `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`push`}</MDXTag>{` method to add a new item at the end of the array, and it works.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` addCounter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`list`}</MDXTag>{`) =>`}</MDXTag>{` {\n  list.push(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`);\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` list;\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`However, we need to learn to avoid mutations in Redux, and I'm enforcing this by calling `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`deepFreeze`}</MDXTag>{` on the original array.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`deepFreeze(listBefore);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now my attempt to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`push`}</MDXTag>{` does not work. It cannot add a new property to a frozen object. Instead of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`push`}</MDXTag>{`, I'm going to use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`concat`}</MDXTag>{` method, which does not modify the original array.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` addCounter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`list`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` list.concat([`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`]);\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now the tests pass without mutations, and I can also use the new `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://egghead.io/lessons/ecmascript-6-using-the-es6-spread-operator\"}}>{`ES6 array spread operator`}</MDXTag>{` to write the same code in a more concise way.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` addCounter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`list`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` [...list, `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`];\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`My next function is called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`removeCounter`}</MDXTag>{`, and it accepts two arguments, an array of numbers, and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`index`}</MDXTag>{` of the number to skip from the array.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` removeCounter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`list, index`}</MDXTag>{`) =>`}</MDXTag>{` {\n\n};\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` testRemoveCounter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` listBefore = [`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`, `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`10`}</MDXTag>{`, `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`20`}</MDXTag>{`];\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` listAfter = [`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`, `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`20`}</MDXTag>{`];\n\n  expect(\n    removeCounter(listBefore, `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`)\n  ).toEqual(listAfter);\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`If I've got three numbers and I'm passing one as the second argument, I expect to receive an array with two numbers with the second item skipped in the result array.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Usually, to delete an item from the array, I would use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`splice`}</MDXTag>{` method. However, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`splice`}</MDXTag>{` is a mutating method, so you can't use it in Redux.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` removeCounter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`list, index`}</MDXTag>{`) =>`}</MDXTag>{` {\n  list.splice(index, `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`);\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` list;\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm going to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`deepFreeze`}</MDXTag>{` the array object, and now I need to figure out a different way to remove an item from the array without mutating it.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm using a method called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`slice`}</MDXTag>{` here, and it doesn't have anything to do with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`splice`}</MDXTag>{`. It is not mutating, and it gives me a part of the array from some beginning to some end index.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` removeCounter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`list, index`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` [\n    ...list.slice(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`, index),\n    ...list.slice(index + `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`)\n  ];\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`What Im doing is that Im taking the parts before the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`index`}</MDXTag>{` I want to skip and after the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`index`}</MDXTag>{` I want to skip, and I concatenate them to get a new array.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, instead of writing it as a method chain with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`concat`}</MDXTag>{` calls, I can use the ES6 array spread operator to write it more concisely.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now that we implemented adding and removing counters, let's implement increment in the counter. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`incrementCounter`}</MDXTag>{` function takes two arguments, the array and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`index`}</MDXTag>{` of the counter that should be incremented, so the return value has the same count of items, but one of them is incremented.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` incrementCounter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`list, index`}</MDXTag>{`) =>`}</MDXTag>{` {\n\n};\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` testIncrementCounter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` listBefore = [`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`, `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`10`}</MDXTag>{`, `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`20`}</MDXTag>{`];\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` listAfter = [`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`, `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`11`}</MDXTag>{`, `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`20`}</MDXTag>{`];\n\n  expect(\n    incrementCounter(listBefore, `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`)\n  ).toEqual(listAfter)\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Directly setting the array value at index works, but this is a mutation. If we add a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`deepFreeze`}</MDXTag>{` call, it's not going to work anymore, so how do we replace a single value in the array without mutating it?`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` incrementCounter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`list, index`}</MDXTag>{`) =>`}</MDXTag>{` {\n  list[index]++;\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` list;\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`It turns out that the answer is really similar to how we remove an item. We want to take the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`slice`}</MDXTag>{` before the index, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`concat`}</MDXTag>{` it with a single item array with a new value, and then `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`concat`}</MDXTag>{` it with the rest of the original array.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` incrementCounter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`list, index`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` [\n    ...list.slice(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`,index),\n    list[index] + `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`,\n    ...list.slice(index + `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`)\n  ];\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, with the ES6 spread operator, we can spread over the left part of the array, specify the new item, and then spread over the right part of the original array, and this looks much nicer.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In this lesson, you learned how to use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`concat`}</MDXTag>{` method or the spread operator, and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`slice`}</MDXTag>{` method to add, remove, and change items in arrays without mutating them, and how to protect yourself with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`deepFreeze`}</MDXTag>{` from mutation in your tests.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-avoiding-array-mutations-with-concat-slice-and-spread.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`Like in previous example, I use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`expect`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`deep-freeze`}</MDXTag>{` libraries from NPM to make my test assertions. This time, I'm testing a function called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`toggleTodo`}</MDXTag>{` that takes our todo object and flips its `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` field. If `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` was `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`false`}</MDXTag>{`, it should be `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`true`}</MDXTag>{` in the return value. If it was `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`true`}</MDXTag>{`, it should be `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`false`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` toggleTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`todo`}</MDXTag>{`) =>`}</MDXTag>{` {\n\n};\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` testToggleTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todoBefore = {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'Learn Redux'`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`false`}</MDXTag>{`\n  };\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todoAfter = {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'Learn Redux'`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`true`}</MDXTag>{`\n  };\n\n  expect(\n    toggleTodo(todoBefore)\n  ).toEqual(todoAfter);\n};\n\ntestToggleTodo();\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-built_in\"]}}>{`console`}</MDXTag>{`.log(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'All tests passed.'`}</MDXTag>{`);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Just like in the previous lesson, I'm going to start by writing a mutated version that passes the current test. A mutated version just flips the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` field, reassigns it on the past object.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` toggleTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`todo`}</MDXTag>{`) =>`}</MDXTag>{` {\n  todo.completed = !todo.completed;\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` todo;\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`While it works, we know that `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`mutations are not allowed in Redux`}</MDXTag>{`. So to enforce this, I'm calling `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`deepFreeze`}</MDXTag>{` on my `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` object. I'm not allowed to change its completed field anymore.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`One way out of this would be to create the new object with every field copied from the original object except the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` field, which would be flipped. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` toggleTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`todo`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: todo.id,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: todo.text,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: !todo.completed\n  };\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`However, if we later add new properties to the new object, we might forget to update this piece of code to include them.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This is why I suggest you to use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Object.assign`}</MDXTag>{` method, which is new to ES6. It lets you assign properties of several objects onto the target object. Note how the object assign argument order corresponds to that of the JavaScript assignment operator.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` toggleTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`todo`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-built_in\"]}}>{`Object`}</MDXTag>{`.assign({}, todo, {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: !todo.completed\n  });\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The left argument is the one whose properties are going to be assigned, so it's going to be mutated. This is why we're passing an empty object as the first argument, so we don't mutate any existing data. Every further argument to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Object.assign`}</MDXTag>{` will be considered one of the source objects whose properties will be copied to the target object.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`It is important that if several sources specify different values for the same property, the last one wins. This is what we use to override the completed field despite what the original `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` object says.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, you need to remember that `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Object.assign`}</MDXTag>{` is a new method in ES6, so it is `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`not natively available`}</MDXTag>{` in all the browsers. You should use a polyfill, either the one that ships with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Babel`}</MDXTag>{` or a standalone `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Object.assign`}</MDXTag>{` polyfill, to use it without risking crashing your website.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Another option that doesn't require a polyfill is to use the new object spread operator, which is not part of ES6. However, it is proposed for ES7. It is fairly popular, and it is enabled in Babel if you use the stage two preset.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` toggleTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`todo`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n    ...todo,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: !todo.completed\n  };\n};`}</MDXTag></MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-avoiding-object-mutations-with-object-assign-and-spread.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`The second principle of `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`Redux`}</MDXTag>{` is that the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`state tree is read only`}</MDXTag>{`. You cannot modify or write to it. Instead, anytime you want to change the state, you need to dispatch an action.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`An `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`action`}</MDXTag>{` is a `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`plain JavaScript object`}</MDXTag>{` describing the change. Just like the state is the minimal representation of the data in your app, the action is the minimal representation of the change to that data.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/DescribingActions.png\",\"alt\":\"Describing Actions\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The structure of the action object is up to you. The only requirement is that it has a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`type`}</MDXTag>{` property, which is not `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`undefined`}</MDXTag>{`. We suggest using strings, because they are serializable.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In different apps, you're going to have different types of actions. For example, in a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`counter`}</MDXTag>{` app we only have `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`INCREMENT`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`DECREMENT`}</MDXTag>{` actions. We don't pass any additional information, because this is all that is needed to describe these changes.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`But say, for a counter list example, we have more actions. We have `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_COUNTER`}</MDXTag>{` action, we have a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`REMOVE_COUNTER`}</MDXTag>{` action, and anytime I change the individual counter, you can see that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`INCREMENT`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`DECREMENT`}</MDXTag>{` actions now have index. Because we need to describe which particular counter was changed.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/MultipleActions.png\",\"alt\":\"Multiple Actions\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This approach scales well to medium and complex applications. Anytime I add a todo, the components don't really know how exactly it's been added. All they know is that they need to dispatch an action with a type, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_COUNTER`}</MDXTag>{`, and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`text`}</MDXTag>{` of the todo and a sequential `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`If I toggle a todo, again, the components don't know how it happens. All they need to do is to dispatch an action with a type, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{` and pass in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` of the todo I want to toggle.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/ComplexExample.png\",\"alt\":\"Complex Example\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The same is true for the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`. Anytime I click on this control to change the currently visible todos, what really happens is this component dispatches an action with a type, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SET_VISIBILITY_FILTER`}</MDXTag>{`, and pass in the desired filter string, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` field.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`But these are all plain objects, describing what happens in a app.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now you know the second principle of Redux -- the state is read only. The only way to change the state tree is by dispatching an action. An action is a plain JavaScript object, describing in the minimal way what changed in the application. Whether it is initiated by a network request or by user interaction, any data that gets into the Redux application gets there by actions.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-describing-state-changes-with-actions.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`So far we have covered the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`container components`}</MDXTag>{`, the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`presentational components`}</MDXTag>{`, the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`reducers`}</MDXTag>{`, and the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`store`}</MDXTag>{`. But we have not covered the concept of `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`action creators`}</MDXTag>{`, which you might see in the Redux talks and examples.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's consider the following example. I dispatched the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` action from inside the button `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick`}</MDXTag>{` handler. This is fine. However, it references the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`nextTodoId`}</MDXTag>{` variable, which added there alongside the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` component.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`let`}</MDXTag>{` nextTodoId = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`;\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`let`}</MDXTag>{` AddTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`{ dispatch }`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`let`}</MDXTag>{` input;\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n      `}</MDXTag>{`<input ref={node => {\n        input = node;\n      }} />\n      <button onClick={() => {\n        dispatch({\n          type: 'ADD_TODO',\n          id: nextTodoId++,\n          text: input.value\n        })\n        input.value = '';\n      }}>\n        Add Todo\n      </button>\n    </div>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  );\n};`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Normally, it would be local. However, what if another component wants to dispatch the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` action? It would need to have the access to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`nextTodoId`}</MDXTag>{` somehow. While I could make this variable global, it's not a very good idea.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Instead, it would be best if the components dispatching the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` action did not have to worry about specifying the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{`. Because the only information they really pass is the text of the todo being added.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I don't want to generate the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` inside the reducer, because that would make it non-deterministic. However, I can extract this code generating the action object into a function I will call `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`addTodo`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<button onClick={() => {\n        dispatch(addTodo(input.value));\n        input.value = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`''`}</MDXTag>{`;\n      }}>\n        Add Todo\n      <`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-regexp\"]}}>{`/button>`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I pass the input value to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`addTodo`}</MDXTag>{`. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`addTodo`}</MDXTag>{` is just the function that takes the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`text`}</MDXTag>{` of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` and constructs an action object representing `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` action. It has the type, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{`, it takes care of generating the unique `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` and it includes the text.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` addTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`text`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: nextTodoId++\n    text\n  };\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Although extraction such functions is not required, it is very common pattern in Redux applications to keep them maintainable, so, like all these functions, action creators, and we usually place them separately from components or from reducers.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I will now extract other action creators from the components. I see that I have `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`setVisibilityFilter`}</MDXTag>{` dispatch here, so I will change this to call this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`setVisibilityFilter`}</MDXTag>{` action creator with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ownProps.filter`}</MDXTag>{` as the argument and is going to return the action that needs to be dispatched, so I'm declaring this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`setVisiblityFilter`}</MDXTag>{` function.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` mapDispatchToLinkProps = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{` ... `}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`onClick`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n    dispatch(\n      setVisibilityFilter(ownProps.filter)\n    );\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This is what I call an action creator, because it takes the arguments about the action and it returns the action object with the type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SET_VISIBILITY_FILTER`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` itself.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` setVisibilityFilter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`filter`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SET_VISIBILITY_FILTER'`}</MDXTag>{`,\n    filter\n  };\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`You might think that this kind of code is boilerplate and you'd rather dispatch the action in line inside the component. However, don't underestimate how action creators document your software, because they tell your team what kinds of actions the components can dispatch, and this kind of information can be invaluable in large applications.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I will now scroll down to the last place where I call `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` with an inline action object. I will now extract that to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`toggleTodo`}</MDXTag>{` action creator, to which I pass the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` of the todo as the argument.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` mapDispatchToTodoListProps = (\n  dispatch\n) => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`onTodoClick`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`id`}</MDXTag>{`) =>`}</MDXTag>{` {\n      dispatch(toggleTodo(id));\n    }\n  };\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm now scrolling up to my action creators and I will add a new one that I call `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`toggleTodo`}</MDXTag>{`. It accepts the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` as the argument and it returns the action of the type, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{`, and this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` toggleTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`id`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`,\n    id\n  };\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's take a moment to consider how convenient it is to have all the action creators in a single place so that I can use them from components and tests without worrying about the action's internal structure.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Know that whether you use action creators or not, the data flow is exactly the same, because I just call the action creator to get the action object and then I call `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` just like I did before, passing the action.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-extracting-action-creators.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the previous lesson, we separated the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`presentational components`}</MDXTag>{` from the main `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`container component`}</MDXTag>{`. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` specifies the behaviors, which is what happens when add button, how the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` are selected, what happens when a single todo is being clicked, and what happens when a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FooterLink`}</MDXTag>{` is clicked.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The components, such as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{`, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{`, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Todo`}</MDXTag>{` itself, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{`, and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{`, they don't dispatch actions. They call their callbacks in the props. They are only responsible for the looks but not for the behavior.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The downside of this approach is that I have to pass a lot of props down the tree even when the intermediate components don't really use them.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`For example, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` needs to know the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`currentFilter`}</MDXTag>{` so that it can choose a different appearance when it is active.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` FilterLink = ({\n  filter,\n  currentFilter,\n  children,\n  onClick\n}) => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`if`}</MDXTag>{` (filter === currentFilter) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`span`}</MDXTag>{`>`}</MDXTag>{`{children}`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`span`}</MDXTag>{`>`}</MDXTag></MDXTag>{`;\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`However, in order to receive the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`currentFilter`}</MDXTag>{`, it has to be passed down from the top. This is why the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{` has to accept `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` as a prop, so it can pass it down as a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`currentFilter`}</MDXTag>{` to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Footer = ({\n  visibilityFilter,\n  onFilterClick\n}) => (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag>{`\n    Show:\n    {' '}\n    `}</MDXTag>{`<FilterLink\n      filter='SHOW_ALL'\n      currentFilter={visibilityFilter}\n      onClick={onFilterClick}\n    >\n    All\n    </FilterLink>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n\n    ...\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n)`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In a way, this breaks encapsulation because the parent components need to know too much about what data the child components need. To solve this, we're going to extract a few more container components, just like we extracted the presentation components in the previous lesson.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The first component I'm going to refactor is the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{` component. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<Footer\n  visibilityFilter={visibilityFilter}\n  onFilterClick={filter =>\n    store.dispatch({\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SET_VISIBILITY_FILTER'`}</MDXTag>{`,\n      filter\n    })\n  }\n/>`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Currently, it accepts two props -- the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`, and the on `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onFilterClick`}</MDXTag>{`. But it doesn't actually use either of them. It just passes them down to the filter link. This seems like a good opportunity for simplification.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`We can only do this because we know that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{` component doesn't care about the values of these props. They only exist to be passed down to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` that cares about them.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<FilterLink\n  filter=`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SHOW_ALL'`}</MDXTag>{`\n  currentFilter={visibilityFilter}\n  onClick={onFilterClick}\n>`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I am removing the props definition, and I'm removing these props from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` usage. It might start to seem a lot like the the code before separating the presentational component. However, what I want to do here is a little bit different.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Footer = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag>{`\n    Show:\n    {' '}\n    `}</MDXTag>{`<FilterLink\n      filter='SHOW_ALL'\n    >\n      All\n    </FilterLink>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n    {', '}\n    `}</MDXTag>{`<FilterLink\n      filter='SHOW_ACTIVE'\n    >\n      Active\n    </FilterLink>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n    {', '}\n    `}</MDXTag>{`<FilterLink\n      filter='SHOW_COMPLETED'\n    >\n      Completed\n    </FilterLink>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` does not currently specify the behavior for clicking on the link. It also needs the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`currentFilter`}</MDXTag>{` to tell whether it should be rendered as active.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Therefore, it's a bit dishonest to say that `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` is a presentational component because it is inseparable from its behavior. The only reasonable reaction to clicking on it is setting the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` by dispatching an action.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This is why I'm changing it to a different presentational component I'm going to call, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` I will create another `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` component as a container that uses it for rendering. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` component doesn't know anything about the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{`. It only accepts the active prop, and it calls its own click handler. It is only concerned with rendering.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Link = ({\n  active,\n  children,\n  onClick\n}) => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`if`}</MDXTag>{` (active) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`span`}</MDXTag>{`>`}</MDXTag>{`{children}`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`span`}</MDXTag>{`>`}</MDXTag></MDXTag>{`;\n  }\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`a`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`href`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`'#'`}</MDXTag>{`\n       `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onClick`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{e`}</MDXTag>{` =>`}</MDXTag>{` {\n         e.preventDefault();\n         onClick();\n       }}\n    >\n      {children}\n    `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`a`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n  );\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`However, I'm also creating another component, called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` It is going to be a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`class`}</MDXTag>{` this time that is going to render the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` with the current data from this store. It's going to read the component `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`props`}</MDXTag>{`, and it's going to read the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{`. But I don't mean react state. I mean the Redux store state it gets by calling, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store.getState`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`FilterLink`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n  render() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` props = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` state = store.getState();\n\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`Link`}</MDXTag>{`\n        `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`active`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{`}</MDXTag>{`\n          `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`props.filter`}</MDXTag>{` ===\n          `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`state.visibilityFilter`}</MDXTag>{`\n        }\n      >`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`Link`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n    );\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`As a container component, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` doesn't have its own markup. It delegates rendering to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` presentational component. In this case, it calculates its active prop by comparing its own `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` prop with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` in the Redux store state. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` prop is the one that is passed to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{`. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` corresponds to the currently chosen `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` that is held in Redux store state. If they match, we want the link to appear active.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The container component also needs to specify the behavior. In this case, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` specifies that when this particular `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` is clicked, we should dispatch the action with the type set `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` value that we take from the props.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`FilterLink`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n  render() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` props = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` state = store.getState();\n\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`Link`}</MDXTag>{`\n        `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`active`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`...`}</MDXTag>{` }\n        `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onClick`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{()`}</MDXTag>{` =>`}</MDXTag>{`\n          store.dispatch({\n            type: 'SET_VISIBILITY_FILTER',\n            filter: props.filter\n          })\n        }\n      >\n      {props.children}\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`Link`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n    );\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` may accept children which are used as the contents of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{`, so we're going to pass the children down to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` component. We're just going to render them inside the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<a>`}</MDXTag>{` tag.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`There is a small problem with this implementation of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{`. Inside the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` method, it reads the current state of the Redux store. However, it does not subscribe to this store. If the parent component does not update when this store is updated, it's going to render this stale value.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Currently, we rerender the whole application when the state changes. However, this is not very efficient. In future, we will instead move subscription to this store, to the lifecycle methods of the container components.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`FilterLink`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n  componentDidMount() {\n    store.subscribe(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.forceUpdate()\n  );\n  }\n}\n\nrender() { ... }`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`React provides a special `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`forceUpdate`}</MDXTag>{` method on the component instances to force their re-rendering. We're going to use it together with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store.subscribe`}</MDXTag>{` method so that any time the store state changes, we force update the container components.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`We perform the subscription inside the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`componentDidMount`}</MDXTag>{` lifecycle method. So it's important to unsubscribe inside the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`componentWillUnmount`}</MDXTag>{` method. Note that we don't actually have the unsubscribe function, but this is the return value of the store subscribe method, so we can keep it, and then call it inside `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`componentWillUnmount`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`FilterLink`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n  componentDidMount() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.unsubscribe = store.subscribe(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.forceUpdate()\n    );\n  }\n\n  componentWillUnmount() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.unsubscribe();\n  }\n}\nrender() { ... }`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's recap this part. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` component subscribes to this store, calling `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`forceUpdate`}</MDXTag>{` any time this store changes so it can render the current state of this store. It saves the reference through the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`unsubscribe`}</MDXTag>{` function returned by `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store.subscribe`}</MDXTag>{`. It invokes it when the component is about to unmount to clean up the subscription.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's recap the relationship between the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` container component and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` presentational component. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` component only specifies the appearance of the the link, when it is active or inactive, but it doesn't know about the behavior. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` component is a container, so it provides the data and the behavior for the presentational component.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`When it mounts, it subscribes to this store, so it independently re-renders when the store state changes because it needs to use this store current state inside its `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` method.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Instead of specifying the DOM tree, it delegates all the rendering to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` presentational component. Its only job is to calculate the props based on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{`'s own props and the current state of the Redux store. It also specifies the callbacks that are going to dispatch the actions on this store.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`FilterLink`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n  componentDidMount() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.unsubscribe = store.subscribe(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.forceUpdate()\n    );\n  }\n  \n  componentWillUnmount() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.unsubscribe();\n  }\n  \n  render() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` props = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` state = store.getState();\n    \n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`Link`}</MDXTag>{`\n        `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`active`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{`}</MDXTag>{`\n          `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`props.filter`}</MDXTag>{` ===\n          `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`state.visibilityFilter`}</MDXTag>{`\n        }\n        `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onClick`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{()`}</MDXTag>{` =>`}</MDXTag>{`\n          store.dispatch({\n            type: 'SET_VISIBILITY_FILTER',\n            filter: props.filter\n          })\n        }\n      >\n        {props.children}\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`Link`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n    );\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`After the action is dispatched, this store will remember the new state returned by the reducer and will call every subscriber to this store. In this case, every `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` component instance is subscribed to this store, so they will all have their `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`forceUpdate`}</MDXTag>{` methods called on them. They will re-render according to the current store state.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` is a container component, so it is completely self-sufficient and can be used inside the\npresentational components, such a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{`, without passing additional props to get the data from this store and specify the behavior. This lets us keep the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{` component simple and decoupled from the behavior and the data that its child components need.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-extracting-container-components-filterlink.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the previous lesson, I separated the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`presentational components`}</MDXTag>{` from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`container components`}</MDXTag>{` that is subscribed to the Redux store and that provides the data and the behavior for the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` component it renders.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`While it makes the data flow a little bit less explicit, it makes it easy to use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` in any component without worrying about passing additional data to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` or to the component that contains it. In this lesson we'll continue extracting the container components from the top level container component. The first candidate is the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{` component.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I actually want to keep the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{` presentational component. However, I want to encapsulate within the currently visible todos this into a separate container components that connects the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{` to the Redux store. I'm going to call this component the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`VisibleTodoList`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`VisibleTodoList`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Just like when declaring the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` component in the previous lesson, I calculate the data from the current component by using the current state which is the state from the Redux store. I'm using the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getVisibleTodos`}</MDXTag>{` function to calculate the currently visible todos based on all the todos from the Redux store and the current `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` from the Redux store state. I'm specifying the behavior as well. I'm saying that when the todo is clicked, we should dispatch an action with the type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` of the todo being clicked.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`VisibleTodoList`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n  render() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` props = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` state = store.getState();\n\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`TodoList`}</MDXTag>{`\n        `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`todos`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{`}</MDXTag>{`\n          `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`getVisibleTodos`}</MDXTag>{`(\n            `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`state.todos`}</MDXTag>{`,\n            `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`state.visibilityFilter`}</MDXTag>{`\n          )\n        }\n        `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onTodoClick`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{id`}</MDXTag>{` =>`}</MDXTag>{`\n          store.dipatch({\n            type: 'TOGGLE_TODO',\n            id\n          })\n        }\n      />\n    );\n  }\n}`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`All container components are similar. Their job is to `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`connect a presentational components to the Redux store`}</MDXTag>{` and specify the data and the behavior that it needs. I'm scrolling up to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` container components I wrote in the previous lesson to copy-paste this store subscription logic.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`componentDidMount() {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.unsubscribe = store.subscribe(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{`\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.forceUpdate()\n  );\n}\n\ncomponentWillUnmount() {\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.unsubscribe();\n}\n\nrender() { ... }`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Just like the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{`, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`VisibleTodoList`}</MDXTag>{` is going to subscribe to this store and force an update any time this store state changes because it uses this state in its `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` method. Now that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`VisibleTodoList`}</MDXTag>{` is connected to the Redux store, we can use it instead of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{`. We no longer have to pass all the props from the top.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` TodoApp = ({\n  todos,\n  visibilityFilter\n}) => (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n    `}</MDXTag>{`<AddTodo ... />\n    <VisibleTodoList />\n    <Footer />\n  </div>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n);`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, in the previous lesson, I made `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AppTodo`}</MDXTag>{` a presentational components, but I'm going to backtrack on this now. I will copy-paste the dispatch call back in line into the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick`}</MDXTag>{` handler inside the component because there isn't really a lot of presentation or behavior here.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`It's easier to keep them together until we figure out how to split the presentation. For example, if in the future, we're going to have something like a form component, we may split it, but for now we'll keep them together.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` AddTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`let`}</MDXTag>{` input;\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n      `}</MDXTag>{`<input ref={node => {\n        input = node;\n      }} />\n      <button onClick={() => {\n        store.dispatch({\n          type: 'ADD_TODO',\n          id: nextTodoId++,\n          text: input.value\n        })\n        input.value = '';\n      }}>\n        Add Todo\n      </button>\n    </div>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  );\n};`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm scrolling down to my `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component. I'm removing the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onAddClick`}</MDXTag>{` prop. I just noticed that none of the containers actually need any props from this state. I can remove the props of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component. I can remove the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` function that renders the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component with the current state of this store because I can just call it once, remove all the props that are related to this state and just render it as is because the container components that I render are going to subscribe to this store themselves and are going to update themselves when this store state changes.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` TodoApp = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n    `}</MDXTag>{`<AddTodo />`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n    `}</MDXTag>{`<VisibleTodoList />`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n    `}</MDXTag>{`<Footer />`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n);\n\nReactDOM.render(\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`TodoApp`}</MDXTag>{` />`}</MDXTag>{`,\n  document.getElementById('root')\n);`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's recap the data flow after separating the presentational and the container components. There is just one `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reactDOM.render`}</MDXTag>{` call at the very end. We don't render again when this store state changes because the container components take care of that.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` TodoApp = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n    `}</MDXTag>{`<AddTodo />`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n    `}</MDXTag>{`<VisibleTodoList />`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n    `}</MDXTag>{`<Footer />`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n);\n\nReactDOM.render(\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`TodoApp`}</MDXTag>{` />`}</MDXTag>{`,\n  document.getElementById('root')\n);`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The first component I'm looking at is called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{`. Frankly, I can't classify it either as a presentational components or as a container components because it doesn't fit either category. The input and the button are the presentational part, but dispatching an action `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick`}</MDXTag>{` is the behavior which is usually specified by the container.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` AddTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`let`}</MDXTag>{` input;\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n      `}</MDXTag>{`<input ref={node => {\n        input = node;\n      }} />\n      <button onClick={() => {\n        store.dispatch({\n          type: 'ADD_TODO',\n          id: nextTodoId++,\n          text: input.value\n        })\n        input.value = '';\n      }}>\n        Add Todo\n      </button>\n    </div>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  );\n};`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`However, in this case, I'd rather keep them together because there isn't any state, the UI is very simple. It's hard to imagine any other behavior other than dispatching the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` action.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The second component are rendering inside the at `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` is called the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`VisibleTodoList`}</MDXTag>{` . This time, it is a proper container components that subscribes to this store and re-renders the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{` any time this store state changes. It calculates the visible todos from the current Redux store state, the todos and the\n`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` fields. It passes them as the todos.\nWhen the todos are clicked, it's going to dispatch an action with the type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` of the respective todo.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`VisibleTodoList`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n  componentDidMount() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.unsubscribe = store.subscribe(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.forceUpdate()\n    );\n  }\n  \n  componentWillUnmount() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.unsubscribe();\n  }\n  \n  render() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` props = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` state = store.getState();\n    \n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`TodoList`}</MDXTag>{`\n        `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`todos`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{`}</MDXTag>{`\n          `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`getVisibleTodos`}</MDXTag>{`(\n            `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`state.todos`}</MDXTag>{`,\n            `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`state.visibilityFilter`}</MDXTag>{`\n          )\n        }\n        `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onTodoClick`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{id`}</MDXTag>{` =>`}</MDXTag>{`\n          store.dispatch({\n            type: 'TOGGLE_TODO',\n            id\n          })            \n        }\n      />\n    );\n  }\n}`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The actual rendering here is performed by the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{` component that just renders the todos passed through it as prop and binds their clicks through the on `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onTodoClick`}</MDXTag>{` prop.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, the last component `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` renders is the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{`. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{` is just a presentational component rendering three different `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{`. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Footer = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag>{`\n    Show:\n    {' '}\n    `}</MDXTag>{`<FilterLink filter='SHOW_ALL'>\n      All\n    </FilterLink>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n\n    ...\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` is a container component. It subscribes to this store and it renders the presentational component called, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{`, calculating whether it should be active based on its props and the current Redux store state and specifies the behavior what happens when it's clicked.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`FilterLink`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n  componentDidMount() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.unsubscribe = store.subscribe(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.forceUpdate()\n    );\n  }\n  \n  componentWillUnmount() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.unsubscribe();\n  }\n  \n  render() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` props = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` state = store.getState();\n    \n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`Link`}</MDXTag>{`\n        `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`active`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{`}</MDXTag>{`\n          `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`props.filter`}</MDXTag>{` ===\n          `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`state.visibilityFilter`}</MDXTag>{`\n        }\n        `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onClick`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{()`}</MDXTag>{` =>`}</MDXTag>{`\n          store.dispatch({\n            type: 'SET_VISIBILITY_FILTER',\n            filter: props.filter\n          })\n        }\n      >\n        {props.children}\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`Link`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n    );\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` component is just a presentational component that render `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<a>`}</MDXTag>{` tag. Separating the container and the presentational component is often a good idea, but you shouldn't take it as a dogma. Only do this when it truly reduces the complexity of your code base.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Link = ({\n  active,\n  children,\n  onClick\n}) => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`if`}</MDXTag>{` (active) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`span`}</MDXTag>{`>`}</MDXTag>{`{children}`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`span`}</MDXTag>{`>`}</MDXTag></MDXTag>{`;\n  }\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`a`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`href`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`'#'`}</MDXTag>{`\n       `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onClick`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{e`}</MDXTag>{` =>`}</MDXTag>{` {\n         e.preventDefault();\n         onClick();\n       }}\n    >\n      {children}\n    `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`a`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n  );\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In general, I suggest first trying to extract the presentational component. If there is too much boilerplate passing the props through them, then you can create the containers around them that load the data and specify the behavior.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-extracting-container-components-visibletodolist-addtodo.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the previous lesson, I extracted the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Todo`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{` components from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component. In this lesson, I will continue extracting other `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`presentational components`}</MDXTag>{` to separate the looks from the behavior.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now I want to extract the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`input`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`button`}</MDXTag>{` into a separate component called, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` I'm declaring `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` as a functional component that doesn't accept any props. I'm going to return these copy pasted `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`input`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`button`}</MDXTag>{`, but I'm wrapping them in a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`div`}</MDXTag>{` because a component needs to have a single root element.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` AddTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n      `}</MDXTag>{`<input ref={node => {\n        this.input = node;\n      }} />\n      <button onClick={() => {\n        store.dispatch({\n          type: 'ADD_TODO',\n          text: this.input.value,\n          id: nextTodoId++\n        });\n        this.input.value = '';\n      }}>\n      Add Todo\n      </button>\n    </div>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  );\n};`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The functional components don't have instances. However, instead of using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`this`}</MDXTag>{`, I can use a local variable called, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`input`}</MDXTag>{`, that I'm going to close over so I can write to it in the callback ref and I can read from it in the event handler.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` AddTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`let`}</MDXTag>{` input;\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n      `}</MDXTag>{`<input ref={node => {\n        input = node;\n      }} />\n      <button onClick={() => { ... }}>\n      Add Todo\n      </button>\n    </div>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  );\n};`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Like previously, I want it to be a presentational component and not specify behavior, so I just called the function called, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onAddClick`}</MDXTag>{` passing the current input value. I make `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onAddClick`}</MDXTag>{` a prop so that the component that uses `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` can specify what happens when that button is clicked.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` AddTodo = ({\n  onAddClick\n}) => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`let`}</MDXTag>{` input;\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n      `}</MDXTag>{`<input ref={node => {\n        input = node;\n      }} />\n      <button onClick={() => {\n        onAddClick(input.value);\n        input.value = '';\n      }}>\n      Add Todo\n      </button>\n    </div>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  );\n};`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Again, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component acts as a `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`container component`}</MDXTag>{` for the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{`. It specifies that when add button is clicked, we should dispatch an action with the type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{`, the corresponding text, and the next todo `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<AddTodo\n  onAddClick={id =>\n    store.dispatch({\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`,\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: nextTodoId++,\n      text\n    })\n  } />`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The last component I want to extract today is the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{`, which contains all these three filter links. I'm creating a new functional component called, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{`. I'm not sure which props it needs, so I skip them. I paste the markup. It seems that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` need the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`, so I add it as a prop.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Footer = ({\n  visibilityFilter\n}) => (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag>{`\n    Show:\n    {' '}\n    `}</MDXTag>{`<FilterLink\n      filter='SHOW_ALL'\n      currentFilter={visibilityFilter}\n    >\n      All\n    </FilterLink>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n\n    ...\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n)`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I would like the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` to be presentational components. However, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` includes a short dispatch call. I am replacing it with an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick`}</MDXTag>{` call. I pass the filter as the single parameter for the calling component's convenience. I add `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick`}</MDXTag>{` to the props.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` FilterLink = ({\n  filter,\n  currentFilter,\n  children,\n  onClick\n}) => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`a`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`href`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`'#'`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onClick`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{e`}</MDXTag>{` =>`}</MDXTag>{` {\n        e.preventDefault();\n        onClick(filter);\n      }}\n     >\n      {children}\n     `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`a`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n  );\n};\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Footer = ({\n  visibilityFilter,\n  onFilterClick\n}) => (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag>{`\n    Show:\n    {' '}\n    `}</MDXTag>{`<FilterLink\n      filter='SHOW_ALL'\n      currentFilter={visibilityFilter}\n      onClick={onFilterClick}\n    >\n      All\n    </FilterLink>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n    \n    ...\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now I need to specify it every time `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` is used. I add `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onFilterClick`}</MDXTag>{` to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{`. I pass `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick={onFilterClick}`}</MDXTag>{` for every `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{`, so whatever we pass to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{` as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onFilterClick`}</MDXTag>{` prop is going to end up in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Filter`}</MDXTag>{` link as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now I can use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{` component I just defined inside my `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component. I need to pass to props, one of them is the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` so it can highlight the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`active`}</MDXTag>{` link. Another prop is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onFilterClick`}</MDXTag>{` where I say that whenever a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` is clicked, I want to dispatch an action with a type set `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` and the filter being clicked.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<Footer\n  visibilityFilter={visibilityFilter}\n  onFilterClick={filter =>\n    store.dispatch({\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SET_VISIBILITY_FILTER'`}</MDXTag>{`,\n      filter\n    })\n  }\n/>`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, I just noticed that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component doesn't actually have to be a class. I can turn it into a function. I prefer to do that when possible.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Instead of `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://egghead.io/lessons/ecmascript-6-destructuring-assignment\"}}>{`destructuring`}</MDXTag>{` the props inside the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` method, I am now doing it inside the argument. I can remove now the destructuring. I'm also going to remove the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` method declaration. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibleTodos`}</MDXTag>{` are only used in a single place, so I'm moving the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getVisibleTodos`}</MDXTag>{` call to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{` `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` prop declaration. Now the body of my function is just a single expression, so I can get rid of the return statement and unindent code to make it look nicer.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` TodoApp = ({\n  todos,\n  visibilityFilter\n}) => (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n    `}</MDXTag>{`<AddTodo ... />\n    <TodoList\n      todos={\n        getVisibleTodos(\n          todos,\n          visibilityFilter\n        )\n      }\n      onTodoClick={ ... }\n    />\n    <Footer ... />\n  </div>\n);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This concludes the initial refactoring of the todo list application into a single container component called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` and many presentational components that are only concerned with how things look.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's recap the data flow in this example.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`We have a single container component called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{`. We re-render it any time the store changes. It receives the keys of the global state object as the props, so it receives the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` values.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The first component it renders is called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<AddTodo\n  onAddClick={text =>\n    store.dispatch({\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`,\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: nextTodoId++,\n      text\n    })\n  }\n/>`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` is a presentational component that renders an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`input`}</MDXTag>{` and a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`button`}</MDXTag>{`. When the button is clicked, it passes the current `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`input.value`}</MDXTag>{` to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onAddClick`}</MDXTag>{` function.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` AddTodo = ({\n  onAddClick\n}) => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`let`}</MDXTag>{` input;\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n      `}</MDXTag>{`<input ref={node => {\n        input = node;\n      }} />\n      <button onClick={() => {\n        onAddClick(input.value);\n        input.value = '';\n      }}>\n      Add Todo\n      </button>\n    </div>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  );\n}`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onAddClick`}</MDXTag>{` function is a prop for the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` component. In this case, it is specified by the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{`, which says that when the button is clicked, it should dispatch an action containing the current text in the action object. Dispatching the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` action will call our reducer, update this store state with the new todos, and re-render the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component with the new todos.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The todos themselves are rendered by the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{` presentational component that receives two props, the currently visible todos and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onTodoClick`}</MDXTag>{` callback.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{` <TodoList\n      todos={\n        getVisibleTodos(\n          todos,\n          visibilityFilter\n        )\n      }\n      onTodoClick={\n        store.dispatch({\n          `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`,\n          id\n        })\n      }\n    />`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{` component receives an array of todos, and it maps over them, rendering individual `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Todo`}</MDXTag>{` components. It uses the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://egghead.io/lessons/ecmascript-6-using-the-es6-spread-operator\"}}>{`spread operator`}</MDXTag>{` to pass every property of the todo object as a prop to   `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Todo`}</MDXTag>{` component. It specifies the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick`}</MDXTag>{` handler as calling `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onTodoClick`}</MDXTag>{` with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` of the particular `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` TodoList = ({\n  todos,\n  onTodoClick\n}) => (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`ul`}</MDXTag>{`>`}</MDXTag>{`\n    {todos.map(todo =>\n      `}</MDXTag>{`<Todo\n        key={todo.id}\n        {...todo}\n        onClick={() => onTodoClick(todo.id)}\n      />\n    )}\n  </ul>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n);`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Todo`}</MDXTag>{` component is defined above. It is also a presentational component so it doesn't specify the behavior. It says that when a list item is clicked, it should call the on click handler. Being a presentational component it specifies how the component looks in different circumstances. In this case, it uses the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` prop to choose between two different styles of the todo item.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Todo = ({\n  onClick,\n  completed,\n  text\n}) => (\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`li`}</MDXTag>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onClick`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{onClick}`}</MDXTag>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`style`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{{`}</MDXTag>{`\n    `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`textDecoration:`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{` ?\n        '`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`line-through`}</MDXTag>{`' `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`:`}</MDXTag>{`\n        '`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`none`}</MDXTag>{`'\n  }}\n>`}</MDXTag>{`\n);`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{` is also presentational component. It delegates actually handling the click to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onTodoClick`}</MDXTag>{` prop. It passes the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` of the todo being clicked.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` TodoList = ({\n  todos,\n  onTodoClick\n}) => (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`ul`}</MDXTag>{`>`}</MDXTag>{`\n    {todos.map( todo =>\n      `}</MDXTag>{`<Todo\n        key={todo.id}\n        {...todo}\n        onClick{() => onTodoClick(todo.id)}\n      />\n    )}\n  </ul>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n)`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component reacts to it by dispatching an action containing the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` of the todo clicked and the type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`onTodoClick={id =>\nstore.dispatch({\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`,\n  id\n})\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The store will call our reducer and update the state of the application, re-rendering the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component with the new todos.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{` component receives the current `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` as a prop and also receives the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onFilterClick`}</MDXTag>{` callback that sets the current `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<Footer\n  visibilityFilter={visibilityFilter}\n  onFilterClick={filter =>\n    store.dispatch({\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SET_VISIBILITY_FILTER'`}</MDXTag>{`,\n      filter\n    })\n  }\n/>`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{` component renders three `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLinks`}</MDXTag>{`, passing down their respective filter values, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick`}</MDXTag>{` handler, and the current `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Footer = ({\n  visibilityFilter,\n  onFilterClick\n}) => (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag>{`\n    Show:\n    {' '}\n    `}</MDXTag>{`<FilterLink\n      filter='SHOW_ALL'\n      currentFilter={visibilityFilter}\n      onClick={onFilterClick}\n    >\n      All\n    </FilterLink>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n    \n    ...\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` component being a presentational component doesn't know what to do when it's clicked, so it calls the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick`}</MDXTag>{` callback, passing the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{`, which is different for each of those links, as an argument. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{` delegates handling the click of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` to its own prop, called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onFilterClick`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component being the container component in our application specifies the behavior, which in this case means that when the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` is clicked, it should dispatch an action with the type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SET_VISIBILITY_FILTER`}</MDXTag>{`, and the new `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Separation of the presentational components is not required in Redux, but I recommend this pattern because it decouples your rendering from Redux. So if you later choose to move your project to another framework, such as Relay, you will not have to change all your components because you can keep the presentational components exactly the same.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This approach also has downsides, such as that you have to thread a lot of props through the components to get them to the leaf components, including the callbacks. This problem can be easily solved by introducing many intermediate container components as we will see in the next lesson.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-extracting-presentational-components-addtodo-footer-filterlink.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the last few lessons, we created user interface for a simple React and Redux todo list where I can add items, toggle them as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{`, and change the currently visible todos.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`We do that by having a single `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component that has the input, the button for adding todos, the list of currently visible todos with click handler. It has these three links that let us change the currently visible todos.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The single component approach worked so far. However, we really want to have many components that can be used, tested, and changed by different people separately. So we're going to `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`refactor our application in this lesson`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The first component I want to extract from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component is the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Todo`}</MDXTag>{` component that renders a single list item. I am declaring the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Todo`}</MDXTag>{` component as a function which React 14 allows me to do. I'm not sure which props it's going to have, so I'll leave them blank for now. I will just paste the list item I copied before.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Todo = ({\n\n}) => (\n  key={todo.id}\n  <li\n    onClick={() => {\n      store.dispatch({\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`,\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: todo.id\n      });\n    }}\n    style={{\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`textDecoration`}</MDXTag>{`:\n        completed ?\n          `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'line-through'`}</MDXTag>{` :\n          `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'none'`}</MDXTag>{`\n    }}\n  >\n    {todo.text}\n  <`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-regexp\"]}}>{`/li>\n);`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The first thing I'm doing is removing the special key property because it's only needed when I enumerate an array. I'll use it later when enumerating many todos.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`One of my goals with this refactoring is to `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`make every component as flexible as it is reasonable`}</MDXTag>{`. Right now, I have hardcoded that clicking a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` always causes the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{` action. This is perfectly fine to do in your app.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`However`}</MDXTag>{`, I prefer to have a bunch of components that don't specify any behaviors, and that are only concerned with how things look or how they render. I call such components the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`presentational components`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I would like to give `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` a presentational component, so I removed the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick`}</MDXTag>{` handler. I promote it to be a prop so that anyone who uses `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` component can specify what happens on the click. You don't have to do this in your Redux apps, but I find it to be a very convenient pattern.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Todo = ({\n  onClick,\n  completed,\n  text\n}) => (\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`li`}</MDXTag>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onClick`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{onClick}`}</MDXTag>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`style`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{{`}</MDXTag>{`\n    `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`textDecoration:`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{` ?\n        '`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`line-through`}</MDXTag>{`' `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`:`}</MDXTag>{`\n        '`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`none`}</MDXTag>{`'\n  }}\n>`}</MDXTag>{`\n  {todo.text}\n`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`li`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, while it doesn't have a lot of difference, I prefer to keep it explicit what is the data that the component needs to render. Instead of passing a todo object, I pass `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`text`}</MDXTag>{` fields as separate props.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Todo = ({\n  onClick,\n  completed,\n  text\n}) => (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`li`}</MDXTag>{`\n    `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onClick`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{onClick}`}</MDXTag>{`\n    `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`style`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{{...}}`}</MDXTag>{`\n  >`}</MDXTag>{`\n    {text}\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`li`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Note how the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` component is now a purely presentational component and doesn't specify any behavior. But it knows how to render `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The next component I create is called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{`. It's also a presentational component. It's only concerned with how things look.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` TodoList = ({\n  todos\n}) => ();`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`It accepts an array of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{`. It's going to render an unordered list of them by calling the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos.map`}</MDXTag>{` function and rendering at `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` component for every `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{`. It tells React to use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo.id`}</MDXTag>{` as the unique key for the elements. It `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://egghead.io/lessons/ecmascript-6-using-the-es6-spread-operator\"}}>{`spreads`}</MDXTag>{` over the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` object properties so the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`text`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` end up as props on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` component.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` TodoList = ({\n  todos\n}) => (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`ul`}</MDXTag>{`>`}</MDXTag>{`\n    {todos.map(todo =>\n      `}</MDXTag>{`<Todo\n        key={todo.id}\n        {...todo}\n       />\n    )}\n   </ul>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n);`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I need to specify what happens when a todo is clicked. I could have dispatched an action here. Again, that would be fine, but I want it to be a presentational component, so I'm going to call another function, called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onTodoClick()`}</MDXTag>{`, and pass `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo.id`}</MDXTag>{`, and let it decide what should happen. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onTodoClick`}</MDXTag>{` is another prop for the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` TodoList = ({\n  todos,\n  onTodoClick\n}) => (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`ul`}</MDXTag>{`>`}</MDXTag>{`\n    {todos.map(todo =>\n      `}</MDXTag>{`<Todo\n        key={todo.id}\n        {...todo}\n        onClick{() => onTodoClick(todo.id)}\n       />\n    )}\n   </ul>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n);`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Both `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Todo`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{` are presentational components, so we need something I call, container components to actually pass the data from this store and to specify the behavior. In this case, the top level `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component acts as a container component. We will see more examples of container components in the future lessons.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In this case, it just renders the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{` with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibleTodos`}</MDXTag>{` as the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{`, and with a callback that says that when `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onTodoClick`}</MDXTag>{` is called with a todo `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{`, we should dispatch an action on the store with the type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` of the todo.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<TodoList\n  todos={visibleTodos}\n  onTodoClick={id =>\n    store.dispatch ({\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`,\n      id\n    })\n  } />`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's recap again how this works. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component renders a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{`, and it passes a function to it that can dispatch an action. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{` component renders the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Todo`}</MDXTag>{` component and passes on click prop which calls `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onTodoClick`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` TodoList = ({\n  todos,\n  onTodoClick\n}) => (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`ul`}</MDXTag>{`>`}</MDXTag>{`\n    {todos.map(todo =>\n      `}</MDXTag>{`<Todo\n        key={todo.id}\n        {...todo}\n        onClick{() => onTodoClick(todo.id)}\n       />\n    )}\n   </ul>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n);`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Todo`}</MDXTag>{` component just uses the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick`}</MDXTag>{` prop it receives and binds it to the list item `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick`}</MDXTag>{`. This way, when it's called, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onTodoClick`}</MDXTag>{` is called, and this dispatches the action and updates the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibleTodos`}</MDXTag>{` because the action updates the store.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Todo = ({\n  onClick,\n  completed,\n  text\n}) => (\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`li`}</MDXTag>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onClick`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{onClick}`}</MDXTag>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`style`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{{`}</MDXTag>{`\n    `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`textDecoration:`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{` ?\n        '`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`line-through`}</MDXTag>{`' `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`:`}</MDXTag>{`\n        '`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`none`}</MDXTag>{`'\n  }}\n>`}</MDXTag>{`\n  {todo.text}\n`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`li`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n);`}</MDXTag></MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-extracting-presentational-components-todo-todolist.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the previous lesson, we used the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` function from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ReactRedux`}</MDXTag>{` bindings library to generate the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`container component`}</MDXTag>{` that renders our `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`presentational component`}</MDXTag>{`. I specify how to calculate the props to inject from the current Redux store state and the callback props to inject from the dispatch function on the Redux store.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Normally, I would keep these functions, called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToProps`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapDispatchToProps`}</MDXTag>{`, but I'm working in a single file right now. I need to write these functions for if your other container components, so I'm going to rename them to something more specific, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToTodoListProps`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapDispatchToTodoListProps`}</MDXTag>{`, which you don't have to do in your code if you keep every component in its own file.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I will also remove the line breaks here to make it clear that these functions are only relevant for generating this particular container component.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now I'm scrolling up to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` component, which is not clearly presentational or a container component. However, it uses this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{`. It reads this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` from the context to dispatch an action when the button is clicked. It has to declare the context types to be able to grab this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` from the context.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` mapStateToTodoListProps = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{` ... `}</MDXTag>{`) =>`}</MDXTag>{` { ... }\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` mapDispatchToTodoListProps = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{` ... `}</MDXTag>{`) =>`}</MDXTag>{` { ... }`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Context is an `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`unstable API`}</MDXTag>{`, so it's best to avoid using it in your application code. Instead of reading this store from the context, I will read the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` function from the props because I only need the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` here. I don't need the whole `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I will create a container component with connect that will inject that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` function as a prop. I will remove the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`contextTypes`}</MDXTag>{` because the component generated by `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` function will take care of reading this store from the context.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Because I changed the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` declaration from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`const`}</MDXTag>{` to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`let`}</MDXTag>{` binding, I can reassign it now so that the consuming component does not need to specify the dispatch prop because it will be injected by the component generated by the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` call.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`AddTodo = connect(\n\n)`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The first argument to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` function is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToProps`}</MDXTag>{`, but there aren't any props for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{`component that depend on the current state, so I return an empty object. The second argument to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapDispatchToProps`}</MDXTag>{`, but `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` component doesn't need any callback props. It just accepts the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` function itself, so I'm returning it as a prop with the same name.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`AddTodo = connect(\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state`}</MDXTag>{` =>`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {};\n  },\n  dispatch => {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` { dispatch };\n  }\n)(AddTodo);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, I'm calling the function for a second time to specify the component I want to wrap, in this case, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` itself. The generated container component will not pass any props dependent on the state, but it will pass `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` itself as a function so that the component can read from the props and use it without worrying about context or specifying `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`contextTypes`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`However, it is wasteful to even subscribe to this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` if we don't calculate any props from its `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{`. So I'm replacing the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToProps`}</MDXTag>{` function with a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`null`}</MDXTag>{`, which tells `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` that there is no need to subscribe to this store.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`AddTodo = connect(\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`null`}</MDXTag>{`,\n  dispatch => {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` { dispatch };\n  }\n)(AddTodo);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Additionally, it's pretty common pattern to inject just the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` function. This is why if you specify `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`null`}</MDXTag>{` or any false value in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` as the second argument, you're going to get dispatch injected as a prop. In fact, I can just remove all arguments here. The default behavior will be to not subscribe to this store and to inject just the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` function as a prop.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`AddTodo = connect()(AddTodo);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's recap what happens to the components here. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` component that I declare accepts `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` as a prop, but it doesn't know how to get this store. It just hopes that someone is going to pass the dispatch to it.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`let`}</MDXTag>{` AddTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`{ dispatch }`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`let`}</MDXTag>{` input;\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` ( ... );\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` code without any arguments is going to generate a container component that does not subscribe to this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{`. However, that will pass `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` to the component that it wraps. In this case, it wraps my `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` component.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`AddTodo = connect()(AddTodo);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The second connect call returns the generated container component. I'm assigning it to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{`. I'm reassigning the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`let`}</MDXTag>{` binding the second time.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`When the further code references `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{`, it's going to reference the container component that does not need the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` prop and that will pass the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` prop to my inner `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` component that I don't have a reference to anymore.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` TodoApp = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n    `}</MDXTag>{`<AddTodo />`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n    `}</MDXTag>{`<VisibleTodoList />`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n    `}</MDXTag>{`<Footer />`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n)`}</MDXTag></MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-generating-containers-with-connect-from-react-redux-addtodo.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`Finally, let's take a look at the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`container component`}</MDXTag>{` that renders a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` with an active property and a click handler. First, I will write the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToProps`}</MDXTag>{` function, which I'll call, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToLinkProps`}</MDXTag>{`, because I have everything in a single file.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` mapStateToLinkProps = (\n  state\n) => {\n\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`It's going to accept the state of the Redux store and return the props that should be passed to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{`. We only have a single such prop called, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`active`}</MDXTag>{` that determines whether the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` displays the current `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Visibility Filter`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` mapStateToLinkProps = (\n  state\n) => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`active`}</MDXTag>{`:\n      props.filter ===\n      state.visibilityFilter\n  }\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`When I paste this expression from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` method, I see that it references the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` prop of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` component. To tell whether a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`active`}</MDXTag>{`, we need to compare this prop with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` value from the Redux store `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`It is fairly common to use the container props when calculating the child props, so this is why props are passed as a second argument to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToProps`}</MDXTag>{` I will rename it to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ownProps`}</MDXTag>{` to make it clear we are talking about the container component's `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ownProps`}</MDXTag>{` and not the props that are passed through the child, which is the return value of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToProps`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` mapStateToLinkProps = (\n  state,\n  ownProps\n) => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`active`}</MDXTag>{`:\n      ownProps.filter ===\n      state.visibilityFilter\n  }\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The second function I'm writing here is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapDispatchToProps`}</MDXTag>{` or, to avoid name clashes in this JS bin, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapDispatchToLinkProps`}</MDXTag>{` The only argument so far is the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` function. I'm going to need to look at the container component I wrote by hand to see what props depend on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` function.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` mapDispatchToLinkProps= (\n  dispatch\n) => {\n  retrun {\n\n  };\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In this case, this is just the click handler where I dispatch the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SET_VISIBLITY_FILTER`}</MDXTag>{` direction. The only prop I'm passing down is called, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick`}</MDXTag>{` I declare it as an arrow function with no arguments, and I paste the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` code. But it references the props again, so I need to add `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ownProps`}</MDXTag>{` as an argument, the second argument, to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToLinkProps`}</MDXTag>{` function too.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` mapDispatchToLinkProps = (\n  dispatch,\n  ownProps\n) => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`onClick`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n    dispatch({\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SET_VISIBILITY_FILTER'`}</MDXTag>{`,\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`filter`}</MDXTag>{`: ownProps.filter\n    })\n  };\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, I will call the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` function from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ReactRedux`}</MDXTag>{` library to generate the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` container component. I pass the relevant `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToLinkProps`}</MDXTag>{` function as the first argument, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapDispatchToLinkProps`}</MDXTag>{` as the second argument, and I call the function again with a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` component which should be rendered. Now I can remove the old `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` implementation.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` FilterLink = connect(\n  mapStateToLinkProps,\n  mapDispatchToLinkProps\n)(Link);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's recap the data flow in this example. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{` component renders three `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{`, and each of them has a different `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` prop that specifies which `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` it corresponds to. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Footer = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  <p>\n    Show:\n    {`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`' '`}</MDXTag>{`}\n    <FilterLink filter=`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SHOW_ALL'`}</MDXTag>{`>\n      All\n    <`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-regexp\"]}}>{`/FilterLink>\n\n    ...\n\n  </`}</MDXTag>{`p>\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This prop will be available on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ownProps`}</MDXTag>{` object that both `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapDispatchToLinkProps`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToLinkProps`}</MDXTag>{` will receive as the second argument.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` mapStateToLinkProps = (\n  state,\n  ownProps\n) => {...};\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` mapDispatchToLinkProps = (\n  dispatch,\n  ownProps\n) => {...}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`We pass these two functions through the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` call, which will return a container component called, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{`. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` FilterLink = connect(\n  mapStateToLinkProps,\n  mapDispatchToLinkProps\n)(Link);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` will take the props that will return from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapDispatchToProps`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToProps`}</MDXTag>{` and pass them as props to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` component that it wraps.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`We can now use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` container component and specify just the filter, but the underlying `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Link`}</MDXTag>{` component will have received the calculated `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`active`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick`}</MDXTag>{` values.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-generating-containers-with-connect-from-react-redux-footerlink.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the previous lesson, I added `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ReactRedux`}</MDXTag>{` bindings to the project and I used a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` component from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ReactRedux`}</MDXTag>{` to pass this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` down the context so that the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`container components`}</MDXTag>{` can read the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` from the context and subscribe to these changes. All container components are very similar.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`They need to re-render when the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` state changes, they need to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`unsubscribe`}</MDXTag>{` from the store when they amount and they take the current state of the Redux store and use it to render the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`presentational components`}</MDXTag>{` with some props that they calculate from the state of this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{`, and they also need to specify the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`contextTypes`}</MDXTag>{` to get this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` from the context.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm going to write this component in a different way now. I'll declare a function called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToProps`}</MDXTag>{` which takes the redux `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` state and returns the props that I need to parse through the presentation to do this component, to render it with the current state.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In this case, there is a single prop called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{`. I copy-paste this expression to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToProps`}</MDXTag>{` function. It returns the props that depend on the current state of the redux store. In this case, this is just the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` prop.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` mapStateToProps = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`todos`}</MDXTag>{`: getVisibleTodos(\n      state.todos,\n      state.visibilityFilter\n    )\n  };\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm creating another function that I call `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapDispatchToProps`}</MDXTag>{`. It accepts the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` method from this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` as the only argument and returns the props that should be passed through `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`the TodoList`}</MDXTag>{` component and that depend on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` method.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The only prop that uses `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store.dispatch`}</MDXTag>{` is called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onTodoClick`}</MDXTag>{`. Some copy-paste onto the click, into `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapDispatchToProps`}</MDXTag>{`. Now that I don't have the reference to this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` here anymore. Instead, I'm changing it to use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{`, which is provided as an argument to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapDispatchToProps`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` mapDispatchToProps = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`dispatch`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`onTodoClick`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`id`}</MDXTag>{`) =>`}</MDXTag>{` {\n        dispatch({\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`,\n        id\n      })\n    }\n  };\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I will add some punctuation to make it appear easier on my eyes. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onTodoClick`}</MDXTag>{` ease of function that accepts the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{`, and dispatches an action. Now, I've got two different functions.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The first one maps the redux store state to the props of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{` component that are related to the data from the redux store. The second function maps the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` method of this store to the callback props of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoList`}</MDXTag>{` component. It specifies the behavior which callback prop dispatches which action.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`To gather this, your function has described a container component so well that instead of writing it, I can generate it by using the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` function provided by `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ReactRedux`}</MDXTag>{` library. If you use Babel and NPM, you will likely input it like this instead. Don't forget the curly braces.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` { connect } = ReactRedux;\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`// import { connect } from 'react-redux'`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now, instead of declaring a class, I'm going to declare a variable. I will call the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` method to obtain it. I'm passing `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToProp`}</MDXTag>{` as the first argument and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapDispatchToProps`}</MDXTag>{` as the second argument. Notice that this is a `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://egghead.io/lessons/javascript-what-is-currying\"}}>{`curried function`}</MDXTag>{`, so I have to call it once again. This time, I parse the presentational component that I wanted to wrap and pass the props too.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` function will generate the component, just like the one I previously wrote by hand. I don't need to write the code to subscribe to this store or to specify the context types, because the connect function takes care of that.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now, let's recap how to generate the container component using the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` function. First, I'll write a function called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToProps`}</MDXTag>{` that takes the state of the redux `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` and returns the props for the presentational component calculated from it.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`These props will be updated anytime the state changes.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` mapStateToProps = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`todos`}</MDXTag>{`: getVisibleTodos(\n      state.todos,\n      state.visibilityFilter\n    )\n  };\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Next, I write a function that I call `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapDispatchToProps`}</MDXTag>{`. It takes these store's `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` method as its first argument. It returns the props that used the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` method to dispatch actions, so it returns the callback props needed for the presentational component.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` mapDispatchToProps = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`dispatch`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`onTodoClick`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`id`}</MDXTag>{`) =>`}</MDXTag>{` {\n      dispatch({\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`,\n        id\n      });\n    }\n  };\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`To create the container component from them, I import `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ReactRedux`}</MDXTag>{` library and I call it passing `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToProps`}</MDXTag>{` as the first argument and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapDispatchToProps`}</MDXTag>{` as a second argument.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, I close the function called Paren and I open another paren, because this is a curried function and it needs to be called twice. The last argument is the presentational component that I want to connect to the redux store.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The result of the connect call is the container component that is going to render my presentational component. It will calculate the props to pass through the presentational component by merging the objects returned from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapStateToProps`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mapDispatchToProps`}</MDXTag>{`, and its own props.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-generating-containers-with-connect-from-react-redux-visibletodolist.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the previous lesson, we learned to use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`combineReducer`}</MDXTag>{` function, which comes with Redux and `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`generates one reducer from several other reducers`}</MDXTag>{`, delegating to them paths of the state tree.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` { combineReducer } = Redux;\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todoApp = combineReducer({\n  todos,\n  visibilityFilter\n});`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`To gain a deeper understanding of how exactly `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`combinedReducers`}</MDXTag>{` works, we will implement it from scratch in this lesson.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CombineReducers`}</MDXTag>{` is a function, so I'm writing a function declaration. Its only argument is the mapping between the state keys and the reducers, so I'm just going to call it `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reducers`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` combineReducer = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`reducers`}</MDXTag>{`) =>`}</MDXTag>{` {\n\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The return value is supposed to be a reducer itself, so this is a function that returns another function. The signature of the return function is a reducer signature. It has the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` combineReducer = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`reducers`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state = {}, action`}</MDXTag>{`) =>`}</MDXTag>{` {\n\n  };\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now, I'm calling the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Object.keys`}</MDXTag>{` method, which gives me all the keys of the reducer's object. In our example, this is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Next, I'm calling the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reduce`}</MDXTag>{` method on the keys, because I want to produce a single value, such as the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`nextState`}</MDXTag>{`, by accumulating over every reducer key and calling the corresponding reducer. Each reducer passed through the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`combineReducers`}</MDXTag>{` function is only responsible for updating a part of the state. This is why I'm saying that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`nextState`}</MDXTag>{` by the given key can be calculated by calling the corresponding reducer by the given key with the current state by the given key and the action.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` combineReducer = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`reducers`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state = {}, action`}</MDXTag>{`) =>`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-built_in\"]}}>{`Object`}</MDXTag>{`.keys(reducers).reduce(\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`nextState, key`}</MDXTag>{`) =>`}</MDXTag>{` {\n        nextState[key] = reducers[key](\n          state[key],\n          action\n        );\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` nextState;\n      },\n      {}\n    );\n  };\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The array reduce wants me to return the next accumulated value from the call back, so I'm returning the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`nextState`}</MDXTag>{`. I'm also specifying an empty object as the initial next state, before all the keys are processed.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`There we have it. This is a working reimplementation of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`combinedReducers`}</MDXTag>{` utility from Redux.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's briefly recap how it works. I'm calling `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`combinedReducers`}</MDXTag>{` with an object whose values are the reducer functions and keys are the state field they manage. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todoApp = combineReducer({\n  todos,\n  visibilityFilter\n});`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Inside the generated reducer, I'm retrieving all the keys of the reducers I passed to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`combineReducers`}</MDXTag>{`, which is an array of strings, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` combineReducer = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`reducers`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state = {}, action`}</MDXTag>{`) =>`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-built_in\"]}}>{`Object`}</MDXTag>{`.keys(reducers).reduce(\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`nextState, key`}</MDXTag>{`) =>`}</MDXTag>{` {\n        nextState[key] = reducers[key](\n          state[key],\n          action\n        );\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` nextState;\n      },\n      {}\n    );\n  };\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm starting with an empty object for my next state and I'm using the reduce operation of these keys to fill it gradually.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Notice that I'm mutating the next state object on every iteration. This is not a problem, because it is the object I created inside the reducer. It is not something passed from outside, so reducer stays a pure function.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`To calculate the next state for a given key, it calls the corresponding reducer function, such as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`(nextState, key) => {\n  nextState[key] = reducers[key](\n    state[key],\n    action\n  );\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` nextState;\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The generated reducer will pass through the child reducer only if part of its state by the key. If its state is a single object, it's only going to pass the relevant part, such as todos or visibility filter, depending on the current key, and save the result in the next state by the same key.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, we use the array reduce operation with the empty object as the initial next state, that is being filled on every iteration until it is the return value of the whole reduce operation.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In this lesson, you learned how to implement the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`combinedReducers`}</MDXTag>{` utility that comes with Redux from scratch.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`It is not essential to use in Redux, so it is fine if you don't fully understand how it works yet. However, it is a good idea to practice functional programming and understand functions can take other functions as arguments and return other functions, because knowing this will help you get more productive in Redux in the long term.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-implementing-combinereducers-from-scratch.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the previous video we looked at how to implement a simple counter example using the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`createStore`}</MDXTag>{` function provided by Redux and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` object it returns that provides the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getState`}</MDXTag>{` method to get the current application state, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` method, to change the current application state by dispatching an action, and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribe`}</MDXTag>{` method to subscribe to the changes and re-render our application with the current state of the app.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`If you're like me you prefer to understand the tools that you're using. In this tutorial we're going to re-implement the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`createStore`}</MDXTag>{` function provided by Redux from scratch. The first and the only form of what we know so far argument to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`createStore`}</MDXTag>{` function is the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reducer`}</MDXTag>{` function provided by the application.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`We know that the store holds the current `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{`. We keep it in a variable, and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getState`}</MDXTag>{` function is going to return the current value of that variable. This function, combined with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` function and a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribe`}</MDXTag>{` function on a single object is what we call the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`Redux store`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` createStore = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`reducer`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`let`}</MDXTag>{` state;\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`let`}</MDXTag>{` listeners = [];\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` getState = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` state;\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` dispatch = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`action`}</MDXTag>{`) =>`}</MDXTag>{` {\n\n  };\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` subscribe = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`listener`}</MDXTag>{`) =>`}</MDXTag>{` {\n\n  };\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` { getState, dispatch, subscribe };\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Because the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribe`}</MDXTag>{` function can be called many times, we need to keep track of all the changed listeners. Any time it is called we want to push the new `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`listener`}</MDXTag>{` into the array. Dispatching an action is the only way to change the internal state.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` subscribe = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`listener`}</MDXTag>{`) =>`}</MDXTag>{` {\n  listeners.push(listener);\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In order to calculate the new state we call the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reducer`}</MDXTag>{` with the current `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{` being dispatched. After the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` was updated, we need to notify every changed listener, by calling it.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` dispatch = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`action`}</MDXTag>{`) =>`}</MDXTag>{` {\n  state = reducer(state, action);\n  listeners.forEach(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`listener`}</MDXTag>{` =>`}</MDXTag>{` listener());\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`There is an important missing piece here. We haven't provided a way to unsubscribe a listener. Instead of adding a dedicated `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`unsubscribe`}</MDXTag>{` method, we'll just return a function from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribe`}</MDXTag>{` method that removes this listener from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`listeners`}</MDXTag>{` array.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` subscribe = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`listener`}</MDXTag>{`) =>`}</MDXTag>{` {\n  listeners.push(listener);\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n    listeners = listeners.filter(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`l`}</MDXTag>{` =>`}</MDXTag>{` l !== listener);\n  };\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, by the time the store is returned we wanted to have the initial state populated. We're going to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{` a dummy action just to get the reducer to return the initial value.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`dispatch({}); `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`// 5`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This implementation of the Redux store apart from a few minor details and edge cases, is the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`createStore`}</MDXTag>{`  shipped with Redux.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-implementing-store-from-scratch.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the previous lessons, we used this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` top-level variable to refer to the Redux store. The components that access this store, such as the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`container components`}</MDXTag>{`, read this state from it, subscribe to this store, and dispatch actions on this store using this store top-level variable.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This approach works fine for JS bin example where everything is in a single file. However, it doesn't scale to real applications for several reasons.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`First of all, it makes your container components harder to test because they reference a specific store, but you might want to supply a different mock store in the test. Secondly, it makes it very hard to implement universal replications that are rendered on the server, because on the server, you want to supply a different store instance for every request because different requests have different data.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm going to start by moving this store creation code to the bottom of the file where I render my React components. I'm going to change it slightly. Instead of creating this store top-level variable, I will pass this store I create as a prop to the top-level component, so it is completely injectable into it.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`ReactDOM.render(\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`TodoApp`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`store`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{createStore(todoApp)}`}</MDXTag>{` />`}</MDXTag>{`,\n  document.getElementById('root')\n);`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Every container component needs a reference to this store so unfortunately, we have to pass it down to every component as a prop. It's less effort than passing different data through every component, but it's still inconvenient. So, don't worry, we'll find a better solution later, but for now, we need to see the problem.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` TodoApp = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`{ store }`}</MDXTag>{`) =>`}</MDXTag>{` (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n    `}</MDXTag>{`<AddTodo store={store} />\n    <VisibleTodoList store={store} />\n    <Footer store={store} />\n  </div>\n);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The problem is that the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`container components need to have this store instance to get this state from a dispatch actions and subscribe to the changes`}</MDXTag>{`. This time, I'm changing the container component to take this store from the props using the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://egghead.io/lessons/ecmascript-6-destructuring-assignment\"}}>{`ES6 destruction`}</MDXTag>{` syntax, which just means \"store equals props does store.\"`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm doing the same here. I'm just taking this store from the props so I can call dispatch on it.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`VisibleTodoList`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n  componentDidMount() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` { store } = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.unsubscribe = store.subscribe(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.forceUpdate()\n    );\n  }\n  componentWillUnmount() { ... }\n  render() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` props = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` { store } = props;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` state = store.getState();\n\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`TodoList`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`...`}</MDXTag>{` />`}</MDXTag>{`\n    );\n  }\n}`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I need to make similar changes to other container components. In this case, I have this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` component, which is not exactly a container component, but it still needs its store to dispatch the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` action, so I added it as a prop. I'm also going to add this store to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{` component because, unfortunately, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` needs it.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Footer = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`{ store }`}</MDXTag>{`) =>`}</MDXTag>{` (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag>{`\n    Show:\n    {' '}\n    `}</MDXTag>{`<FilterLink\n      filter='SHOW_ALL'\n      store={store}\n    >\n      All\n    </FilterLink>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n    \n    ... \n\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{` component renders `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{`. This is not convenient, but as I said, we'll figure out a way to avoid this later. For now, we need to pass this store down so that every container component, such as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{`, can use it to subscribe to the changes, to read this state and to dispatch actions without relying on a top-level variable being available.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`FilterLink`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n  componentDidMount() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` { store } = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.unsubscribe = store.subscribe(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.forceUpdate()\n    );\n  }\n\n  componentWillUnmount() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.unsubscribe();\n  }\n\n  render() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` props = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` { store } = props;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` state = store.getState();\n\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` ( ... );\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm changing the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` method to read this store from the props. Now, all containers read this store instance from the props, and don't rely on a top-level variable that I removed.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`render() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` props = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` { store } = props;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` state = store.getState();\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Note that this change did not change the behavior or the data flow of this application. The container components subscribe to this store, just like before, and update their state in response to its changes.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`However, what changed is how they access this store. Previously, they would access a top-level variable, but this approach does not scale to real-world applications. This is why, right now, I'm passing down this store as a prop, so the container components can subscribe to it.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In the future lessons, we will see how to pass this store down to the container components implicitly without introducing the top-level variable.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-passing-the-store-down-explicitly-via-props.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the previous lesson, we got rid of the top level store variable and instead starting passing this store as a prop to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component. So every component below receives this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` as a prop. We even have to do this for `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`presentational components`}</MDXTag>{` because sometimes they contain `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`container components`}</MDXTag>{` that need this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` to subscribe to the changes.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`We have to write a lot of boiler plate code to pass this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` down as a prop. But there is another way, using the advanced React feature called `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`context`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm creating a new component called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{`. From its `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` method, it just returns whatever its child is. We can wrap any component in a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{`, and it's going to render that component.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Provider`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n  render() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props.children;\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm changing the render call to render a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` inside the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{`. I'm moving this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` prop from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` component. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` component will use the React advanced context feature to make this store available to any component inside it, including grandchildren.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`ReactDOM.render(\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`Provider`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`store`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{createStore(todoApp)}`}</MDXTag>{`>`}</MDXTag>{`\n    `}</MDXTag>{`<TodoApp />`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`Provider`}</MDXTag>{`>`}</MDXTag></MDXTag>{`,\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-built_in\"]}}>{`document`}</MDXTag>{`.getElementById(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'root'`}</MDXTag>{`)\n);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`To do this, it has to define a special method `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getChildContext`}</MDXTag>{` that will be called by React by using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`this.props.store`}</MDXTag>{` which corresponds to this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` that is passed to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` as a prop just once.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Provider`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n  getChildContext() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`store`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props.store\n    };\n  }\n\n  render() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props.children;\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` will be part of the context that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` specifies for any of its children and grandchildren. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` is going to receive this context, and any component inside `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` is also going to receive this context object with this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` inside it.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`However, there is an important condition for the context to work. This condition is that you have to specify `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`childContextTypes`}</MDXTag>{` on the component that defines `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getChildContext`}</MDXTag>{`. These are just `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`React.PropTypes`}</MDXTag>{` definition, but unlike prop types, the child context types are essential for the context to be turned on. If you don't specify them, no child components will receive this context.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Provider`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n  getChildContext() { ... }\n\n  Provider.childContextTypes = {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`store`}</MDXTag>{`: React.PropTypes.object\n  };\n\n  render() { ... }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The container components currently access tool by props, but we're going to change this to read this store from React context. To do that, we just wrap it to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`this.context`}</MDXTag>{`. Similarly, in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` method, I'm also going to read this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` from the context instead of the props.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, the context is opt-in for the receiving components too, so you have to specify a special field called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`contextTypes`}</MDXTag>{`, which are similar to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`childContextType`}</MDXTag>{`. But, in this case, we are specifying which context we want to receive and not pass down. If you forget to declare the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`contextTypes`}</MDXTag>{`, the component will not receive the relevant context, so it is essential to remember to declare them.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`VisibleTodoList.contextTypes = {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`store`}</MDXTag>{`: React.PropTypes.object\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`What about the functional components that don't have this? It turns out that they also receive the context but as a second argument after the props. I'm `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://egghead.io/lessons/ecmascript-6-destructuring-assignment\"}}>{`destructuring`}</MDXTag>{` the second argument and getting this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` from there. The second argument is the context.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` AddTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`props, { store }`}</MDXTag>{`) =>`}</MDXTag>{` { ... }`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Just like with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`class`}</MDXTag>{` components, I still have to add a property called, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`contextTypes`}</MDXTag>{` that specifies which context I want to receive. In this case, I want to receive the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{`. If I forget to declare the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`contextTypes`}</MDXTag>{`, my functional component will not receive the relevant context as a second argument. It's important to remember to declare them any time you use the context.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`AddTodo.contextTypes = {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`store`}</MDXTag>{`: React.PropTypes.object\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, I'm replacing the props with the context when getting this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` for the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{`. I'm adding the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`contextType`}</MDXTag>{` declaration to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` so it receives the relevant context from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`FilterLink.contextTypes = {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`store`}</MDXTag>{`: React.PropTypes.object\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` receives this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` by context, I no longer need to pass it as a prop, so I'm removing its usage. I'm also removing the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` prop from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{` because it doesn't need to pass it down anymore. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Footer = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag>{`\n    Show:\n    {' '}\n    `}</MDXTag>{`<FilterLink\n    filter='SHOW_ALL'\n    >\n    All\n    </FilterLink>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n\n    ...\n\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n)`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm also removing this store prop from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component because I no longer need to pass it down to the containers.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` TodoApp = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n    `}</MDXTag>{`<AddTodo />`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n    `}</MDXTag>{`<VisibleTodoList />`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n    `}</MDXTag>{`<Footer />`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n)`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now, instead of explicitly passing this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` down by props, we pass it implicitly by context.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's recap how we use the context to pass this store down. We start by rendering the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` inside the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` component we defined above. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` component just renders whatever you pass through it. In this case, it renders its children or the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component. However, it also provides the context to any components inside it including grandchildren.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The context contains just one key called the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{`. It corresponds to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` we passed as a prop to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` component.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Provider`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n  getChildContext() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`store`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props.store\n    }; \n  }\n\n  render() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props.children;\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`We pass this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` component in our `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` call and make it available to child components by defining the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getChildContext`}</MDXTag>{` with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` key pointing to that prop.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`ReactDOM.render(\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`Provider`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`store`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{createStore(todoApp)}`}</MDXTag>{`>`}</MDXTag>{`\n  `}</MDXTag>{`<TodoApp />`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`Provider`}</MDXTag>{`>`}</MDXTag></MDXTag>{`,\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-built_in\"]}}>{`document`}</MDXTag>{`.getElementById(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'root'`}</MDXTag>{`)\n);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`It is essential that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getChildContext`}</MDXTag>{` is matched by `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`childContextTypes`}</MDXTag>{` where we specify that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` key has `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`propType`}</MDXTag>{` of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`object`}</MDXTag>{`. Note that the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`childContextTypes`}</MDXTag>{` definition is absolutely required if you want to pass the context down the tree.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`Provider.childContextTypes = {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`store`}</MDXTag>{`: React.PropTypes.object\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The benefit is that we don't need to pass this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` through the intermediate components. Instead, we can declare the context types on the container components that need access to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` so that they can retrieve it from the context instead of retrieving it from the props.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The context creates something like a wormhole between the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`VisibleTodoList`}</MDXTag>{` component that reads the context and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` that provides the context. This wormhole is only enabled because the context types declared on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`VisibleTodoList`}</MDXTag>{` include this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` that is defined in child context types of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` component.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`VisibleTodoList.contextTypes = {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`store`}</MDXTag>{`: React.PropTypes.object\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AddTodo`}</MDXTag>{` is another component that needs access to this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{`. It also opts into receiving it in the context by specifying the context types. This is why, in addition to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`props`}</MDXTag>{`, it receives a second argument, which is the context. I'm using the destruction syntax to grab this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` from the context here.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`AddTodo.contextTypes = {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`store`}</MDXTag>{`: React.PropTypes.object\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The context works at any depth, so it is not necessary to put context types on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Footer`}</MDXTag>{`. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` is the component that directly uses the context, so this is the component that has to specify the context types so that it can use this store by reading it from the context.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Context is a powerful feature, but in a way it contradicts the React philosophy of the explicit data flow. The context essentially allows global variables across the component tree. But global variables are usually a bad idea. Unless you're using it for dependency injection, like here when we need to make a single object available to all components, then probably you shouldn't use context.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, the context API is `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`not stable`}</MDXTag>{` in React. It has changed before, and it is likely to change again. Try your best not to rely on it too much.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-passing-the-store-down-implicitly-via-context.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the previous session, we implemented the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` component that uses the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`react advanced context feature`}</MDXTag>{` to make this tool from the props available to every component in our app.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`If we pass it through the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{`, we can read it in any other component from the context, which is really convenient for the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`container components`}</MDXTag>{`. In fact, this is so convenient that you don't need to actually write the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` yourself, because it is included in a special library called `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`React-Redux`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Note that it is `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`not the same as Redux`}</MDXTag>{`. This is a different library. These are react bindings to the Redux library. You can import the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` by `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://egghead.io/lessons/ecmascript-6-destructuring-assignment\"}}>{`destructuring`}</MDXTag>{` the react-redux global object in JS bin, or if you use Babel, and something like NPM, you can import `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` with the braces, because it's a named expert from React-Redux package. Or if you write ES5 code, you can write `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`var Provider = require('react-redux').Provider;`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` { Provider } = ReactRedux;\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`// import { Provider } from 'react-redux';`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`// var Provider = require('react-redux').Provider;`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Just like the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` we wrote before, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Provider`}</MDXTag>{` that comes with react-redux exposes this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` you passed through. There's a prop on the context so the components can specify the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`contextTypes`}</MDXTag>{`, and then use this context `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` to subscribe to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` updates and dispatch actions.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-passing-the-store-down-with-provider-from-react-redux.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`Before we proceed any further, it's important that you understand the difference between the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`pure`}</MDXTag>{` and `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`impure`}</MDXTag>{` functions. The pure functions are the functions whose returned value depends solely on the values of their arguments.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`// Pure function`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`function`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`square`}</MDXTag>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`x`}</MDXTag>{`)`}</MDXTag>{`{\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` x * x;\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Pure functions do not have any `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`observable side effects`}</MDXTag>{`, such as network or database calls. The pure functions just calculate the new value. You can be confident that if you call the pure function with the same set of arguments, you're going to get the same returned value. They are predictable.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Also, pure functions do not modify the values passed to them. For example, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`squareAll`}</MDXTag>{` function that accepts an array does not overwrite the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`items`}</MDXTag>{` inside this array. Instead, it returns a new array by using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`items.map`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`// Pure function`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`function`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`squareAll`}</MDXTag>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`items`}</MDXTag>{`)`}</MDXTag>{`{\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` items.map(square);\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`On the opposite, impure functions may call the database or the network, they may have side effects, they may operate on the DOM, and they may override the values that you pass to them.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`// Impure functions`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`function`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`square`}</MDXTag>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`x`}</MDXTag>{`)`}</MDXTag>{`{\n  updateXInDatabase(x);\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` x * x;\n}\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`function`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`squareAll`}</MDXTag>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`items`}</MDXTag>{`)`}</MDXTag>{`{\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`for`}</MDXTag>{` (`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`let`}</MDXTag>{` i = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`; i < items.length; i++) {\n    items[i] = square(items[i]);\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This is going to be an important distinction because some of the functions that you're going to write in Redux have to be pure, and you need to be mindful of that.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-pure-and-impure-functions.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the simplest counter example, I update the document body manually any time this tool state changes. But, of course, this approach does not scale to complex applications. Instead of manually updating the DOM, I'm going to use React.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm adding two scripts corresponding to React and react-dom packages and a root `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<div/>`}</MDXTag>{` to render to. Now I can call the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ReactDOM.render`}</MDXTag>{` with my `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`root`}</MDXTag>{` component. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` function is called any time this store state changes, so I can safely pass the current state of this store as a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`prop`}</MDXTag>{` to my `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`root`}</MDXTag>{` component.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` render = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  ReactDOM.render(\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`Counter`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`value`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{store.getState()}`}</MDXTag>{` />`}</MDXTag>{`\n    document.getElementById('root')\n  );\n}`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Since this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` is held inside the Redux Store, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Counter`}</MDXTag>{` component can be a simple function, which is a supported way of declaring components since React 14.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Counter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`{value}`}</MDXTag>{`) =>`}</MDXTag>{` (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`h1`}</MDXTag>{`>`}</MDXTag>{`{value}`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`h1`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I want to add, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`DECREMENT`}</MDXTag>{`, and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`INCREMENT`}</MDXTag>{` buttons to the component, but I don't want to hard-code the Redux dependency into the component. So I just add `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onIncrement`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onDecrement`}</MDXTag>{` props as callbacks. In my `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` method, I pass the callbacks that call `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store.dispatch`}</MDXTag>{` with appropriate actions. Now the application state is updated when I click the buttons.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` Counter = ({\n  value,\n  onIncrement,\n  onDecrement\n}) => (\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n  `}</MDXTag>{`<h1>{value}</h1>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  `}</MDXTag>{`<button onClick={onIncrement}>+</button>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  `}</MDXTag>{`<button onClick={onDecrement}>-</button>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n);\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`Counter`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`value`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{store.getState()}`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onIncrement`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{()`}</MDXTag>{` =>`}</MDXTag>{`\n        store.dispatch({\n          type: 'INCREMENT'           \n        })            \n      }\n      onDecrement={() =>\n        store.dispatch({\n          type: 'DECREMENT'           \n        })            \n      }\n    />`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's recap how this application works. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`counter component`}</MDXTag>{` is what I call a `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`dumb component`}</MDXTag>{`. It does not contain any `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`business logic`}</MDXTag>{`. It only specifies how the current application state transforms into renderable output and how the callbacks, passed via props, are bound to the event handlers.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/CounterExample.png\",\"alt\":\"Counter Example\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`When we render a counter, we specify that its value should be taken from the Redux Store current state. When the user presses `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`INCREMENT`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`DECREMENT`}</MDXTag>{`, we dispatch corresponding action to the Redux Store. Our reducer specifies how the next state is calculated based on the current state and the action being dispatched.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, we `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribe`}</MDXTag>{` to the Redux Store, so our `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` function runs anytime the state changes, so the counter gets the current state.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-react-counter-example.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the previous lessons, we learned how to split the root reducer into many smaller reducers that manage parts of the state tree.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`We have a ready `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todoApp`}</MDXTag>{` reducer that handles all the actions of our simple todo application. Now it's trying to implement the View layer. I'm going to use React in this example.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm adding `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react-dom`}</MDXTag>{` packages from the Facebook CDN. I'm also adding a div with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id='root'`}</MDXTag>{`, which is where I'm going to render my react application.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-html\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`body`}</MDXTag>{`>`}</MDXTag>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`'root'`}</MDXTag>{`>`}</MDXTag><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`body`}</MDXTag>{`>`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Similar to the react counter-example from the eighth lesson, I declare a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` function that is going to update dom in response to the current application state. I'm going to subscribe to these core changes and call `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` whenever the store changes and wants to render the initial state.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` render = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n\n};\n\nstore.subscribe(render);\nrender();`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The implementation of the render method is going to use react, so it's called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ReactDOM.render`}</MDXTag>{` for some `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todoApp`}</MDXTag>{` component I haven't written yet. It renders it into the div I created inside the HTML. It's div with the id called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`root`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` render = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  ReactDOM.render(\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`todoApp`}</MDXTag>{` />`}</MDXTag>{`,\n    document.getElementById('root')\n  );\n};`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`React provides a base class for all components. I'm grabbing from the react object called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reactComponent`}</MDXTag>{`. I'm declaring my own `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todoApp`}</MDXTag>{` component that extends the react-based `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Component`}</MDXTag>{`. This component is only going to have a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` function and is going to return a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`div`}</MDXTag>{`. Inside the div, I'm going to place a button saying add todo them.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` { Component } = React;\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-class\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`class`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`todoApp`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`extends`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`Component`}</MDXTag>{` `}</MDXTag>{`{\n  render() {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag>{`\n        `}</MDXTag>{`<button onClick={() => { }}>\n          Add todo\n        </button>`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`div`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n    );\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I don't want to add an input field yet to keep the example simple at first. I'm dispatching the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` action, and I'm going to put a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Test`}</MDXTag>{` as my checks for the action. It's going to keep adding to this with the products test.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<button onClick={() => {\n  store.dispatch({\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'Test'`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: nextTodoId++\n  });\n}}>`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The ID, I need to specify a sequential ID. This is why I'm declaring an global variable called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`NextToID`}</MDXTag>{`, and I'm going to keep in command in it. Every time, it's going to emit a new id.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`let`}</MDXTag>{` nexttodoId = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`;`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I also want to display a list of the todo list. Assuming that I have the todos inject as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` prop, I'll call `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`map`}</MDXTag>{` and for every todo item, I'm going to show a list item show in the text of that particular `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<ul>\n  {`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props.todos.map(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`todo`}</MDXTag>{` =>`}</MDXTag>{`\n    <li key={todo.id}>\n      {todo.text}\n    <`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-regexp\"]}}>{`/li>\n   )}\n</u`}</MDXTag>{`l>`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, because I need to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` as a prop, I'm going to pass it to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todoApp`}</MDXTag>{` by reading the currents stores state and written its `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` field.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`  <todoApp todos={store.getState().todos} />`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/Addtodos.png\",\"alt\":\"Adding todos\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`You can see that there is a button `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`add todo`}</MDXTag>{` and anytime I press it, I see a new todo with a test text. I'm going to add an input inside my `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` function, and I'm using the react callback `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ref`}</MDXTag>{` API where `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ref`}</MDXTag>{` is a function, it gets the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`node`}</MDXTag>{` corresponding to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ref`}</MDXTag>{`, and I'm saving that `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`node`}</MDXTag>{` with some name. In this case, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`this.input`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<input ref={node => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.input = node;\n}} />`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm able to read the value of the input inside my event handler. I'm reading this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`this.input.value`}</MDXTag>{`. I'm also able to reserve the value after dispatching the action so that the field is cleared. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<button onClick={() => {\n  store.dispatch({\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.input.value,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: nextTodoId++\n  });\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.input.value = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`''`}</MDXTag>{`;\n}}>`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`If I try write something to build and press `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Add Todo`}</MDXTag>{`, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` action is dispatched and the field is cleared.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/AddtodoThisInput.png\",\"alt\":\"Adding todos with this.input\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's take a moment to recap how this application works. It starts with a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todoApp`}</MDXTag>{` react component. This component is not aware of how exactly todos are being added. However, it can express its desire to mutate the state by dispatching an action with the type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<button onClick={ () => {\n  store.dispatch({\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.input.value,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: nextTodoId++\n  });\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.input.value = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`''`}</MDXTag>{`;\n}}>`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`For the text field, it uses the current input value and it passes an incrementing id as the id of todo. Every todo needs its own id, and in this approach, we're just going to increment the counter, so it always gives us the next integer as id.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`It is common for react components to dispatch actions in Redux apps. However, it is equally important to be able to render the current state. My `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todoApp`}</MDXTag>{` component assumes that it's going to receive `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` as a prop, and it maps over the todo list to display a list of them using the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo.id`}</MDXTag>{` as a key.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-html\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`ul`}</MDXTag>{`>`}</MDXTag>{`\n  {this.props.todos.map(todo =>\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`li`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`key`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{todo.id}`}</MDXTag>{`>`}</MDXTag>{`\n      {todo.text}\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`li`}</MDXTag>{`>`}</MDXTag>{`\n  )}\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`ul`}</MDXTag>{`>`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This component is being rendered in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` function that runs any time the store state changes and initially. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` function reads the current state of this store and passes the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` array that it gets from the current state of this store to do to the app component as a prop.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` render = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  ReactDOM.render(\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`todoApp`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`todos`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{store.getState().todos}`}</MDXTag>{`\n    />`}</MDXTag>{`,\n    document.getElementById('root')\n  );\n};`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` function is called on every store change so the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` prop is always up to date. This was the rendering part of the redux flow. Let's recap how mutations work in Redux.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Any state change is caused by a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store.dispatch`}</MDXTag>{` call somewhere in the component. When an action is dispatched, this store calls the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reducer`}</MDXTag>{` it was created with, with the current state and the action being dispatched.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In our case, this is the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todoApp`}</MDXTag>{` reducer, which we obtained by combining `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` reducer.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`It matches the action type and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`switch`}</MDXTag>{` statement. If the action type is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` and indeed, it is equal to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` string. In this case, it will call the child `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` reducer, passing it `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`undefined`}</MDXTag>{`, because this is no state for a new todo that it can pass in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`:\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` [\n    ...state,\n    todo(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`undefined`}</MDXTag>{`, action)\n  ];`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`We have a similar `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`switch`}</MDXTag>{` statement inside the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` reducer and the action type is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` returns the initial state of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{`. With the id and text from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` field set to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`false`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`:\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: action.id,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: action.text,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`false`}</MDXTag>{`\n  };`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` reducer that called it was returned a new array with all existent items and the new item added at the very end. It adds a need to do to the current state.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, the combined producer called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todoApp`}</MDXTag>{` will use this new array as the new value for the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` field in the global state object. It's going to return a new state object where the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` field corresponds to the array with the newly-added todo item.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todoApp = combineReducers({\n  todos,\n  visibilityFilter\n});`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todoApp`}</MDXTag>{` reducer is the root reducer in this application. It is the one the store was created with. Its next state is a next state of the Redux store, and all the listeners are notified.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` function is subscribed to the store changes so it is called again, and it gets the fresh state by call and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getState`}</MDXTag>{` and it passes the fresh todos to the component, re-rendering it with the new data.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` render = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  ReactDOM.render(\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`TodoApp`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`todos`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{store.getState().todos}`}</MDXTag>{`\n    />`}</MDXTag>{`,\n    document.getElementById('root')\n  );\n};\n\nstore.subscribe(render);\nrender();`}</MDXTag></MDXTag></MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-react-todo-list-example-adding-a-todo.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the previous two lessons, we were working on creating the user interface for the todo list application that displays the todos, lets us add new todos, and toggle them on click. We implemented that by dispatching `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{` actions that we already know how to handle in our reducers.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In this lesson, we're going to dispatch `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SET_VISIBILITY_FILTER`}</MDXTag>{` reaction and use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` field to only show the todos the user wants to see -- either the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` todos, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`active`}</MDXTag>{` todos, or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`all`}</MDXTag>{` todos in the current state.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm starting by creating a new functional component called, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` that the user needs to click to switch the current visible todos. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` accepts the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` prop, which is just a string, and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`children`}</MDXTag>{`, which is the contents of the link. It's going to be a simple `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<a>`}</MDXTag>{` tag that doesn't really link anywhere. It's going to prevent the navigation when clicked.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` FilterLink = ({\n  filter,\n  children\n}) => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` (\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`a`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`href`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`'#'`}</MDXTag>{`\n       `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onClick`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{e`}</MDXTag>{` =>`}</MDXTag>{` {\n         e.preventDefault();\n         store.dispatch({\n          type: 'SET_VISIBILITY_FILTER',\n          filter\n         })\n       }}\n    >\n      {children}\n    `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`a`}</MDXTag>{`>`}</MDXTag></MDXTag>{`\n  );\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`It's going to dispatch an action, the type, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SET_VISIBILITY_FILTER`}</MDXTag>{`, and pass in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` prop so that the reducer knows which filter is being clicked. I will pass the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`children`}</MDXTag>{` down to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<a>`}</MDXTag>{` tag, so the consumer can specify the text of the link. Now I can use it in my `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Just below the todo list, I am adding a paragraph where I'm going to offer the user the choice as to which todos should be currently visible by using the filter link component I just created.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-html\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`ul`}</MDXTag>{`>`}</MDXTag>{`\n  {this.props.todos.map(todo =>\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`li`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`key`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{todo.id}`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onClick`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{()`}</MDXTag>{` =>`}</MDXTag>{` { store.dispatch({ ... });}}\n      style={{ ... }}>\n      {todo.text}\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`li`}</MDXTag>{`>`}</MDXTag>{`\n  )}\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`ul`}</MDXTag>{`>`}</MDXTag>{`\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag>{`\n    Show:\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`p`}</MDXTag>{`>`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` prop is one of the three possible values, such as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SHOW_ALL`}</MDXTag>{`, which corresponds to showing every todo in the state, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SHOW_ACTIVE`}</MDXTag>{`, which means just show the todos that are not completed yet, and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SHOW_COMPLETED`}</MDXTag>{`, which means show the completed todos. I'm copy-pasting the filter link, and I'm changing the labels and the filters corresponding to it.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<p>\n  Show:\n  {`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`' '`}</MDXTag>{`}\n  <FilterLink\n    filter=`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SHOW_ALL'`}</MDXTag>{`\n  >\n    ALL\n  <`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-regexp\"]}}>{`/FilterLink>\n  {' '}\n  <FilterLink\n    filter='SHOW_ACTIVE'\n  >\n    Active\n  </`}</MDXTag>{`FilterLink>\n  {`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`' '`}</MDXTag>{`}\n  <FilterLink\n    filter=`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SHOW_COMPLETED'`}</MDXTag>{`\n  >\n    Completed\n  <`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-regexp\"]}}>{`/FilterLink>\n</`}</MDXTag>{`p>`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Running this code will give me three different things under the list of todos. Clicking on them will change the state `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` field. However, it doesn't have any effect yet because we don't interpret the value of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I am creating a new function that is going to help me filter the todos according to the filter value. It's called, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getVisibleTodos`}</MDXTag>{`. It accepts two arguments, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{`. It switches on the current `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` value.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` getVisibleTodos = (\n  todos,\n  filter\n) => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`switch`}</MDXTag>{` (filter) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SHOW_ALL'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` todos;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SHOW_COMPLETED'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` todos.filter(\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`t`}</MDXTag>{` =>`}</MDXTag>{` t.completed\n      );\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SHOW_ACTIVE'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` todos.filter(\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`t`}</MDXTag>{` =>`}</MDXTag>{` !t.completed\n      );\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`If the filter is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SHOW_ALL`}</MDXTag>{`, it's going to return all of the todos. But if the filter is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SHOW_COMPLETED`}</MDXTag>{`, it's going to call `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos.filter`}</MDXTag>{`, that is array `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` method, to only return those todos that have completed set to true. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SHOW_ACTIVE`}</MDXTag>{` is going to the opposite of that. It's going to return only those todos where a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` field is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`false`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now I need to call this function to filter the todos before rendering them. In the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` function of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component, I get the visible todos by calling `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getVisibleTodos`}</MDXTag>{` with the todos and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` values from my props. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`render() {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` visibleTodos = getVisibleTodos(\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props.todos,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props.visibilityFilter\n  );\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` ( ... );\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm going to use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibleTodos`}</MDXTag>{` instead of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`this.props.todos`}</MDXTag>{` when I enumerate them for rendering.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-html\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`ul`}</MDXTag>{`>`}</MDXTag>{`\n  {visibilityTodos.map(todo =>\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`li`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`key`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{todo.id}`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`onClick`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{()`}</MDXTag>{` =>`}</MDXTag>{` { store.dispatch({ ... });}}\n      style={{ ... }}>\n      {todo.text}\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`li`}</MDXTag>{`>`}</MDXTag>{`\n  )}\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`ul`}</MDXTag>{`>`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, I now use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` inside my `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component, so I need to pass it as a prop.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I could do this explicitly, but actually it's easier for me just to `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://egghead.io/lessons/ecmascript-6-using-the-es6-spread-operator\"}}>{`spread`}</MDXTag>{` over all the state fields. So every state field inside the state object is passed as a prop to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component. This way, it receives the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`. If I add some todo items and then click on them, so I change their completed fields, and then click on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` links, the currently visible todos are rendered according to the chosen `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<TodoApp\n  {...store.getState()}\n/>`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/FiltersApplied.png\",\"alt\":\"Filters Applied\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The links look all the same right now, but we want to highlight the chosen one. To implement this, we're going to need the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` prop which says which is the current one.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm changing the beginning of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` method to destructure the todos and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` from the props, so I can access them directly now without typing `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`this.props`}</MDXTag>{` every time. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` {\n  todos,\n  visibilityFilter\n} = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props;\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` visibleTodos = getVisibleTodos(\n  todos,\n  visibilityFilter\n);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm going to pass the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` to every `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<FilterLink>`}</MDXTag>{`, so it can know which filter is the current one and apply different styling if the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`currentFilter`}</MDXTag>{` matches the filter links' own filter.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<FilterLink\n  filter=`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SHOW_ALL'`}</MDXTag>{`\n  currentFilter={visibilityFilter}\n>`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`After passing the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`currentFilter`}</MDXTag>{` prop to every filter link, I go back to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FilterLink`}</MDXTag>{` declaration. I'm adding `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`currentFilter`}</MDXTag>{` as a prop to it, and I'm adding a condition that says that when the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` is the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`currentFilter`}</MDXTag>{`, that is, when the link is active, I want to return a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<span>`}</MDXTag>{` instead of a link because I don't want it to be clickable. I want it to be static text.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`if`}</MDXTag>{` (filter === currentFilter) {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`span`}</MDXTag>{`>`}</MDXTag>{`{children}`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`</`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`span`}</MDXTag>{`>`}</MDXTag></MDXTag>{`;\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This completes the user interface of our todo list example. It lets us add items. It lets us view items, toggle them as completed. When we switch the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`, it displays only relevant todos, and it also updates the link appearance, so we see which link is active.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/UpdatedLinkAppearance.png\",\"alt\":\"Updated Link Appearance\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's recap how a change in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` works. It starts with a dispatch code with an action of the type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SET_VISIBILITY_FILTER`}</MDXTag>{`. It passes `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{`, which is a prop, to the link component, so every one of those three links is going to have a different `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`filter`}</MDXTag>{` prop it passes in the action.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<a href=`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'#'`}</MDXTag>{`\n  onClick{e => {\n    e.preventDefault();\n    store.dispatch({\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SET_VISIBILITY_FILTER'`}</MDXTag>{`,\n      filter\n    });\n  }}\n>`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The store dispatch function will call our root reducer with the state and the action which in turn will call the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` reducer with the part of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Note that when the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action.type`}</MDXTag>{` is set `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`, it doesn't care for the previous state, it just returns the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action.filter`}</MDXTag>{` as the next value, the next state, of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` reducer.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` visibilityFilter = (\n  state = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SHOW_ALL'`}</MDXTag>{`,\n  action\n) => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`switch`}</MDXTag>{` (action.type) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SET_VISIBILITY_FILTER'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` action.filter;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`default`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state;\n  }\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The root reducer will use this new field as part of its new state object.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Because the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` function is subscribed to the stored changes, it's going to get this new state object and pass all its keys as props to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` render = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  ReactDOM.render(\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`TodoApp`}</MDXTag>{`\n      {`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`...store.getState`}</MDXTag>{`()}\n    />`}</MDXTag>{`,\n    document.getElementById('root')\n  );\n}; `}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component will receive the todos and the updated `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` as its props.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Both these props are passed through the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getVisibleTodos`}</MDXTag>{` function, which calculates the currently visible todos according to a list of all todos and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` {\n  todos,\n  visibilityFilter\n} = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props;\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` visibleTodos = getVisibleTodos(\n  todos,\n  visibilityFilter\n);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The filter is just a string saying `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SHOW_ALL`}</MDXTag>{`, completed, or active. The return value is a new array of todos that in some cases, filters them and, in some cases, returns as is. The show completed and show active are only different in their predicates.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SHOW_ALL'`}</MDXTag>{`:\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` todos;\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SHOW_COMPLETED'`}</MDXTag>{`:\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` todos.filter(\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`t`}</MDXTag>{` =>`}</MDXTag>{` t.completed\n  );\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SHOW_ACTIVE'`}</MDXTag>{`:\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` todos.filter(\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`t`}</MDXTag>{` =>`}</MDXTag>{` !t.completed\n  );`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The return value is the array of visible todos. It is used in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` function to actually enumerate every todo and render it.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` field is also used by the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<FilterLink>`}</MDXTag>{` as the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`currentFilter`}</MDXTag>{` because the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<FilterLink>`}</MDXTag>{` wants to know whether its filter is the current one in order to render a span instead of a link. This is how clicking a link makes it appear selected and changes the currently displayed items in the list.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<p>\n  Show:\n  {`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`' '`}</MDXTag>{`}\n  <FilterLink\n    filter=`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SHOW_ALL'`}</MDXTag>{`\n    currentFilter={visibilityFilter}\n  >\n    All\n  <`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-regexp\"]}}>{`/FilterLink>`}</MDXTag></MDXTag></MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-react-todo-list-example-filtering-todos.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the last lesson, we implemented a simple UI for the todo list application that is able to add new todos and view the existing todos in the list.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`To add the todos, we dispatched the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` action. In this lesson, we're going to dispatch the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{` action to toggle the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` state of the todos by clicking on them.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm scrolling down to my React component. I've got a list item here corresponding to the todo, so I'm adding the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClick`}</MDXTag>{` handler. When the user clicks on the list item, I want to dispatch an action to my store with a type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` of the todo being toggled, which I get from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` object.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The event handler knows which `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` it corresponds to, so it is able to pass its `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` in the action.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`<ul>\n  {`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`this`}</MDXTag>{`.props.todos.map(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`todo`}</MDXTag>{` =>`}</MDXTag>{`\n    <li key={todo.id}\n        onClick={ () => {\n          store.dispatch({\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`,\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: todo.id\n          });         \n        }}>\n      {todo.text}\n    <`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-regexp\"]}}>{`/li>\n  )}\n</u`}</MDXTag>{`l>`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In the user interface, I want the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` todos to appear crossed out, so I'm adding this style attribute to the list item. I'm going to use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`textDecoration`}</MDXTag>{` property, which is going to be a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`line-through`}</MDXTag>{` when `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo.completed`}</MDXTag>{` is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`true`}</MDXTag>{`, and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`none`}</MDXTag>{` when `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo.completed`}</MDXTag>{` is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`false`}</MDXTag>{`, so I get a normal looking todo.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`style={{\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`textDecoration`}</MDXTag>{`:\n    todo.completed ?\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'line-through'`}</MDXTag>{` : `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'none'`}</MDXTag>{`\n}}>`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now, if I add a couple of todos, I can click on them and they're going to appear toggled, and I can toggle them back. Isn't that satisfying?`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/ToggledTodos.png\",\"alt\":\"Toggling Todos\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Let's recap how toggling the todo actually works.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`It starts with me dispatching the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{` action inside my click handler, with a type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{`, which is the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` of the todo being rendered.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`onClick={() => {\n  store.dispatch({\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: todo.id\n  });         \n}}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I get the todo object as an argument to the array `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`map`}</MDXTag>{` call back inside my `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` method where I render all the todos.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`When an action is dispatched, the store will call the root reducer, which will call the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` reducer with the array of todos and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{`. In this case, the action type is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{`, so the todos reducer delegates handling of every todo to the todo reducer with a map function to call it for every todo item. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` reducer receives the todo as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{`, and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todos = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state = [], action`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`switch`}</MDXTag>{` (action.type) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` [ ... ];\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state.map(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`t`}</MDXTag>{` =>`}</MDXTag>{`\n        todo(t, action)\n      );\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`default`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state;\n  }\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Again, we switch on the action type, and it matches `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{` string. Now, for every todo whose `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` does not match the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` specified in the action, we just return the previous state, that is the todo object, as it was.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state, action`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`switch`}</MDXTag>{` (action.type) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`: { ... }\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`: \n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`if`}</MDXTag>{` (state.id !== action.id) {\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state;\n      }\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n        ...state,\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: !state.completed\n      };\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`default`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state;\n  }\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`However, if the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` of the todo matches the one specified in the action, we're going to return any object with all the properties of the original todo, but with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` field equal to the opposite value of what it was.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The updated todo item will be included in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` field under the new application state. Because we `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribe`}</MDXTag>{`, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` function is going to get the next state of the application in store, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getState()`}</MDXTag>{`, and pass the new version of the todos to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TodoApp`}</MDXTag>{` component, which is going to render the updated todos.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` render = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  ReactDOM.render(\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"xml\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-tag\"]}}>{`<`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-name\"]}}>{`TodoApp`}</MDXTag>{`\n      `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-attr\"]}}>{`todos`}</MDXTag>{`=`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-string\"]}}>{`{store.getState().todos}`}</MDXTag>{`\n    />`}</MDXTag>{`,\n    document.getElementById('root')\n  );\n};\n\nstore.subscribe(render);\nrender();`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, this child of the list item, depends on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo.completed`}</MDXTag>{` field, which we just updated, which is why it re-renders in a cross-child state.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-react-todo-list-example-toggling-a-todo.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the previous lesson we created a reducer that can handle two actions, adding a new `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{`, and toggling an existing `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{`. Right now, the code to update the todo item or to create a new one is placed right inside of the todos reducer.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This function is hard to understand because it makes us two different concerns, how the todo's array is updated, and how individual todos are updated. This is not a problem unique to Redux. Any time a `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`function does too many things`}</MDXTag>{`, you want to `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`extract other functions from it`}</MDXTag>{`, and call them so that every function only addresses `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`a single concern`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state, action`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`switch`}</MDXTag>{` (action.type) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: action.id,\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: action.text,\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`false`}</MDXTag>{`\n      };\n  }\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In this case, I decided that creating and updating a todo in response to an action is a separate operation, and needs to be handled by a separate function called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{`. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todos = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state = [], action`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`switch`}</MDXTag>{` (action.type) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` [\n        ...state,\n        todo(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`undefined`}</MDXTag>{`, action)\n      ];\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`As a matter of convention, I decided that it should also accept two arguments, the current `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{` being dispatched, and it should return the next state.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state, action`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`switch`}</MDXTag>{` (action.type) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` { ... };\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`if`}</MDXTag>{` (todo.id !== action.id) {\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state;\n      }\n\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n        ...state,\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: !state.completed\n      };\n  }\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`But in this case, this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` refers to the individual `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{`, and not to the list of todos. Finally, there is no magic in Redux to make it work. We extracted the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` reducer from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` reducer, so now we need to call it for every `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{`, and assemble the results into an array.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`switch`}</MDXTag>{` (action.type) {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`:\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` { ... };\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`:\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` stat.map(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`t`}</MDXTag>{` =>`}</MDXTag>{` todo(t, action));\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`default`}</MDXTag>{`:\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state;\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`While this is not required in this particular example, I suggest that you always have the default case where you return the current state to avoid all problems in the future. The pattern described in this lesson is pervasive in Redux's development, and is called `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`reducer composition`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state, action`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`switch`}</MDXTag>{` (action.type) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` { ... };\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`if`}</MDXTag>{` (todo.id !== action.id) {\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state;\n      }\n\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n        ...state,\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: !state.completed\n      };\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`default`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state;\n  }\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Different reducers specify how different parts of the state tree are updated in response to actions. Reducers are also normal JavaScript functions, so they can call other reducers to delegate and abstract a way of handling of updates of some parts of this tree they manage.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This pattern can be applied many times, and while there is still a single top level reducer managing the state of your app, you will find it convenient to express it as many reducers call on each other, each contribution to a part of the applications state tree.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-reducer-composition-with-arrays.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the previous lesson we learned how to use the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`reducer composition pattern`}</MDXTag>{` to let different reducers `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`handle different parts of the state tree`}</MDXTag>{`, and then combine their results.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This pattern is so common that it's present in most `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`Redux`}</MDXTag>{` applications. This is why Redux provides a function called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`combineReducers`}</MDXTag>{` that lets you avoid writing this code by hand. Instead, it generates the top level reducer for you.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` { combineReducers } = Redux;\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todoApp = combineReducers({\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`todos`}</MDXTag>{`: todos,\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`visibilityFilter`}</MDXTag>{`: visibilityFilter\n});`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The only argument to combine reducers is an object. This object lets me specify the mapping between the state field names, and the reducers managing them. The return value of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`combineReducer`}</MDXTag>{` is called a `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`Reducer function`}</MDXTag>{`, which is pretty much equivalent to the reducer function I wrote by hand previously.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The keys of the object I configure `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`combinedReducers`}</MDXTag>{` with correspond to the fields that the state object is going to manage. The values of the object I have asked to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`combineReducer`}</MDXTag>{`, are the producers we should call to update the correspondence state fields.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todos = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state = [], action`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`switch`}</MDXTag>{` (action.type) { ... }\n};\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` visibilityFilter = (\n  state = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SHOW_ALL'`}</MDXTag>{`,\n  action\n) => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`switch`}</MDXTag>{` (action.type) { ... }\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`combineReducer`}</MDXTag>{` call says that the todo's field inside the state object managers will be updated by the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` reducer, and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` field inside the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` object will be updated by calling the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` reducer. The results will be assembled into a single object. In other words, it behaves pretty much exactly as the function commented down below.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`//  const todoApp = (state = {}, action) => {`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`//    return {`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`//      todos: todos(`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`//       state.todos,`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`//        action`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`//     ),`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`//      visibilityFilter: visibilityFilter(`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`//        state.visibilityFilter,`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`//        action`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`//      )`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`//    };`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`//  };`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, I will establish a useful convention. I will `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`always name`}</MDXTag>{` my reducers after the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`state keys they manage`}</MDXTag>{`. Since the key names and the value names are now the same, I can omit the values thanks to the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://egghead.io/lessons/ecmascript-6-shorthand-properties-in-es6\"}}>{`ES6 object literal shorthand notation`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todoApp = combineReducers({\n  todos,\n  visibilityFilter\n});`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In this lesson, you learned how to generate a simple reducer that calls many reducers to manage parts of its state by using the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`combineReducers`}</MDXTag>{` utility function.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-reducer-composition-with-combinereducers.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In the previous lesson, we established the pattern of reducer composition where one reducer can be called by another reducer to update items inside an array.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`If we create a store with this reducer and log its state, we will find that the initial state of it is an empty array of todos. If we dispatch an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` action, we will find that the corresponding to do has been added to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` array.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`If we dispatch another `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` action, the corresponding to do will also be added at the end of the array and dispatch in a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{` action with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id: 0`}</MDXTag>{` will flag the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` field of the to do with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id: 0`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Representing the whole state of the application as an array of todos works for a simple example, but what if we want to store more information? For example, we may want to let the user choose which todos are currently visible with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` such as show `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SHOW_ALL`}</MDXTag>{`, or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SHOW_ACTIVE`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` visibilityFilter = (\n  state = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SHOW_ALL'`}</MDXTag>{`,\n  action\n) => {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`switch`}</MDXTag>{` (action.type) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SET_VISIBILITY_FILTER'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` action.filter;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`default`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state;\n  }\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The state of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` is a simple string representing the current filter. It is changed by `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SET_VISIBILITY_FILTER`}</MDXTag>{` action.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`To store this new information, I don't need to change the existing reducers. I will use the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`reducer composition pattern`}</MDXTag>{` and create a new reducer that calls the existing reducers to manage parts of its state and combines the results in a single state object.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todoApp = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state = {}, action`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`todos`}</MDXTag>{`: todos(\n      state.todos,\n      action\n    ),\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`visibilityFilter`}</MDXTag>{`: visibilityFilter(\n      state.visibilityFilter,\n      action\n    )\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now that the first time it runs, it will pass `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`undefined`}</MDXTag>{` as the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` of the child reducers because the initial state of the combined reducer is an empty object, so all its fields are `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`undefined`}</MDXTag>{`. This gets the child reducers to return their initial states and populates the state object for the first time.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`When an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{` comes in, it calls the reducers with the pass of the state that they manage and the action and combines the results into the new state object.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This is another example of the reducer composition pattern, but this time we use it to combine several reducers into a single reducer that we will now use to create our store. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` store = createStore(todoApp);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The initial state of the combined reducer now contains the initial states of independent reducers. Any time an action comes in, those reducers handle the action independently.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This pattern helps scale Redux's development because different people on the team can work on different reducers handling the same actions without running into each other and causing merge conflicts.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/DispatchingVisibilityFilters.png\",\"alt\":\"Dispatching visibility Filter\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, I'm dispatching the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SET_VISIBILITY_FILTER`}</MDXTag>{` action. You can see that it doesn't affect the todos, but the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{` field has been updated.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-reducer-composition-with-objects.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`I added Redux to our application as a script tag from CDNJS. This is the UMG build, so it exports a single global variable called Redux, with a capital R. In real applications, I suggest you to use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`npm`}</MDXTag>{` instead and a module bundler like webpack or Browserify, but the UMG build will suffice for our example.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm going to need just a single function from Redux called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`createStore`}</MDXTag>{`. I'm using `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://egghead.io/lessons/ecmascript-6-destructuring-assignment\"}}>{`ES6 destruction`}</MDXTag>{` syntax here. It's equivalent to writing, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`var createStore = Redux.createStore`}</MDXTag>{` or, if you use NPM and something like Babel to transpile your ES6, you can write, import `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`{ createStore }`}</MDXTag>{`, notice the bracers, from Redux.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` { createStore } = Redux;\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`// var createStore = Redux.createStore;`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`// import { createStore } from 'redux';`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This store `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`binds together the three principles`}</MDXTag>{` of Redux. It holds the current application's state object. It lets you dispatch actions. When you create it, you need to specify the reducer that tells how state is updated with actions.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In this example, we're calling `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`createStore`}</MDXTag>{` with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`counter`}</MDXTag>{` as the reducer that manages the state updates. This store has three important methods.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` store = createStore(counter);\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-built_in\"]}}>{`console`}</MDXTag>{`.log(store.getState());  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`// 0`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The first method of this store is called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getState`}</MDXTag>{`. It retrieves the current `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` of the Redux store. If we were on this, we're going to see `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`0`}</MDXTag>{` because this is the initial state of our application.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The second and the most commonly used store method is called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch`}</MDXTag>{`. It lets you dispatch actions to change the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` of your application. If we log this store state after dispatch, we're going to see that it has changed.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`store.dispatch({ `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'INCREMENT'`}</MDXTag>{` });\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-built_in\"]}}>{`console`}</MDXTag>{`.log(store.getState());  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-comment\"]}}>{`// 1`}</MDXTag></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Of course, always log into the console gets boring, so we're actually going to render something to the body with the help of the third Redux store method, called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribe`}</MDXTag>{`. It lets you register a callback that the Redux store will call any time an action has been dispatched, so that you can update the UI of your application. It will reflect the current application state.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`store.subscribe(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-built_in\"]}}>{`document`}</MDXTag>{`.body.innerText = store.getState();\n});\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-built_in\"]}}>{`document`}</MDXTag>{`.addEventListener(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'click'`}</MDXTag>{`, () => {\n  store.dispatch({ `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'INCREMENT'`}</MDXTag>{` });\n});`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm being very naive now. I'm not using React or anything. I'm just rendering the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`counter`}</MDXTag>{` into the document body. Any time the body is clicked, I'm going to dispatch an action to increment this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`counter`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`If you pay close attention, you will notice that the initial state, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`0`}</MDXTag>{`, was not rendered. This is because I'm rendering inside the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribe`}</MDXTag>{` callback, but it doesn't actually fire the very first time.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/Subscribe.png\",\"alt\":\"Subscribe Method\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`So I extract this logic into render method. I `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribe`}</MDXTag>{` the render method to this store. I also call it once to render the initial state. Now it renders the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`0`}</MDXTag>{`, and the click increments the counter. This is our first working Redux application.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` render = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-built_in\"]}}>{`document`}</MDXTag>{`.body.innerText = store.getState();\n};\n\nstore.subscribe(render);\nrender();`}</MDXTag></MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-store-methods-getstate-dispatch-and-subscribe.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`You might have heard that the UI or the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`view layer`}</MDXTag>{` is most predictable when it is described as a `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`pure`}</MDXTag>{` function of the application state. This approach was pioneered by React but is now being picked up by other frameworks, such as Ember and Angular.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/TheReducer.png\",\"alt\":\"The Reducer\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Redux complements this approach with another idea, that the state mutations in your app need to be described as a pure function that takes the previous state and the action being dispatched and returns the next state of your application.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Inside any Redux application, there is one particular function that takes the state of the whole application and the action being dispatched and returns the next state of the whole application. It is important that it does not modify the state given to it. It has to be pure, so it has to return a new object.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Even in large applications, there is still just a single function that manages how the next state is calculated based on the previous state of the whole application and the action being dispatched. It does not have to be slow.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/LargeAppExample.png\",\"alt\":\"Large App Example\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`For example, if I change the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`, I have to create a new object for the whole state, but I can keep the reference to the previous version of the todos state, because it has not changed when I changed the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibilityFilter`}</MDXTag>{`. This is what makes Redux fast.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now you know the third and the last principle of Redux. To describe state mutations, you have to write a function that takes the previous state of the app, the action being dispatched, and returns the next state of the app. This function has to be pure. This function is called the Reducer.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-the-reducer-function.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`The first principle of `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`Redux`}</MDXTag>{` is whether your app is a really simple one like this counter example, or a complex application with a lot of UI, and change of state, you are going to represent the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`whole state`}</MDXTag>{` of your application as a `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`single JavaScript object`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`All mutations, and changes the state in Redux are explicit. It is possible to keep track of all of them. In this case, I am logging every state change in the application in the console. You can see that, in the counter example, there isn't really much state to keep track of so it can be represented by a JavaScript number.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/NumbersShowingState.png\",\"alt\":\"Numbers Showing State\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Here is a different example, a list of independent counters that I can add and remove. In this case, a single number is not enough to represent the state of the application, so we use an array of JavaScript numbers. In a more complex application, there is more state to keep track of.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/MultipleCounterState.png\",\"alt\":\"Multiple Counter State\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This is a typical `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` app, where I can add todos, I can cross them as completed ones, and I can change their current filter. Looking back at the history of the state changes, we can see that the initial state of the app was a JavaScript object, containing an array under the todo string, and a string seen show all, under `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visible filter`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/ToDoAppState.png\",\"alt\":\"ToDo App State\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`When I added the first todo, it was added to the todos array, inside our state object. The todo itself, is described by a plain child script object, saying it was not completed, and the text was saved. Every further change that the app, whether when I was crossing out the todos, or when I changed the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`visibility filter`}</MDXTag>{`, resulted in this change to this state object, described in our whole application.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now you know the first principle of Redux, which is that, `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`everything`}</MDXTag>{` that changes in your application, including the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`data`}</MDXTag>{` and the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`UI state`}</MDXTag>{`, is contained in a `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`single object`}</MDXTag>{`, we call the state or the state tree.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-the-single-immutable-state-tree.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`The first function we're going to write is the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`reducer`}</MDXTag>{` for the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`counter`}</MDXTag>{` example. Reducer accepts `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{` as arguments and returns the next `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{`. Before jumping into the implementation, we're going to make certain assertions using Michael Jackson's `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Expect`}</MDXTag>{` library. We're going to assert that when the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` of the counter is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`0`}</MDXTag>{` and you pass an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`INCREMENT`}</MDXTag>{` action it should return `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`1`}</MDXTag>{`. Similarly it should return `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`2`}</MDXTag>{` when this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`1`}</MDXTag>{` and you `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`INCREMENT`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`function`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`counter`}</MDXTag>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state, action`}</MDXTag>{`)`}</MDXTag>{`{\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state;\n}\n\nexpect(\n  counter(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`, { `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'INCREMENT'`}</MDXTag>{` })\n).toEqual(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`);\n\nexpect(\n  counter(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`, { `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'INCREMENT'`}</MDXTag>{` })\n).toEqual(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`2`}</MDXTag>{`);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`We're going to add a couple of tests that test how `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`DECREMENT`}</MDXTag>{` works, which is that it decrements from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`2`}</MDXTag>{` to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`1`}</MDXTag>{` and from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`1`}</MDXTag>{` to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`0`}</MDXTag>{` and we're going to add a log to tell if our tests are successful.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`expect(\n  counter(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`2`}</MDXTag>{`, { `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'DECREMENT'`}</MDXTag>{` })\n).toEqual(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`);\n\nexpect(\n  counter(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`, { `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'DECREMENT'`}</MDXTag>{` })\n).toEqual(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`);\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-built_in\"]}}>{`console`}</MDXTag>{`.log(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'Tests passed!'`}</MDXTag>{`)`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/TestsFailed.png\",\"alt\":\"Tests Failed\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`If you ran this test, they're actually going to fail because we haven't even begun to implement our reducer. We're going to start by checking the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action.type`}</MDXTag>{` and if the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action.type`}</MDXTag>{` is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`INCREMENT`}</MDXTag>{` we're going to return `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state + 1`}</MDXTag>{`, but if it is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`DECREMENT`}</MDXTag>{` we're going to return `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state - 1`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`function`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`counter`}</MDXTag>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state, action`}</MDXTag>{`) `}</MDXTag>{`{\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`if`}</MDXTag>{`(action.type === `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'INCREMENT'`}</MDXTag>{`){\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state + `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`;\n  } `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`else`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`if`}</MDXTag>{` (action.type === `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'DECREMENT'`}</MDXTag>{`) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state - `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`;\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`If you run the tests we will find that this is enough to get them to pass. However, there are still some flaws in our current implementation of the counter reducer. For example, I think that if we dispatch an action that it does not understand, it should return the current `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` of the application.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`expect(\n  counter(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`,{ `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'SOMETHING_ELSE'`}</MDXTag>{` })\n).toEqual(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://d2eip9sf3oo6c2.cloudfront.net/asciicasts/getting-started-with-redux/TestsPassed.png\",\"alt\":\"Tests Passed\"}}></MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`However, if we check for that we will see that this test fails, because we currently don't handle `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`unknown actions`}</MDXTag>{`. I'm going to add an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`else`}</MDXTag>{` clause that returns the current `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{`. The tests pass now.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`if`}</MDXTag>{`(action.type === `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'INCREMENT'`}</MDXTag>{`){\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state + `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`;\n  } `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`else`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`if`}</MDXTag>{` (action.type === `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'DECREMENT'`}</MDXTag>{`) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state - `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`;\n  } `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`else`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state;\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Another issue is that while the reducer is normally in control of the application state, currently it does not specify the initial state. In the case of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`counter`}</MDXTag>{` example that would be `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`0`}</MDXTag>{`. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`expect(\n  counter(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`undefined`}</MDXTag>{`, {})\n).toEqual(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The convention we use in Redux is that if the reducer receives `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`undefined`}</MDXTag>{` as the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` argument, it must return what it considers to be the initial state of the application. In this case it will be `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`0`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-keyword\"]}}>{`function`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-title\"]}}>{`counter`}</MDXTag>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state, action`}</MDXTag>{`) `}</MDXTag>{`{\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`if`}</MDXTag>{` (`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`typeof`}</MDXTag>{` state === `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'undefined'`}</MDXTag>{`){\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`;\n  }\n}`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now come a few cosmetic tweaks. I'll replace this bunch of tweaks with a switch statement and I'm going to replace this condition with `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://egghead.io/lessons/ecmascript-6-default-values-for-function-parameters\"}}>{`ES6 default argument`}</MDXTag>{`, which looks better. I'm also going to replace the function declaration with an `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://egghead.io/lessons/arrow-function\"}}>{`arrow function`}</MDXTag>{`, which has clearer semantics in ES6.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` counter = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state = `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`, action`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`switch`}</MDXTag>{` (action.type) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'INCREMENT'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state + `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'DECREMENT'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state - `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`;\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`default`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state;\n  }\n}`}</MDXTag></MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-writing-a-counter-reducer-with-tests.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`Just like in the previous two lessons, I'm using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`expect`}</MDXTag>{` library to make test assertions and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`deep-freeze`}</MDXTag>{` library to prevent accidental mutations in my code. In this lesson, I will create the reducer for a todo list application whose state is described an array of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Just to remind you what a `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`reducer`}</MDXTag>{` is, it's a `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`pure function`}</MDXTag>{` you write to implement the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`update logic`}</MDXTag>{` of your application -- that is, how the next `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` is calculated given the current state and the action being dispatched.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todos = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state = [], action`}</MDXTag>{`) =>`}</MDXTag>{` {\n\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Before writing a reducer, I want to have a way of knowing whether its code is correct, so I'm starting by writing a test for it. I'm declaring two variables, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`stateBefore`}</MDXTag>{`, which is an empty array, and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{` being dispatched, which is an action describing user adding any todo with some ID and a text.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` testAddTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` stateBefore = [];\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` action = {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'Learn Redux'`}</MDXTag>{`\n  };\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` stateAfter = [\n    {\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`,\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'Learn Redux'`}</MDXTag>{`,\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`false`}</MDXTag>{`\n    }\n  ];\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I am also declaring the state I expect to get after calling the reducer. Like state before, it is an array, but this time, it has a single element representing the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` that was just added. So it has the same `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` and the text as the action object. It also has an additional field called, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{`, that I want to be initialized to be `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`false`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` testAddTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` stateBefore = [];\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` action = {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'Learn Redux'`}</MDXTag>{`\n  };\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` stateAfter = [\n    {\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`,\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'Learn Redux'`}</MDXTag>{`,\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`false`}</MDXTag>{`\n    }\n  ];\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`We want to make sure that the reducer is a pure function, so I'm calling `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`deepFreeze`}</MDXTag>{` both on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`stateBefore`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{`. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`deepFreeze(stateBefore);\ndeepFreeze(action);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, I am ready to use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`expect`}</MDXTag>{` library to verify that if I call the todo reducer with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`stateBefore`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{` object, I'm going to get the result that is deeply equal to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`stateAfter`}</MDXTag>{` I just declared.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`expect(\n  todos(stateBefore, action)\n).toEqual(stateAfter);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`This concludes my first test. Now I can call it just like a regular JavaScript function. If it doesn't throw an the expect call, I'm going to see a message saying that the tests have passed.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Of course, it fails because the reducer is not implemented yet. It's an empty function. So it returns `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`undefined`}</MDXTag>{` instead of the array with a single item that I expect in the test.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`To fix this, I would need my reducer to take a look at the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action.type`}</MDXTag>{` property, which is a string. When it matches the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` string, which I specify as the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action.type`}</MDXTag>{` in my test, to satisfy the test I need to return a new array which includes all items from the original array but also a new todo item that has its `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` and text copied from the action object and a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` field set to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`false`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todos = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state = [], action`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`switch`}</MDXTag>{` (action.type) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` [\n        ...state,\n        {\n          `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: action.id,\n          `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: action.text,\n          `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`false`}</MDXTag>{`\n        }\n      ];\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`default`}</MDXTag>{`:\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state;\n  }\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, I add a default case to my `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`switch`}</MDXTag>{` statement because every reducer has to return the current state for any unknown action.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now the test runs successfully. Let's recap the data flow in this example to see why.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`First, I create the state array, which is an empty array, and the action object inside my test function. I'm passing them as arguments to my `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reducer`}</MDXTag>{` function, called, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{`. `}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` testAddTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` stateBefore = [];\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` action = { ... };\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` stateAfter = [ ... ];\n};\n\nexpect(\n  todos(stateBefore, action)\n  ).toEqual(stateAfter);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos reducer`}</MDXTag>{` accepts the state and the action as arguments and takes a look at the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action.type`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` todos = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`state = [], action`}</MDXTag>{`) =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`switch`}</MDXTag>{` (action.type) {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` [\n        ...state,\n        {\n          `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: action.id,\n          `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: action.text,\n          `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`false`}</MDXTag>{`\n        }\n      ];\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`default`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state;\n  }\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In this case, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action.type`}</MDXTag>{` is a string saying, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{`, so it matches the switch case inside the reducer. The reducer returns a new array which contains the items from the old array and the new item representing the added todo.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`However, the state we passed from the test was actually an empty array, so, at the end, we're going to get an array with a single item, which is the new todo.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Finally, we compare the return value to an array with a single todo item to make sure that the reducer works as intended. The equality check passes. This makes the test successful.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-writing-a-todo-list-reducer-adding-a-todo.md","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components}) => <MDXTag name=\"wrapper\"><MDXTag name=\"p\" components={components}>{`In this lesson, we will continue creating the reducer for todo list application. The only action that this reducer currently handles is called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{`. We also created a test that makes sure that when the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reducer`}</MDXTag>{` is called with an empty array as a state and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ADD_TODO`}</MDXTag>{` action, it returns an array with a single to do element.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` testAddTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` stateBefore = [];\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` action = {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'ADD_TODO'`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'Learn Redux'`}</MDXTag>{`\n  };\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` stateAfter = [\n    {\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`,\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'Learn Redux'`}</MDXTag>{`,\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`false`}</MDXTag>{`\n    }\n  ];\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`In this lesson, we will follow the same approach to implement another action called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{`. We're going to start with a test again. This time, we're testing a different action and we have a different initial state. The state before calling the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reducer`}</MDXTag>{` now includes two different `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todos`}</MDXTag>{` with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id: 0`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`1`}</MDXTag>{`. Notice how both of them have their `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` fields set to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`false`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` testToggleTodo = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` stateBefore = [\n    {\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`,\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'Learn Redux'`}</MDXTag>{`,\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`false`}</MDXTag>{`\n    },\n    {\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`,\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'Go shopping'`}</MDXTag>{`,\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`false`}</MDXTag>{`\n    }\n  ];\n};`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Next, I declare the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{`. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{` is an object with the type property which is a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TOGGLE_TODO`}</MDXTag>{` string and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` of the todo that I want to be toggled. I declare the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` that I expect to receive after calling the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reducer`}</MDXTag>{`. It's pretty much the same as before calling the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reducer`}</MDXTag>{`. However, I expect the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` specified in the action or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`1`}</MDXTag>{` in this case. The change is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`completed`}</MDXTag>{` field.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` action = {\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`type`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`,\n  `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`\n};\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`const`}</MDXTag>{` stateAfter = [\n  {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`0`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'Learn Redux'`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`false`}</MDXTag>{`\n  },\n  {\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`id`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-number\"]}}>{`1`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`text`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'Go shopping'`}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-literal\"]}}>{`true`}</MDXTag>{`\n  }\n];`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The reducer must be a pure function. As a matter of precaution, I called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`deepFreeze`}</MDXTag>{` on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{`. Finally, just like in the previous lesson, I'm asserting that the result of calling my `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reducer`}</MDXTag>{` with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`stateBefore`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`action`}</MDXTag>{` is going to be deeply equal to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`stateAfter`}</MDXTag>{`.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}>{`deepFreeze(stateBefore);\ndeepFreeze(action);\n\nexpect(\n  todos(stateBefore, action)\n).toEqual(stateAfter);`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`My test is a function, so I need to call it at the end of the file. If I run it, it fails because I have not implemented handling this action yet.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`I'm adding a new switch `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`case`}</MDXTag>{` to my reducer. I remember that I shouldn't change the original array, so I'm using the array `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`map`}</MDXTag>{` method to produce a new array.`}</MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`The function I pass as an argument will be called for every `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{`. If it's not a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` I'm looking for, I don't want to change it. I just return it as is. However, if the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`todo`}</MDXTag>{` is the one we want to toggle, I'm going to return a new object that has all the properties of the original todo object thanks to the object's spread operator, but also an inverted value of the completed field.`}</MDXTag>{`\n`}<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":[\"hljs\",\"language-javascript\"]}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`case`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-string\"]}}>{`'TOGGLE_TODO'`}</MDXTag>{`:\n      `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` state.map(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-function\"]}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":[\"hljs-params\"]}}>{`todo`}</MDXTag>{` =>`}</MDXTag>{` {\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`if`}</MDXTag>{` (todo.id !== action.id) {\n          `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` todo;\n        }\n\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-keyword\"]}}>{`return`}</MDXTag>{` {\n          ...todo,\n          `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":[\"hljs-attr\"]}}>{`completed`}</MDXTag>{`: !todo.completed\n        };`}</MDXTag></MDXTag>{`\n`}<MDXTag name=\"p\" components={components}>{`Now both of our tests run successfully. We have an implementation of the reducer that can add and toggle todos.`}</MDXTag></MDXTag>\n  \n\n\n// WEBPACK FOOTER //\n// lessons/javascript-redux-writing-a-todo-list-reducer-toggling-a-todo.md","/* eslint-disable */\n// murmurhash2 via https://github.com/garycourt/murmurhash-js/blob/master/murmurhash2_gc.js\nfunction murmurhash2_32_gc(str) {\n  var l = str.length,\n      h = l ^ l,\n      i = 0,\n      k;\n\n  while (l >= 4) {\n    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    k ^= k >>> 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  h ^= h >>> 15;\n  return (h >>> 0).toString(36);\n}\n\nexport default murmurhash2_32_gc;\n//# sourceMappingURL=index.es.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@emotion/hash/dist/index.es.js\n// module id = ./node_modules/@emotion/hash/dist/index.es.js\n// module chunks = 1 5","import memoize from '@emotion/memoize';\n\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|accept|acceptCharset|accessKey|action|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan)|(on[A-Z].*)|((data|aria)-.*))$/;\nvar index = memoize(RegExp.prototype.test.bind(reactPropsRegex));\n\nexport default index;\n//# sourceMappingURL=index.es.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@emotion/is-prop-valid/dist/index.es.js\n// module id = ./node_modules/@emotion/is-prop-valid/dist/index.es.js\n// module chunks = 5","function memoize(fn) {\n  var cache = {};\n  return function (arg) {\n    if (cache[arg] === undefined) cache[arg] = fn(arg);\n    return cache[arg];\n  };\n}\n\nexport default memoize;\n//# sourceMappingURL=index.es.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@emotion/memoize/dist/index.es.js\n// module id = ./node_modules/@emotion/memoize/dist/index.es.js\n// module chunks = 1 5","var V = function ca(W) {\n  function M(d, c, f, h, a) {\n    for (var k = 0, b = 0, u = 0, l = 0, q, m, e, D = 0, y = 0, r, E = r = q = 0, n = 0, J = m = 0, t = 0, K = f.length, F = K - 1, w, g = \"\", p = \"\", G = \"\", H = \"\", A; n < K;) {\n      e = f.charCodeAt(n);\n      n === F && 0 !== b + l + u + k && (0 !== b && (e = 47 === b ? 10 : 47), l = u = k = 0, K++, F++);\n\n      if (0 === b + l + u + k) {\n        if (n === F && (0 < m && (g = g.replace(N, \"\")), 0 < g.trim().length)) {\n          switch (e) {\n            case 32:\n            case 9:\n            case 59:\n            case 13:\n            case 10:\n              break;\n\n            default:\n              g += f.charAt(n);\n          }\n\n          e = 59;\n        }\n\n        switch (e) {\n          case 123:\n            g = g.trim();\n            q = g.charCodeAt(0);\n            r = 1;\n\n            for (t = ++n; n < K;) {\n              e = f.charCodeAt(n);\n\n              switch (e) {\n                case 123:\n                  r++;\n                  break;\n\n                case 125:\n                  r--;\n              }\n\n              if (0 === r) break;\n              n++;\n            }\n\n            e = f.substring(t, n);\n            0 === q && (q = (g = g.replace(da, \"\").trim()).charCodeAt(0));\n\n            switch (q) {\n              case 64:\n                0 < m && (g = g.replace(N, \"\"));\n                m = g.charCodeAt(1);\n\n                switch (m) {\n                  case 100:\n                  case 109:\n                  case 115:\n                  case 45:\n                    r = c;\n                    break;\n\n                  default:\n                    r = O;\n                }\n\n                e = M(c, r, e, m, a + 1);\n                t = e.length;\n                0 < z && (r = X(O, g, J), A = I(3, e, r, c, B, x, t, m, a, h), g = r.join(\"\"), void 0 !== A && 0 === (t = (e = A.trim()).length) && (m = 0, e = \"\"));\n                if (0 < t) switch (m) {\n                  case 115:\n                    g = g.replace(ea, fa);\n\n                  case 100:\n                  case 109:\n                  case 45:\n                    e = g + \"{\" + e + \"}\";\n                    break;\n\n                  case 107:\n                    g = g.replace(ha, \"$1 $2\");\n                    e = g + \"{\" + e + \"}\";\n                    e = 1 === v || 2 === v && L(\"@\" + e, 3) ? \"@-webkit-\" + e + \"@\" + e : \"@\" + e;\n                    break;\n\n                  default:\n                    e = g + e, 112 === h && (e = (p += e, \"\"));\n                } else e = \"\";\n                break;\n\n              default:\n                e = M(c, X(c, g, J), e, h, a + 1);\n            }\n\n            G += e;\n            r = J = m = E = q = 0;\n            g = \"\";\n            e = f.charCodeAt(++n);\n            break;\n\n          case 125:\n          case 59:\n            g = (0 < m ? g.replace(N, \"\") : g).trim();\n            if (1 < (t = g.length)) switch (0 === E && (q = g.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (g = g.replace(\" \", \":\")).length), 0 < z && void 0 !== (A = I(1, g, c, d, B, x, p.length, h, a, h)) && 0 === (t = (g = A.trim()).length) && (g = \"\\x00\\x00\"), q = g.charCodeAt(0), m = g.charCodeAt(1), q + m) {\n              case 0:\n                break;\n\n              case 169:\n              case 163:\n                H += g + f.charAt(n);\n                break;\n\n              default:\n                58 !== g.charCodeAt(t - 1) && (p += P(g, q, m, g.charCodeAt(2)));\n            }\n            J = m = E = q = 0;\n            g = \"\";\n            e = f.charCodeAt(++n);\n        }\n      }\n\n      switch (e) {\n        case 13:\n        case 10:\n          47 === b ? b = 0 : 0 === 1 + q && (m = 1, g += \"\\x00\");\n          0 < z * Y && I(0, g, c, d, B, x, p.length, h, a, h);\n          x = 1;\n          B++;\n          break;\n\n        case 59:\n        case 125:\n          if (0 === b + l + u + k) {\n            x++;\n            break;\n          }\n\n        default:\n          x++;\n          w = f.charAt(n);\n\n          switch (e) {\n            case 9:\n            case 32:\n              if (0 === l + k + b) switch (D) {\n                case 44:\n                case 58:\n                case 9:\n                case 32:\n                  w = \"\";\n                  break;\n\n                default:\n                  32 !== e && (w = \" \");\n              }\n              break;\n\n            case 0:\n              w = \"\\\\0\";\n              break;\n\n            case 12:\n              w = \"\\\\f\";\n              break;\n\n            case 11:\n              w = \"\\\\v\";\n              break;\n\n            case 38:\n              0 === l + b + k && (m = J = 1, w = \"\\f\" + w);\n              break;\n\n            case 108:\n              if (0 === l + b + k + C && 0 < E) switch (n - E) {\n                case 2:\n                  112 === D && 58 === f.charCodeAt(n - 3) && (C = D);\n\n                case 8:\n                  111 === y && (C = y);\n              }\n              break;\n\n            case 58:\n              0 === l + b + k && (E = n);\n              break;\n\n            case 44:\n              0 === b + u + l + k && (m = 1, w += \"\\r\");\n              break;\n\n            case 34:\n            case 39:\n              0 === b && (l = l === e ? 0 : 0 === l ? e : l);\n              break;\n\n            case 91:\n              0 === l + b + u && k++;\n              break;\n\n            case 93:\n              0 === l + b + u && k--;\n              break;\n\n            case 41:\n              0 === l + b + k && u--;\n              break;\n\n            case 40:\n              if (0 === l + b + k) {\n                if (0 === q) switch (2 * D + 3 * y) {\n                  case 533:\n                    break;\n\n                  default:\n                    q = 1;\n                }\n                u++;\n              }\n\n              break;\n\n            case 64:\n              0 === b + u + l + k + E + r && (r = 1);\n              break;\n\n            case 42:\n            case 47:\n              if (!(0 < l + k + u)) switch (b) {\n                case 0:\n                  switch (2 * e + 3 * f.charCodeAt(n + 1)) {\n                    case 235:\n                      b = 47;\n                      break;\n\n                    case 220:\n                      t = n, b = 42;\n                  }\n\n                  break;\n\n                case 42:\n                  47 === e && 42 === D && (33 === f.charCodeAt(t + 2) && (p += f.substring(t, n + 1)), w = \"\", b = 0);\n              }\n          }\n\n          0 === b && (g += w);\n      }\n\n      y = D;\n      D = e;\n      n++;\n    }\n\n    t = p.length;\n\n    if (0 < t) {\n      r = c;\n      if (0 < z && (A = I(2, p, r, d, B, x, t, h, a, h), void 0 !== A && 0 === (p = A).length)) return H + p + G;\n      p = r.join(\",\") + \"{\" + p + \"}\";\n\n      if (0 !== v * C) {\n        2 !== v || L(p, 2) || (C = 0);\n\n        switch (C) {\n          case 111:\n            p = p.replace(ia, \":-moz-$1\") + p;\n            break;\n\n          case 112:\n            p = p.replace(Q, \"::-webkit-input-$1\") + p.replace(Q, \"::-moz-$1\") + p.replace(Q, \":-ms-input-$1\") + p;\n        }\n\n        C = 0;\n      }\n    }\n\n    return H + p + G;\n  }\n\n  function X(d, c, f) {\n    var h = c.trim().split(ja);\n    c = h;\n    var a = h.length,\n        k = d.length;\n\n    switch (k) {\n      case 0:\n      case 1:\n        var b = 0;\n\n        for (d = 0 === k ? \"\" : d[0] + \" \"; b < a; ++b) {\n          c[b] = Z(d, c[b], f, k).trim();\n        }\n\n        break;\n\n      default:\n        var u = b = 0;\n\n        for (c = []; b < a; ++b) {\n          for (var l = 0; l < k; ++l) {\n            c[u++] = Z(d[l] + \" \", h[b], f, k).trim();\n          }\n        }\n\n    }\n\n    return c;\n  }\n\n  function Z(d, c, f) {\n    var h = c.charCodeAt(0);\n    33 > h && (h = (c = c.trim()).charCodeAt(0));\n\n    switch (h) {\n      case 38:\n        return c.replace(F, \"$1\" + d.trim());\n\n      case 58:\n        switch (c.charCodeAt(1)) {\n          case 103:\n            break;\n\n          default:\n            return d.trim() + c.replace(F, \"$1\" + d.trim());\n        }\n\n      default:\n        if (0 < 1 * f && 0 < c.indexOf(\"\\f\")) return c.replace(F, (58 === d.charCodeAt(0) ? \"\" : \"$1\") + d.trim());\n    }\n\n    return d + c;\n  }\n\n  function P(d, c, f, h) {\n    var a = d + \";\",\n        k = 2 * c + 3 * f + 4 * h;\n\n    if (944 === k) {\n      d = a.indexOf(\":\", 9) + 1;\n      var b = a.substring(d, a.length - 1).trim();\n      b = a.substring(0, d).trim() + b + \";\";\n      return 1 === v || 2 === v && L(b, 1) ? \"-webkit-\" + b + b : b;\n    }\n\n    if (0 === v || 2 === v && !L(a, 1)) return a;\n\n    switch (k) {\n      case 1015:\n        return 97 === a.charCodeAt(10) ? \"-webkit-\" + a + a : a;\n\n      case 951:\n        return 116 === a.charCodeAt(3) ? \"-webkit-\" + a + a : a;\n\n      case 963:\n        return 110 === a.charCodeAt(5) ? \"-webkit-\" + a + a : a;\n\n      case 1009:\n        if (100 !== a.charCodeAt(4)) break;\n\n      case 969:\n      case 942:\n        return \"-webkit-\" + a + a;\n\n      case 978:\n        return \"-webkit-\" + a + \"-moz-\" + a + a;\n\n      case 1019:\n      case 983:\n        return \"-webkit-\" + a + \"-moz-\" + a + \"-ms-\" + a + a;\n\n      case 883:\n        return 45 === a.charCodeAt(8) ? \"-webkit-\" + a + a : a;\n\n      case 932:\n        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {\n          case 103:\n            return \"-webkit-box-\" + a.replace(\"-grow\", \"\") + \"-webkit-\" + a + \"-ms-\" + a.replace(\"grow\", \"positive\") + a;\n\n          case 115:\n            return \"-webkit-\" + a + \"-ms-\" + a.replace(\"shrink\", \"negative\") + a;\n\n          case 98:\n            return \"-webkit-\" + a + \"-ms-\" + a.replace(\"basis\", \"preferred-size\") + a;\n        }\n        return \"-webkit-\" + a + \"-ms-\" + a + a;\n\n      case 964:\n        return \"-webkit-\" + a + \"-ms-flex-\" + a + a;\n\n      case 1023:\n        if (99 !== a.charCodeAt(8)) break;\n        b = a.substring(a.indexOf(\":\", 15)).replace(\"flex-\", \"\").replace(\"space-between\", \"justify\");\n        return \"-webkit-box-pack\" + b + \"-webkit-\" + a + \"-ms-flex-pack\" + b + a;\n\n      case 1005:\n        return ka.test(a) ? a.replace(aa, \":-webkit-\") + a.replace(aa, \":-moz-\") + a : a;\n\n      case 1e3:\n        b = a.substring(13).trim();\n        c = b.indexOf(\"-\") + 1;\n\n        switch (b.charCodeAt(0) + b.charCodeAt(c)) {\n          case 226:\n            b = a.replace(G, \"tb\");\n            break;\n\n          case 232:\n            b = a.replace(G, \"tb-rl\");\n            break;\n\n          case 220:\n            b = a.replace(G, \"lr\");\n            break;\n\n          default:\n            return a;\n        }\n\n        return \"-webkit-\" + a + \"-ms-\" + b + a;\n\n      case 1017:\n        if (-1 === a.indexOf(\"sticky\", 9)) break;\n\n      case 975:\n        c = (a = d).length - 10;\n        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(\":\", 7) + 1).trim();\n\n        switch (k = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {\n          case 203:\n            if (111 > b.charCodeAt(8)) break;\n\n          case 115:\n            a = a.replace(b, \"-webkit-\" + b) + \";\" + a;\n            break;\n\n          case 207:\n          case 102:\n            a = a.replace(b, \"-webkit-\" + (102 < k ? \"inline-\" : \"\") + \"box\") + \";\" + a.replace(b, \"-webkit-\" + b) + \";\" + a.replace(b, \"-ms-\" + b + \"box\") + \";\" + a;\n        }\n\n        return a + \";\";\n\n      case 938:\n        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {\n          case 105:\n            return b = a.replace(\"-items\", \"\"), \"-webkit-\" + a + \"-webkit-box-\" + b + \"-ms-flex-\" + b + a;\n\n          case 115:\n            return \"-webkit-\" + a + \"-ms-flex-item-\" + a.replace(ba, \"\") + a;\n\n          default:\n            return \"-webkit-\" + a + \"-ms-flex-line-pack\" + a.replace(\"align-content\", \"\").replace(ba, \"\") + a;\n        }\n        break;\n\n      case 973:\n      case 989:\n        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;\n\n      case 931:\n      case 953:\n        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(\":\") + 1)).charCodeAt(0) ? P(d.replace(\"stretch\", \"fill-available\"), c, f, h).replace(\":fill-available\", \":stretch\") : a.replace(b, \"-webkit-\" + b) + a.replace(b, \"-moz-\" + b.replace(\"fill-\", \"\")) + a;\n        break;\n\n      case 962:\n        if (a = \"-webkit-\" + a + (102 === a.charCodeAt(5) ? \"-ms-\" + a : \"\") + a, 211 === f + h && 105 === a.charCodeAt(13) && 0 < a.indexOf(\"transform\", 10)) return a.substring(0, a.indexOf(\";\", 27) + 1).replace(ma, \"$1-webkit-$2\") + a;\n    }\n\n    return a;\n  }\n\n  function L(d, c) {\n    var f = d.indexOf(1 === c ? \":\" : \"{\"),\n        h = d.substring(0, 3 !== c ? f : 10);\n    f = d.substring(f + 1, d.length - 1);\n    return H(2 !== c ? h : h.replace(na, \"$1\"), f, c);\n  }\n\n  function fa(d, c) {\n    var f = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));\n    return f !== c + \";\" ? f.replace(oa, \" or ($1)\").substring(4) : \"(\" + c + \")\";\n  }\n\n  function I(d, c, f, h, a, k, b, u, l, q) {\n    for (var m = 0, e = c, v; m < z; ++m) {\n      switch (v = R[m].call(y, d, e, f, h, a, k, b, u, l, q)) {\n        case void 0:\n        case !1:\n        case !0:\n        case null:\n          break;\n\n        default:\n          e = v;\n      }\n    }\n\n    if (e !== c) return e;\n  }\n\n  function S(d) {\n    switch (d) {\n      case void 0:\n      case null:\n        z = R.length = 0;\n        break;\n\n      default:\n        switch (d.constructor) {\n          case Array:\n            for (var c = 0, f = d.length; c < f; ++c) {\n              S(d[c]);\n            }\n\n            break;\n\n          case Function:\n            R[z++] = d;\n            break;\n\n          case Boolean:\n            Y = !!d | 0;\n        }\n\n    }\n\n    return S;\n  }\n\n  function T(d) {\n    d = d.prefix;\n    void 0 !== d && (H = null, d ? \"function\" !== typeof d ? v = 1 : (v = 2, H = d) : v = 0);\n    return T;\n  }\n\n  function y(d, c) {\n    if (void 0 !== this && this.constructor === y) return ca(d);\n    var f = d;\n    33 > f.charCodeAt(0) && (f = f.trim());\n    U = f;\n    f = [U];\n\n    if (0 < z) {\n      var h = I(-1, c, f, f, B, x, 0, 0, 0, 0);\n      void 0 !== h && \"string\" === typeof h && (c = h);\n    }\n\n    var a = M(O, f, c, 0, 0);\n    0 < z && (h = I(-2, a, f, f, B, x, a.length, 0, 0, 0), void 0 !== h && (a = h));\n    U = \"\";\n    C = 0;\n    x = B = 1;\n    return a;\n  }\n\n  var da = /^\\0+/g,\n      N = /[\\0\\r\\f]/g,\n      aa = /: */g,\n      ka = /zoo|gra/,\n      ma = /([,: ])(transform)/g,\n      ja = /,\\r+?/g,\n      F = /([\\t\\r\\n ])*\\f?&/g,\n      ha = /@(k\\w+)\\s*(\\S*)\\s*/,\n      Q = /::(place)/g,\n      ia = /:(read-only)/g,\n      G = /[svh]\\w+-[tblr]{2}/,\n      ea = /\\(\\s*(.*)\\s*\\)/g,\n      oa = /([\\s\\S]*?);/g,\n      ba = /-self|flex-/g,\n      na = /[^]*?(:[rp][el]a[\\w-]+)[^]*/,\n      la = /stretch|:\\s*\\w+\\-(?:conte|avail)/,\n      x = 1,\n      B = 1,\n      C = 0,\n      v = 1,\n      O = [],\n      R = [],\n      z = 0,\n      H = null,\n      Y = 0,\n      U = \"\";\n  y.use = S;\n  y.set = T;\n  void 0 !== W && T(W);\n  return y;\n};\n\nexport default V;\n//# sourceMappingURL=index.es.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@emotion/stylis/dist/index.es.js\n// module id = ./node_modules/@emotion/stylis/dist/index.es.js\n// module chunks = 1 5","var index = {\n  animationIterationCount: 1,\n  borderImageOutset: 1,\n  borderImageSlice: 1,\n  borderImageWidth: 1,\n  boxFlex: 1,\n  boxFlexGroup: 1,\n  boxOrdinalGroup: 1,\n  columnCount: 1,\n  columns: 1,\n  flex: 1,\n  flexGrow: 1,\n  flexPositive: 1,\n  flexShrink: 1,\n  flexNegative: 1,\n  flexOrder: 1,\n  gridRow: 1,\n  gridRowEnd: 1,\n  gridRowSpan: 1,\n  gridRowStart: 1,\n  gridColumn: 1,\n  gridColumnEnd: 1,\n  gridColumnSpan: 1,\n  gridColumnStart: 1,\n  fontWeight: 1,\n  lineHeight: 1,\n  opacity: 1,\n  order: 1,\n  orphans: 1,\n  tabSize: 1,\n  widows: 1,\n  zIndex: 1,\n  zoom: 1,\n  WebkitLineClamp: 1,\n  // SVG-related properties\n  fillOpacity: 1,\n  floodOpacity: 1,\n  stopOpacity: 1,\n  strokeDasharray: 1,\n  strokeDashoffset: 1,\n  strokeMiterlimit: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1\n};\n\nexport default index;\n//# sourceMappingURL=index.es.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@emotion/unitless/dist/index.es.js\n// module id = ./node_modules/@emotion/unitless/dist/index.es.js\n// module chunks = 1 5","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MDXTag = undefined;\n\nvar _mdxTag = require('./mdx-tag');\n\nvar _mdxTag2 = _interopRequireDefault(_mdxTag);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.MDXTag = _mdxTag2.default;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@mdx-js/tag/dist/index.js\n// module id = ./node_modules/@mdx-js/tag/dist/index.js\n// module chunks = 5","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar defaults = {\n  inlineCode: 'code',\n  wrapper: 'div'\n};\n\nexports.default = function (props) {\n  var name = props.name,\n      parentName = props.parentName,\n      _props$props = props.props,\n      childProps = _props$props === undefined ? {} : _props$props,\n      children = props.children,\n      _props$components = props.components,\n      components = _props$components === undefined ? {} : _props$components;\n\n  var Component = components[parentName + '.' + name] || components[name] || defaults[name] || name;\n  return _react2.default.createElement(\n    Component,\n    childProps,\n    children\n  );\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@mdx-js/tag/dist/mdx-tag.js\n// module id = ./node_modules/@mdx-js/tag/dist/mdx-tag.js\n// module chunks = 5","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== 'production') {\n  var invariant = require('fbjs/lib/invariant');\n  var warning = require('fbjs/lib/warning');\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = checkPropTypes;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@mdx-js/tag/node_modules/prop-types/checkPropTypes.js\n// module id = ./node_modules/@mdx-js/tag/node_modules/prop-types/checkPropTypes.js\n// module chunks = 5","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\nvar assign = require('object-assign');\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\nvar checkPropTypes = require('./checkPropTypes');\n\nmodule.exports = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker,\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (process.env.NODE_ENV !== 'production') {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          invariant(\n            false,\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n          if (\n            !manualPropTypeCallCache[cacheKey] &&\n            // Avoid spamming the console because they are often not actionable except for lib authors\n            manualPropTypeWarningCount < 3\n          ) {\n            warning(\n              false,\n              'You are manually calling a React.PropTypes validation ' +\n              'function for the `%s` prop on `%s`. This is deprecated ' +\n              'and will throw in the standalone `prop-types` package. ' +\n              'You may be seeing this warning due to a third-party PropTypes ' +\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',\n              propFullName,\n              componentName\n            );\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunction.thatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n      return emptyFunction.thatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues);\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (propValue.hasOwnProperty(key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n      return emptyFunction.thatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (typeof checker !== 'function') {\n        warning(\n          false,\n          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n          'received %s at index %s.',\n          getPostfixForTypeWarning(checker),\n          i\n        );\n        return emptyFunction.thatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          continue;\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      // We need to check all keys in case some are required but missing from\n      // props.\n      var allKeys = assign({}, props[propName], shapeTypes);\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          return new PropTypeError(\n            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n            '\\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')\n          );\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n      default:\n        return type;\n    }\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@mdx-js/tag/node_modules/prop-types/factoryWithTypeCheckers.js\n// module id = ./node_modules/@mdx-js/tag/node_modules/prop-types/factoryWithTypeCheckers.js\n// module chunks = 5","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@mdx-js/tag/node_modules/prop-types/index.js\n// module id = ./node_modules/@mdx-js/tag/node_modules/prop-types/index.js\n// module chunks = 5","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@mdx-js/tag/node_modules/prop-types/lib/ReactPropTypesSecret.js\n// module id = ./node_modules/@mdx-js/tag/node_modules/prop-types/lib/ReactPropTypesSecret.js\n// module chunks = 5","'use strict'\r\n\r\nvar XRegExp = require('xregexp').XRegExp\r\n\r\nvar minors = {}\r\nrequire('title-case-minors').forEach(function (m) {\r\n  minors[m.toLowerCase()] = null\r\n})\r\n\r\nvar alnum = '[\\\\p{L}\\\\p{N}]'\r\nvar alnumRE = XRegExp('^' + alnum + '$')\r\nvar wordRE = XRegExp('\\\\b((' + alnum + ')(' + alnum + '*))', 'g')\r\n\r\nvar replacer = function (str, whitelist) {\r\n  var fn = function (match, word, first, rest, offset) {\r\n    var shouldCapitalize\r\n    if (offset > 1 &&\r\n        isApostrophe(fn.string[offset - 1]) &&\r\n        isAlphanumeric(fn.string[offset - 2])) {\r\n      // If the match is preceded by an alphanumeric character and an\r\n      // apostrophe, we are dealing with a genitive. Do not capitalize.\r\n      shouldCapitalize = false\r\n    } else if (fn.firstOffset < 0) {\r\n      // The first match is always capitalized, except if it is whitelisted.\r\n      shouldCapitalize = true\r\n      // Hold on to the match's position.\r\n      fn.firstOffset = offset\r\n    } else {\r\n      // Only capitalize if the word isn't a minor.\r\n      shouldCapitalize = !minors.hasOwnProperty(word.toLowerCase())\r\n    }\r\n\r\n    if (!shouldCapitalize) {\r\n      // Keep the position of the last word we encountered, because we need to\r\n      // capitalize it when we are done.\r\n      fn.lastOffset = offset\r\n      // Don't touch the word for now.\r\n      return word\r\n    }\r\n\r\n    // Even if this is the last word, we are already about to capitalize it, so\r\n    // we don't need to hold on to its position.\r\n    fn.lastOffset = -1\r\n\r\n    // Perform capitalization unless the word is whitelisted.\r\n    return whitelist.hasOwnProperty(word) ? word :\r\n      first.toUpperCase() + rest\r\n  }\r\n  fn.string = str\r\n  fn.firstOffset = -1\r\n  fn.lastOffset = -1\r\n  return fn\r\n}\r\n\r\nvar isApostrophe = function (ch) {\r\n  return ch === \"'\" || ch === '’'\r\n}\r\n\r\nvar isAlphanumeric = function (ch) {\r\n  return alnumRE.test(ch)\r\n}\r\n\r\nmodule.exports = function (str, options) {\r\n  if (typeof str !== 'string' || str.length === 0) {\r\n    return ''\r\n  }\r\n\r\n  var whitelist = {}\r\n  if (typeof options === 'object' && options !== null && options.whitelist) {\r\n    options.whitelist.forEach(function (word) {\r\n      whitelist[word] = null\r\n    })\r\n  }\r\n\r\n  var repl = replacer(str, whitelist)\r\n\r\n  // Capitalize all words that aren't minor words.\r\n  var result = str.replace(wordRE, repl)\r\n\r\n  // Capitalize the last word if it wasn't already processed.\r\n  if (repl.lastOffset >= 0 && repl.firstOffset !== repl.lastOffset) {\r\n    result = result.substring(0, repl.lastOffset) +\r\n      result[repl.lastOffset].toUpperCase() +\r\n      result.substring(repl.lastOffset + 1)\r\n  }\r\n\r\n  return result\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/chicago-capitalize/index.js\n// module id = ./node_modules/chicago-capitalize/index.js\n// module chunks = 5","import PropTypes from 'prop-types';\nimport isPropValid from '@emotion/is-prop-valid';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar channel = '__EMOTION_THEMING__';\n\n// https://github.com/styled-components/styled-components/blob/e05b3fe247e9d956bcde786cec376e32afb85bca/src/utils/create-broadcast.js\n\nvar _contextTypes;\n\nvar contextTypes = (_contextTypes = {}, _contextTypes[channel] = PropTypes.object, _contextTypes);\n\nfunction setTheme(theme) {\n  this.setState({\n    theme: theme\n  });\n}\nvar testPickPropsOnStringTag = isPropValid;\nvar testPickPropsOnComponent = function testPickPropsOnComponent(key) {\n  return key !== 'theme' && key !== 'innerRef';\n};\nvar testAlwaysTrue = function testAlwaysTrue() {\n  return true;\n};\nvar pickAssign = function pickAssign(testFn, target) {\n  var i = 2;\n  var length = arguments.length;\n\n  for (; i < length; i++) {\n    var source = arguments[i];\n\n    var _key = void 0;\n\n    for (_key in source) {\n      if (testFn(_key)) {\n        target[_key] = source[_key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _componentWillMount() {\n  if (this.context[channel] !== undefined) {\n    this.unsubscribe = this.context[channel].subscribe(setTheme.bind(this));\n  }\n}\n\nfunction _componentWillUnmount() {\n  if (this.unsubscribe !== undefined) {\n    this.context[channel].unsubscribe(this.unsubscribe);\n  }\n}\n\nfunction _get(target, property) {\n  switch (property) {\n    // react-hot-loader tries to access this stuff\n    case '__proto__':\n    case 'name':\n    case 'prototype':\n    case 'displayName':\n      {\n        return target[property];\n      }\n\n    default:\n      {\n        throw new Error(\"You're trying to use the styled shorthand without babel-plugin-emotion.\" + (\"\\nPlease install and setup babel-plugin-emotion or use the function call syntax(`styled('\" + property + \"')` instead of `styled.\" + property + \"`)\"));\n      }\n  }\n}\n\nfunction createEmotionStyled(emotion, view) {\n  var _createStyled = function createStyled(tag, options) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (tag === undefined) {\n        throw new Error('You are trying to create a styled element with an undefined component.\\nYou may have forgotten to import it.');\n      }\n    }\n\n    var staticClassName;\n    var identifierName;\n    var stableClassName;\n    var shouldForwardProp;\n\n    if (options !== undefined) {\n      staticClassName = options.e;\n      identifierName = options.label;\n      stableClassName = options.target;\n      shouldForwardProp = options.shouldForwardProp;\n    }\n\n    var isReal = tag.__emotion_real === tag;\n    var baseTag = staticClassName === undefined ? isReal && tag.__emotion_base || tag : tag;\n\n    if (typeof shouldForwardProp !== 'function') {\n      shouldForwardProp = typeof baseTag === 'string' && baseTag.charAt(0) === baseTag.charAt(0).toLowerCase() ? testPickPropsOnStringTag : testPickPropsOnComponent;\n    }\n\n    function _value() {\n      if (process.env.NODE_ENV !== 'production' && stableClassName === undefined) {\n        return 'NO_COMPONENT_SELECTOR';\n      } // $FlowFixMe\n\n\n      return \".\" + stableClassName;\n    }\n\n    return function () {\n      var args = arguments;\n      var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];\n\n      if (identifierName !== undefined) {\n        styles.push(\"label:\" + identifierName + \";\");\n      }\n\n      if (staticClassName === undefined) {\n        if (args[0] == null || args[0].raw === undefined) {\n          styles.push.apply(styles, args);\n        } else {\n          styles.push(args[0][0]);\n          var len = args.length;\n          var i = 1;\n\n          for (; i < len; i++) {\n            styles.push(args[i], args[0][i]);\n          }\n        }\n      }\n\n      function _render() {\n        var props = this.props,\n            state = this.state;\n        this.mergedProps = pickAssign(testAlwaysTrue, {}, props, {\n          theme: state !== null && state.theme || props.theme || {}\n        });\n        var className = '';\n        var classInterpolations = [];\n\n        if (props.className) {\n          if (staticClassName === undefined) {\n            className += emotion.getRegisteredStyles(classInterpolations, props.className);\n          } else {\n            className += props.className + \" \";\n          }\n        }\n\n        if (staticClassName === undefined) {\n          className += emotion.css.apply(this, styles.concat(classInterpolations));\n        } else {\n          className += staticClassName;\n        }\n\n        if (stableClassName !== undefined) {\n          className += \" \" + stableClassName;\n        }\n\n        return view.createElement(baseTag, // $FlowFixMe\n        pickAssign(shouldForwardProp, {}, props, {\n          className: className,\n          ref: props.innerRef\n        }));\n      }\n\n      var Styled =\n      /*#__PURE__*/\n      function (_view$Component) {\n        _inheritsLoose(Styled, _view$Component);\n\n        function Styled() {\n          return _view$Component.apply(this, arguments) || this;\n        }\n\n        var _proto = Styled.prototype;\n        _proto.componentWillMount = _componentWillMount;\n        _proto.componentWillUnmount = _componentWillUnmount;\n        _proto.render = _render;\n        return Styled;\n      }(view.Component);\n\n      Styled.displayName = identifierName !== undefined ? identifierName : \"Styled(\" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + \")\";\n      Styled.contextTypes = contextTypes;\n      Styled.__emotion_styles = styles;\n      Styled.__emotion_base = baseTag;\n      Styled.__emotion_real = Styled;\n      Object.defineProperty(Styled, 'toString', {\n        enumerable: false,\n        value: _value\n      });\n\n      Styled.withComponent = function (nextTag, nextOptions) {\n        return _createStyled(nextTag, nextOptions !== undefined ? // $FlowFixMe\n        pickAssign(testAlwaysTrue, {}, options, nextOptions) : options).apply(void 0, styles);\n      };\n\n      return Styled;\n    };\n  };\n\n  if (process.env.NODE_ENV !== 'production' && typeof Proxy !== 'undefined') {\n    _createStyled = new Proxy(_createStyled, {\n      get: _get\n    });\n  }\n\n  return _createStyled;\n}\n\nexport default createEmotionStyled;\n//# sourceMappingURL=index.es.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/create-emotion-styled/dist/index.es.js\n// module id = ./node_modules/create-emotion-styled/dist/index.es.js\n// module chunks = 5","import hashString from '@emotion/hash';\nimport Stylis from '@emotion/stylis';\nimport stylisRuleSheet from 'stylis-rule-sheet';\nimport memoize from '@emotion/memoize';\nimport unitless from '@emotion/unitless';\n\nvar hyphenateRegex = /[A-Z]|^ms/g;\nvar processStyleName = memoize(function (styleName) {\n  return styleName.replace(hyphenateRegex, '-$&').toLowerCase();\n});\nvar processStyleValue = function processStyleValue(key, value) {\n  if (value == null || typeof value === 'boolean') {\n    return '';\n  }\n\n  if (unitless[key] !== 1 && key.charCodeAt(1) !== 45 && // custom properties\n  !isNaN(value) && value !== 0) {\n    return value + 'px';\n  }\n\n  return value;\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  var contentValuePattern = /(attr|calc|counters?|url)\\(/;\n  var contentValues = ['normal', 'none', 'counter', 'open-quote', 'close-quote', 'no-open-quote', 'no-close-quote', 'initial', 'inherit', 'unset'];\n  var oldProcessStyleValue = processStyleValue;\n\n  processStyleValue = function processStyleValue(key, value) {\n    if (key === 'content') {\n      if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '\"' && value.charAt(0) !== \"'\")) {\n        console.error(\"You seem to be using a value for 'content' without quotes, try replacing it with `content: '\\\"\" + value + \"\\\"'`\");\n      }\n    }\n\n    return oldProcessStyleValue(key, value);\n  };\n}\n\nvar classnames = function classnames(args) {\n  var len = args.length;\n  var i = 0;\n  var cls = '';\n\n  for (; i < len; i++) {\n    var arg = args[i];\n    if (arg == null) continue;\n    var toAdd = void 0;\n\n    switch (typeof arg) {\n      case 'boolean':\n        break;\n\n      case 'function':\n        toAdd = classnames([arg()]);\n        break;\n\n      case 'object':\n        {\n          if (Array.isArray(arg)) {\n            toAdd = classnames(arg);\n          } else {\n            toAdd = '';\n\n            for (var k in arg) {\n              if (arg[k] && k) {\n                toAdd && (toAdd += ' ');\n                toAdd += k;\n              }\n            }\n          }\n\n          break;\n        }\n\n      default:\n        {\n          toAdd = arg;\n        }\n    }\n\n    if (toAdd) {\n      cls && (cls += ' ');\n      cls += toAdd;\n    }\n  }\n\n  return cls;\n};\nvar isBrowser = typeof document !== 'undefined';\n\n/*\n\nhigh performance StyleSheet for css-in-js systems\n\n- uses multiple style tags behind the scenes for millions of rules\n- uses `insertRule` for appending in production for *much* faster performance\n- 'polyfills' on server side\n\n// usage\n\nimport StyleSheet from 'glamor/lib/sheet'\nlet styleSheet = new StyleSheet()\n\nstyleSheet.inject()\n- 'injects' the stylesheet into the page (or into memory if on server)\n\nstyleSheet.insert('#box { border: 1px solid red; }')\n- appends a css rule into the stylesheet\n\nstyleSheet.flush()\n- empties the stylesheet of all its contents\n\n*/\n// $FlowFixMe\nfunction sheetForTag(tag) {\n  if (tag.sheet) {\n    // $FlowFixMe\n    return tag.sheet;\n  } // this weirdness brought to you by firefox\n\n\n  for (var i = 0; i < document.styleSheets.length; i++) {\n    if (document.styleSheets[i].ownerNode === tag) {\n      // $FlowFixMe\n      return document.styleSheets[i];\n    }\n  }\n}\n\nfunction makeStyleTag(opts) {\n  var tag = document.createElement('style');\n  tag.setAttribute('data-emotion', opts.key || '');\n\n  if (opts.nonce !== undefined) {\n    tag.setAttribute('nonce', opts.nonce);\n  }\n\n  tag.appendChild(document.createTextNode('')) // $FlowFixMe\n  ;\n  (opts.container !== undefined ? opts.container : document.head).appendChild(tag);\n  return tag;\n}\n\nfunction _StyleSheet(options) {\n  this.isSpeedy = process.env.NODE_ENV === 'production'; // the big drawback here is that the css won't be editable in devtools\n\n  this.tags = [];\n  this.ctr = 0;\n  this.opts = options;\n}\n\nfunction _inject() {\n  if (this.injected) {\n    throw new Error('already injected!');\n  }\n\n  this.tags[0] = makeStyleTag(this.opts);\n  this.injected = true;\n}\n\nfunction _speedy(bool) {\n  if (this.ctr !== 0) {\n    // cannot change speedy mode after inserting any rule to sheet. Either call speedy(${bool}) earlier in your app, or call flush() before speedy(${bool})\n    throw new Error(\"cannot change speedy now\");\n  }\n\n  this.isSpeedy = !!bool;\n}\n\nfunction _insert(rule, sourceMap) {\n  // this is the ultrafast version, works across browsers\n  if (this.isSpeedy) {\n    var tag = this.tags[this.tags.length - 1];\n    var sheet = sheetForTag(tag);\n\n    try {\n      sheet.insertRule(rule, sheet.cssRules.length);\n    } catch (e) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('illegal rule', rule); // eslint-disable-line no-console\n      }\n    }\n  } else {\n    var _tag = makeStyleTag(this.opts);\n\n    this.tags.push(_tag);\n\n    _tag.appendChild(document.createTextNode(rule + (sourceMap || '')));\n  }\n\n  this.ctr++;\n\n  if (this.ctr % 65000 === 0) {\n    this.tags.push(makeStyleTag(this.opts));\n  }\n}\n\nfunction _ref(tag) {\n  return tag.parentNode.removeChild(tag);\n}\n\nfunction _flush() {\n  // $FlowFixMe\n  this.tags.forEach(_ref);\n  this.tags = [];\n  this.ctr = 0; // todo - look for remnants in document.styleSheets\n\n  this.injected = false;\n}\n\nvar StyleSheet =\n/*#__PURE__*/\nfunction () {\n  var _proto = _StyleSheet.prototype;\n  _proto.inject = _inject;\n  _proto.speedy = _speedy;\n  _proto.insert = _insert;\n  _proto.flush = _flush;\n  return _StyleSheet;\n}();\n\nfunction createEmotion(context, options) {\n  if (context.__SECRET_EMOTION__ !== undefined) {\n    return context.__SECRET_EMOTION__;\n  }\n\n  if (options === undefined) options = {};\n  var key = options.key || 'css';\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (/[^a-z-]/.test(key)) {\n      throw new Error(\"Emotion key must only contain lower case alphabetical characters and - but \\\"\" + key + \"\\\" was passed\");\n    }\n  }\n\n  var current;\n\n  function insertRule(rule) {\n    current += rule;\n\n    if (isBrowser) {\n      sheet.insert(rule, currentSourceMap);\n    }\n  }\n\n  var insertionPlugin = stylisRuleSheet(insertRule);\n  var stylisOptions;\n\n  if (options.prefix !== undefined) {\n    stylisOptions = {\n      prefix: options.prefix\n    };\n  }\n\n  var caches = {\n    registered: {},\n    inserted: {},\n    nonce: options.nonce,\n    key: key\n  };\n  var sheet = new StyleSheet(options);\n\n  if (isBrowser) {\n    // 🚀\n    sheet.inject();\n  }\n\n  var stylis = new Stylis(stylisOptions);\n  stylis.use(options.stylisPlugins)(insertionPlugin);\n  var currentSourceMap = '';\n\n  function handleInterpolation(interpolation, couldBeSelectorInterpolation) {\n    if (interpolation == null) {\n      return '';\n    }\n\n    switch (typeof interpolation) {\n      case 'boolean':\n        return '';\n\n      case 'function':\n        if (interpolation.__emotion_styles !== undefined) {\n          var selector = interpolation.toString();\n\n          if (selector === 'NO_COMPONENT_SELECTOR' && process.env.NODE_ENV !== 'production') {\n            throw new Error('Component selectors can only be used in conjunction with babel-plugin-emotion.');\n          }\n\n          return selector;\n        }\n\n        return handleInterpolation.call(this, this === undefined ? interpolation() : // $FlowFixMe\n        interpolation(this.mergedProps, this.context), couldBeSelectorInterpolation);\n\n      case 'object':\n        return createStringFromObject.call(this, interpolation);\n\n      default:\n        var cached = caches.registered[interpolation];\n        return couldBeSelectorInterpolation === false && cached !== undefined ? cached : interpolation;\n    }\n  }\n\n  var objectToStringCache = new WeakMap();\n\n  function createStringFromObject(obj) {\n    if (objectToStringCache.has(obj)) {\n      // $FlowFixMe\n      return objectToStringCache.get(obj);\n    }\n\n    var string = '';\n\n    function _ref(interpolation) {\n      string += handleInterpolation.call(this, interpolation, false);\n    }\n\n    function _ref3(key) {\n      function _ref2(value) {\n        string += processStyleName(key) + \":\" + processStyleValue(key, value) + \";\";\n      }\n\n      if (typeof obj[key] !== 'object') {\n        if (caches.registered[obj[key]] !== undefined) {\n          string += key + \"{\" + caches.registered[obj[key]] + \"}\";\n        } else {\n          string += processStyleName(key) + \":\" + processStyleValue(key, obj[key]) + \";\";\n        }\n      } else {\n        if (key === 'NO_COMPONENT_SELECTOR' && process.env.NODE_ENV !== 'production') {\n          throw new Error('Component selectors can only be used in conjunction with babel-plugin-emotion.');\n        }\n\n        if (Array.isArray(obj[key]) && typeof obj[key][0] === 'string' && caches.registered[obj[key][0]] === undefined) {\n          obj[key].forEach(_ref2);\n        } else {\n          string += key + \"{\" + handleInterpolation.call(this, obj[key], false) + \"}\";\n        }\n      }\n    }\n\n    if (Array.isArray(obj)) {\n      obj.forEach(_ref, this);\n    } else {\n      Object.keys(obj).forEach(_ref3, this);\n    }\n\n    objectToStringCache.set(obj, string);\n    return string;\n  }\n\n  var name;\n  var stylesWithLabel;\n  var labelPattern = /label:\\s*([^\\s;\\n{]+)\\s*;/g;\n\n  var createStyles = function createStyles(strings) {\n    var stringMode = true;\n    var styles = '';\n    var identifierName = '';\n\n    if (strings == null || strings.raw === undefined) {\n      stringMode = false;\n      styles += handleInterpolation.call(this, strings, false);\n    } else {\n      styles += strings[0];\n    }\n\n    for (var _len = arguments.length, interpolations = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      interpolations[_key - 1] = arguments[_key];\n    }\n\n    interpolations.forEach(function (interpolation, i) {\n      styles += handleInterpolation.call(this, interpolation, styles.charCodeAt(styles.length - 1) === 46 // .\n      );\n\n      if (stringMode === true && strings[i + 1] !== undefined) {\n        styles += strings[i + 1];\n      }\n    }, this);\n    stylesWithLabel = styles;\n    styles = styles.replace(labelPattern, function (match, p1) {\n      identifierName += \"-\" + p1;\n      return '';\n    });\n    name = hashString(styles + identifierName) + identifierName;\n    return styles;\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    var sourceMapRegEx = /\\/\\*#\\ssourceMappingURL=data:application\\/json;\\S+\\s+\\*\\//;\n    var oldStylis = stylis;\n\n    stylis = function stylis(selector, styles) {\n      var result = sourceMapRegEx.exec(styles);\n      currentSourceMap = result ? result[0] : '';\n      oldStylis(selector, styles);\n      currentSourceMap = '';\n    };\n  }\n\n  function insert(scope, styles) {\n    if (caches.inserted[name] === undefined) {\n      current = '';\n      stylis(scope, styles);\n      caches.inserted[name] = current;\n    }\n  }\n\n  var css = function css() {\n    var styles = createStyles.apply(this, arguments);\n    var selector = key + \"-\" + name;\n\n    if (caches.registered[selector] === undefined) {\n      caches.registered[selector] = stylesWithLabel;\n    }\n\n    insert(\".\" + selector, styles);\n    return selector;\n  };\n\n  var keyframes = function keyframes() {\n    var styles = createStyles.apply(this, arguments);\n    var animation = \"animation-\" + name;\n    insert('', \"@keyframes \" + animation + \"{\" + styles + \"}\");\n    return animation;\n  };\n\n  var injectGlobal = function injectGlobal() {\n    var styles = createStyles.apply(this, arguments);\n    insert('', styles);\n  };\n\n  function getRegisteredStyles(registeredStyles, classNames) {\n    var rawClassName = '';\n    classNames.split(' ').forEach(function (className) {\n      if (caches.registered[className] !== undefined) {\n        registeredStyles.push(className);\n      } else {\n        rawClassName += className + \" \";\n      }\n    });\n    return rawClassName;\n  }\n\n  function merge(className, sourceMap) {\n    var registeredStyles = [];\n    var rawClassName = getRegisteredStyles(registeredStyles, className);\n\n    if (registeredStyles.length < 2) {\n      return className;\n    }\n\n    return rawClassName + css(registeredStyles, sourceMap);\n  }\n\n  function cx() {\n    for (var _len2 = arguments.length, classNames = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      classNames[_key2] = arguments[_key2];\n    }\n\n    return merge(classnames(classNames));\n  }\n\n  function hydrateSingleId(id) {\n    caches.inserted[id] = true;\n  }\n\n  function hydrate(ids) {\n    ids.forEach(hydrateSingleId);\n  }\n\n  function flush() {\n    if (isBrowser) {\n      sheet.flush();\n      sheet.inject();\n    }\n\n    caches.inserted = {};\n    caches.registered = {};\n  }\n\n  function _ref4(node) {\n    // $FlowFixMe\n    sheet.tags[0].parentNode.insertBefore(node, sheet.tags[0]); // $FlowFixMe\n\n    node.getAttribute(\"data-emotion-\" + key).split(' ').forEach(hydrateSingleId);\n  }\n\n  if (isBrowser) {\n    var chunks = document.querySelectorAll(\"[data-emotion-\" + key + \"]\");\n    Array.prototype.forEach.call(chunks, _ref4);\n  }\n\n  var emotion = {\n    flush: flush,\n    hydrate: hydrate,\n    cx: cx,\n    merge: merge,\n    getRegisteredStyles: getRegisteredStyles,\n    injectGlobal: injectGlobal,\n    keyframes: keyframes,\n    css: css,\n    sheet: sheet,\n    caches: caches\n  };\n  context.__SECRET_EMOTION__ = emotion;\n  return emotion;\n}\n\nexport default createEmotion;\n//# sourceMappingURL=index.es.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/create-emotion/dist/index.es.js\n// module id = ./node_modules/create-emotion/dist/index.es.js\n// module chunks = 1 5","(function (factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? (module['exports'] = factory()) :\n\t\ttypeof define === 'function' && define['amd'] ? define(factory()) :\n\t\t\t(window['stylisRuleSheet'] = factory())\n}(function () {\n\n\t'use strict'\n\n\treturn function (insertRule) {\n\t\tvar delimiter = '/*|*/'\n\t\tvar needle = delimiter+'}'\n\n\t\tfunction toSheet (block) {\n\t\t\tif (block)\n\t\t\t\ttry {\n\t\t\t\t\tinsertRule(block + '}')\n\t\t\t\t} catch (e) {}\n\t\t}\n\n\t\treturn function ruleSheet (context, content, selectors, parents, line, column, length, ns, depth, at) {\n\t\t\tswitch (context) {\n\t\t\t\t// property\n\t\t\t\tcase 1:\n\t\t\t\t\t// @import\n\t\t\t\t\tif (depth === 0 && content.charCodeAt(0) === 64)\n\t\t\t\t\t\treturn insertRule(content+';'), ''\n\t\t\t\t\tbreak\n\t\t\t\t// selector\n\t\t\t\tcase 2:\n\t\t\t\t\tif (ns === 0)\n\t\t\t\t\t\treturn content + delimiter\n\t\t\t\t\tbreak\n\t\t\t\t// at-rule\n\t\t\t\tcase 3:\n\t\t\t\t\tswitch (ns) {\n\t\t\t\t\t\t// @font-face, @page\n\t\t\t\t\t\tcase 102:\n\t\t\t\t\t\tcase 112:\n\t\t\t\t\t\t\treturn insertRule(selectors[0]+content), ''\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn content + (at === 0 ? delimiter : '')\n\t\t\t\t\t}\n\t\t\t\tcase -2:\n\t\t\t\t\tcontent.split(needle).forEach(toSheet)\n\t\t\t}\n\t\t}\n\t}\n}))\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/create-emotion/node_modules/stylis-rule-sheet/index.js\n// module id = ./node_modules/create-emotion/node_modules/stylis-rule-sheet/index.js\n// module chunks = 1 5","import createEmotion from 'create-emotion';\n\nvar context = typeof global !== 'undefined' ? global : {};\n\nvar _createEmotion = createEmotion(context);\nvar flush = _createEmotion.flush;\nvar hydrate = _createEmotion.hydrate;\nvar cx = _createEmotion.cx;\nvar merge = _createEmotion.merge;\nvar getRegisteredStyles = _createEmotion.getRegisteredStyles;\nvar injectGlobal = _createEmotion.injectGlobal;\nvar keyframes = _createEmotion.keyframes;\nvar css = _createEmotion.css;\nvar sheet = _createEmotion.sheet;\nvar caches = _createEmotion.caches;\n\nexport { flush, hydrate, cx, merge, getRegisteredStyles, injectGlobal, keyframes, css, sheet, caches };\n//# sourceMappingURL=index.es.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/emotion/dist/index.es.js\n// module id = ./node_modules/emotion/dist/index.es.js\n// module chunks = 1 5","module.exports = require('./dist/lib/head')\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/next/head.js\n// module id = ./node_modules/next/head.js\n// module chunks = 5","import React from 'react';\nimport * as emotion from 'emotion';\nimport createEmotionStyled from 'create-emotion-styled';\n\nvar index = createEmotionStyled(emotion, React);\n\nexport default index;\nexport * from 'emotion';\n//# sourceMappingURL=index.es.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/react-emotion/dist/index.es.js\n// module id = ./node_modules/react-emotion/dist/index.es.js\n// module chunks = 5","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"prop-types\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\", \"prop-types\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"react\"), require(\"prop-types\")) : factory(root[\"react\"], root[\"prop-types\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 2);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = warn;\nfunction warn(s) {\n  console.warn('[react-ga]', s);\n}\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = trim;\n// GA strings need to have leading/trailing whitespace trimmed, and not all\n// browsers have String.prototoype.trim().\n\nfunction trim(s) {\n  return s.replace(/^\\s+|\\s+$/g, '');\n}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.testModeAPI = exports.OutboundLink = exports.plugin = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.initialize = initialize;\nexports.ga = ga;\nexports.set = set;\nexports.send = send;\nexports.pageview = pageview;\nexports.modalview = modalview;\nexports.timing = timing;\nexports.event = event;\nexports.exception = exception;\nexports.outboundLink = outboundLink;\n\nvar _format2 = __webpack_require__(3);\n\nvar _format3 = _interopRequireDefault(_format2);\n\nvar _removeLeadingSlash = __webpack_require__(6);\n\nvar _removeLeadingSlash2 = _interopRequireDefault(_removeLeadingSlash);\n\nvar _trim = __webpack_require__(1);\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _loadGA = __webpack_require__(7);\n\nvar _loadGA2 = _interopRequireDefault(_loadGA);\n\nvar _warn = __webpack_require__(0);\n\nvar _warn2 = _interopRequireDefault(_warn);\n\nvar _log = __webpack_require__(8);\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _testModeAPI = __webpack_require__(9);\n\nvar _testModeAPI2 = _interopRequireDefault(_testModeAPI);\n\nvar _OutboundLink = __webpack_require__(10);\n\nvar _OutboundLink2 = _interopRequireDefault(_OutboundLink);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**\n                                                                                                                                                                                                     * React Google Analytics Module\n                                                                                                                                                                                                     *\n                                                                                                                                                                                                     * @package react-ga\n                                                                                                                                                                                                     * @author  Adam Lofting <adam@mozillafoundation.org>\n                                                                                                                                                                                                     *          Atul Varma <atul@mozillafoundation.org>\n                                                                                                                                                                                                     */\n\n/**\n * Utilities\n */\n\n\nvar _debug = false;\nvar _titleCase = true;\nvar _testMode = false;\nvar _alwaysSendToDefaultTracker = true;\n\nvar internalGa = function internalGa() {\n  var _window;\n\n  if (_testMode) return _testModeAPI2.default.ga.apply(_testModeAPI2.default, arguments);\n  if (!window.ga) return (0, _warn2.default)('ReactGA.initialize must be called first or GoogleAnalytics should be loaded manually');\n  return (_window = window).ga.apply(_window, arguments);\n};\n\nfunction _format(s) {\n  return (0, _format3.default)(s, _titleCase);\n}\n\nfunction _gaCommand(trackerNames) {\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  var command = args[0];\n  if (typeof internalGa === 'function') {\n    if (typeof command !== 'string') {\n      (0, _warn2.default)('ga command must be a string');\n      return;\n    }\n\n    if (_alwaysSendToDefaultTracker || !Array.isArray(trackerNames)) internalGa.apply(undefined, args);\n    if (Array.isArray(trackerNames)) {\n      trackerNames.forEach(function (name) {\n        internalGa.apply(undefined, _toConsumableArray([name + '.' + command].concat(args.slice(1))));\n      });\n    }\n  }\n}\n\nfunction _initialize(gaTrackingID, options) {\n  if (!gaTrackingID) {\n    (0, _warn2.default)('gaTrackingID is required in initialize()');\n    return;\n  }\n\n  if (options) {\n    if (options.debug && options.debug === true) {\n      _debug = true;\n    }\n\n    if (options.titleCase === false) {\n      _titleCase = false;\n    }\n  }\n\n  if (options && options.gaOptions) {\n    internalGa('create', gaTrackingID, options.gaOptions);\n  } else {\n    internalGa('create', gaTrackingID, 'auto');\n  }\n}\n\nfunction initialize(configsOrTrackingId, options) {\n  if (options && options.testMode === true) {\n    _testMode = true;\n  } else {\n    if (typeof window === 'undefined') {\n      return false;\n    }\n\n    (0, _loadGA2.default)(options);\n  }\n\n  _alwaysSendToDefaultTracker = options && typeof options.alwaysSendToDefaultTracker === 'boolean' ? options.alwaysSendToDefaultTracker : true;\n\n  if (Array.isArray(configsOrTrackingId)) {\n    configsOrTrackingId.forEach(function (config) {\n      if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) !== 'object') {\n        (0, _warn2.default)('All configs must be an object');\n        return;\n      }\n      _initialize(config.trackingId, config);\n    });\n  } else {\n    _initialize(configsOrTrackingId, options);\n  }\n  return true;\n}\n\n/**\n * ga:\n * Returns the original GA object.\n */\nfunction ga() {\n  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  if (args.length > 0) {\n    internalGa.apply(undefined, args);\n    if (_debug) {\n      (0, _log2.default)('called ga(\\'arguments\\');');\n      (0, _log2.default)('with arguments: ' + JSON.stringify(args));\n    }\n  }\n\n  return window.ga;\n}\n\n/**\n * set:\n * GA tracker set method\n * @param {Object} fieldsObject - a field/value pair or a group of field/value pairs on the tracker\n * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on\n */\nfunction set(fieldsObject, trackerNames) {\n  if (!fieldsObject) {\n    (0, _warn2.default)('`fieldsObject` is required in .set()');\n    return;\n  }\n\n  if ((typeof fieldsObject === 'undefined' ? 'undefined' : _typeof(fieldsObject)) !== 'object') {\n    (0, _warn2.default)('Expected `fieldsObject` arg to be an Object');\n    return;\n  }\n\n  if (Object.keys(fieldsObject).length === 0) {\n    (0, _warn2.default)('empty `fieldsObject` given to .set()');\n  }\n\n  _gaCommand(trackerNames, 'set', fieldsObject);\n\n  if (_debug) {\n    (0, _log2.default)('called ga(\\'set\\', fieldsObject);');\n    (0, _log2.default)('with fieldsObject: ' + JSON.stringify(fieldsObject));\n  }\n}\n\n/**\n * send:\n * Clone of the low level `ga.send` method\n * WARNING: No validations will be applied to this\n * @param  {Object} fieldObject - field object for tracking different analytics\n * @param  {Array} trackerNames - trackers to send the command to\n * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on\n */\nfunction send(fieldObject, trackerNames) {\n  _gaCommand(trackerNames, 'send', fieldObject);\n  if (_debug) {\n    (0, _log2.default)('called ga(\\'send\\', fieldObject);');\n    (0, _log2.default)('with fieldObject: ' + JSON.stringify(fieldObject));\n    (0, _log2.default)('with trackers: ' + JSON.stringify(trackerNames));\n  }\n}\n\n/**\n * pageview:\n * Basic GA pageview tracking\n * @param  {String} path - the current page page e.g. '/about'\n * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on\n * @param {String} title - (optional) the page title e. g. 'My Website'\n */\nfunction pageview(rawPath, trackerNames, title) {\n  if (!rawPath) {\n    (0, _warn2.default)('path is required in .pageview()');\n    return;\n  }\n\n  var path = (0, _trim2.default)(rawPath);\n  if (path === '') {\n    (0, _warn2.default)('path cannot be an empty string in .pageview()');\n    return;\n  }\n\n  var extraFields = {};\n  if (title) {\n    extraFields.title = title;\n  }\n\n  if (typeof ga === 'function') {\n    _gaCommand(trackerNames, 'send', _extends({\n      hitType: 'pageview',\n      page: path\n    }, extraFields));\n\n    if (_debug) {\n      (0, _log2.default)('called ga(\\'send\\', \\'pageview\\', path);');\n      var extraLog = '';\n      if (title) {\n        extraLog = ' and title: ' + title;\n      }\n      (0, _log2.default)('with path: ' + path + extraLog);\n    }\n  }\n}\n\n/**\n * modalview:\n * a proxy to basic GA pageview tracking to consistently track\n * modal views that are an equivalent UX to a traditional pageview\n * @param  {String} modalName e.g. 'add-or-edit-club'\n * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on\n */\nfunction modalview(rawModalName, trackerNames) {\n  if (!rawModalName) {\n    (0, _warn2.default)('modalName is required in .modalview(modalName)');\n    return;\n  }\n\n  var modalName = (0, _removeLeadingSlash2.default)((0, _trim2.default)(rawModalName));\n\n  if (modalName === '') {\n    (0, _warn2.default)('modalName cannot be an empty string or a single / in .modalview()');\n    return;\n  }\n\n  if (typeof ga === 'function') {\n    var path = '/modal/' + modalName;\n    _gaCommand(trackerNames, 'send', 'pageview', path);\n\n    if (_debug) {\n      (0, _log2.default)('called ga(\\'send\\', \\'pageview\\', path);');\n      (0, _log2.default)('with path: ' + path);\n    }\n  }\n}\n\n/**\n * timing:\n * GA timing\n * @param args.category {String} required\n * @param args.variable {String} required\n * @param args.value  {Int}  required\n * @param args.label  {String} required\n * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on\n */\nfunction timing() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      category = _ref.category,\n      variable = _ref.variable,\n      value = _ref.value,\n      label = _ref.label;\n\n  var trackerNames = arguments[1];\n\n  if (typeof ga === 'function') {\n    if (!category || !variable || !value || typeof value !== 'number') {\n      (0, _warn2.default)('args.category, args.variable ' + 'AND args.value are required in timing() ' + 'AND args.value has to be a number');\n      return;\n    }\n\n    // Required Fields\n    var fieldObject = {\n      hitType: 'timing',\n      timingCategory: _format(category),\n      timingVar: _format(variable),\n      timingValue: value\n    };\n\n    if (label) {\n      fieldObject.timingLabel = _format(label);\n    }\n\n    send(fieldObject, trackerNames);\n  }\n}\n\n/**\n * event:\n * GA event tracking\n * @param args.category {String} required\n * @param args.action {String} required\n * @param args.label {String} optional\n * @param args.value {Int} optional\n * @param args.nonInteraction {boolean} optional\n * @param args.transport {string} optional\n * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on\n */\nfunction event() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var trackerNames = arguments[1];\n\n  var category = _ref2.category,\n      action = _ref2.action,\n      label = _ref2.label,\n      value = _ref2.value,\n      nonInteraction = _ref2.nonInteraction,\n      transport = _ref2.transport,\n      args = _objectWithoutProperties(_ref2, ['category', 'action', 'label', 'value', 'nonInteraction', 'transport']);\n\n  if (typeof ga === 'function') {\n    // Simple Validation\n    if (!category || !action) {\n      (0, _warn2.default)('args.category AND args.action are required in event()');\n      return;\n    }\n\n    // Required Fields\n    var fieldObject = {\n      hitType: 'event',\n      eventCategory: _format(category),\n      eventAction: _format(action)\n    };\n\n    // Optional Fields\n    if (label) {\n      fieldObject.eventLabel = _format(label);\n    }\n\n    if (typeof value !== 'undefined') {\n      if (typeof value !== 'number') {\n        (0, _warn2.default)('Expected `args.value` arg to be a Number.');\n      } else {\n        fieldObject.eventValue = value;\n      }\n    }\n\n    if (typeof nonInteraction !== 'undefined') {\n      if (typeof nonInteraction !== 'boolean') {\n        (0, _warn2.default)('`args.nonInteraction` must be a boolean.');\n      } else {\n        fieldObject.nonInteraction = nonInteraction;\n      }\n    }\n\n    if (typeof transport !== 'undefined') {\n      if (typeof transport !== 'string') {\n        (0, _warn2.default)('`args.transport` must be a string.');\n      } else {\n        if (['beacon', 'xhr', 'image'].indexOf(transport) === -1) {\n          (0, _warn2.default)('`args.transport` must be either one of these values: `beacon`, `xhr` or `image`');\n        }\n\n        fieldObject.transport = transport;\n      }\n    }\n\n    Object.keys(args).filter(function (key) {\n      return key.substr(0, 'dimension'.length) === 'dimension';\n    }).forEach(function (key) {\n      fieldObject[key] = args[key];\n    });\n\n    Object.keys(args).filter(function (key) {\n      return key.substr(0, 'metric'.length) === 'metric';\n    }).forEach(function (key) {\n      fieldObject[key] = args[key];\n    });\n\n    // Send to GA\n    send(fieldObject, trackerNames);\n  }\n}\n\n/**\n * exception:\n * GA exception tracking\n * @param args.description {String} optional\n * @param args.fatal {boolean} optional\n * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on\n */\nfunction exception(_ref3, trackerNames) {\n  var description = _ref3.description,\n      fatal = _ref3.fatal;\n\n  if (typeof ga === 'function') {\n    // Required Fields\n    var fieldObject = {\n      hitType: 'exception'\n    };\n\n    // Optional Fields\n    if (description) {\n      fieldObject.exDescription = _format(description);\n    }\n\n    if (typeof fatal !== 'undefined') {\n      if (typeof fatal !== 'boolean') {\n        (0, _warn2.default)('`args.fatal` must be a boolean.');\n      } else {\n        fieldObject.exFatal = fatal;\n      }\n    }\n\n    // Send to GA\n    send(fieldObject, trackerNames);\n  }\n}\n\nvar plugin = exports.plugin = {\n  /**\n   * require:\n   * GA requires a plugin\n   * @param name {String} e.g. 'ecommerce' or 'myplugin'\n   * @param options {Object} optional e.g {path: '/log', debug: true}\n   */\n  require: function require(rawName, options) {\n    if (typeof ga === 'function') {\n      // Required Fields\n      if (!rawName) {\n        (0, _warn2.default)('`name` is required in .require()');\n        return;\n      }\n\n      var name = (0, _trim2.default)(rawName);\n      if (name === '') {\n        (0, _warn2.default)('`name` cannot be an empty string in .require()');\n        return;\n      }\n\n      // Optional Fields\n      if (options) {\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') {\n          (0, _warn2.default)('Expected `options` arg to be an Object');\n          return;\n        }\n\n        if (Object.keys(options).length === 0) {\n          (0, _warn2.default)('Empty `options` given to .require()');\n        }\n\n        ga('require', name, options);\n\n        if (_debug) {\n          (0, _log2.default)('called ga(\\'require\\', \\'' + name + '\\', ' + JSON.stringify(options));\n        }\n      } else {\n        ga('require', name);\n\n        if (_debug) {\n          (0, _log2.default)('called ga(\\'require\\', \\'' + name + '\\');');\n        }\n      }\n    }\n  },\n\n  /**\n   * execute:\n   * GA execute action for plugin\n   * Takes variable number of arguments\n   * @param pluginName {String} e.g. 'ecommerce' or 'myplugin'\n   * @param action {String} e.g. 'addItem' or 'myCustomAction'\n   * @param actionType {String} optional e.g. 'detail'\n   * @param payload {Object} optional e.g { id: '1x5e', name : 'My product to track' }\n   */\n  execute: function execute(pluginName, action) {\n    var payload = void 0;\n    var actionType = void 0;\n\n    if ((arguments.length <= 2 ? 0 : arguments.length - 2) === 1) {\n      payload = arguments.length <= 2 ? undefined : arguments[2];\n    } else {\n      actionType = arguments.length <= 2 ? undefined : arguments[2];\n      payload = arguments.length <= 3 ? undefined : arguments[3];\n    }\n\n    if (typeof ga === 'function') {\n      if (typeof pluginName !== 'string') {\n        (0, _warn2.default)('Expected `pluginName` arg to be a String.');\n      } else if (typeof action !== 'string') {\n        (0, _warn2.default)('Expected `action` arg to be a String.');\n      } else {\n        var command = pluginName + ':' + action;\n        payload = payload || null;\n        if (actionType && payload) {\n          ga(command, actionType, payload);\n          if (_debug) {\n            (0, _log2.default)('called ga(\\'' + command + '\\');');\n            (0, _log2.default)('actionType: \"' + actionType + '\" with payload: ' + JSON.stringify(payload));\n          }\n        } else if (payload) {\n          ga(command, payload);\n          if (_debug) {\n            (0, _log2.default)('called ga(\\'' + command + '\\');');\n            (0, _log2.default)('with payload: ' + JSON.stringify(payload));\n          }\n        } else {\n          ga(command);\n          if (_debug) {\n            (0, _log2.default)('called ga(\\'' + command + '\\');');\n          }\n        }\n      }\n    }\n  }\n};\n\n/**\n * outboundLink:\n * GA outboundLink tracking\n * @param args.label {String} e.g. url, or 'Create an Account'\n * @param {function} hitCallback - Called after processing a hit.\n */\nfunction outboundLink(args, hitCallback, trackerNames) {\n  if (typeof hitCallback !== 'function') {\n    (0, _warn2.default)('hitCallback function is required');\n    return;\n  }\n\n  if (typeof ga === 'function') {\n    // Simple Validation\n    if (!args || !args.label) {\n      (0, _warn2.default)('args.label is required in outboundLink()');\n      return;\n    }\n\n    // Required Fields\n    var fieldObject = {\n      hitType: 'event',\n      eventCategory: 'Outbound',\n      eventAction: 'Click',\n      eventLabel: _format(args.label)\n    };\n\n    var safetyCallbackCalled = false;\n    var safetyCallback = function safetyCallback() {\n      // This prevents a delayed response from GA\n      // causing hitCallback from being fired twice\n      safetyCallbackCalled = true;\n\n      hitCallback();\n    };\n\n    // Using a timeout to ensure the execution of critical application code\n    // in the case when the GA server might be down\n    // or an ad blocker prevents sending the data\n\n    // register safety net timeout:\n    var t = setTimeout(safetyCallback, 250);\n\n    var clearableCallbackForGA = function clearableCallbackForGA() {\n      clearTimeout(t);\n      if (!safetyCallbackCalled) {\n        hitCallback();\n      }\n    };\n\n    fieldObject.hitCallback = clearableCallbackForGA;\n\n    // Send to GA\n    send(fieldObject, trackerNames);\n  } else {\n    // if ga is not defined, return the callback so the application\n    // continues to work as expected\n    setTimeout(hitCallback, 0);\n  }\n}\n\n_OutboundLink2.default.origTrackLink = _OutboundLink2.default.trackLink;\n_OutboundLink2.default.trackLink = outboundLink;\nvar OutboundLink = exports.OutboundLink = _OutboundLink2.default;\nvar testModeAPI = exports.testModeAPI = _testModeAPI2.default;\n\nexports.default = {\n  initialize: initialize,\n  ga: ga,\n  set: set,\n  send: send,\n  pageview: pageview,\n  modalview: modalview,\n  timing: timing,\n  event: event,\n  exception: exception,\n  plugin: plugin,\n  outboundLink: outboundLink,\n  OutboundLink: OutboundLink,\n  testModeAPI: _testModeAPI2.default\n};\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = format;\n\nvar _mightBeEmail = __webpack_require__(4);\n\nvar _mightBeEmail2 = _interopRequireDefault(_mightBeEmail);\n\nvar _toTitleCase = __webpack_require__(5);\n\nvar _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\nvar _warn = __webpack_require__(0);\n\nvar _warn2 = _interopRequireDefault(_warn);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar redacted = 'REDACTED (Potential Email Address)';\n\nfunction format(s, titleCase) {\n  if ((0, _mightBeEmail2.default)(s)) {\n    (0, _warn2.default)('This arg looks like an email address, redacting.');\n    return redacted;\n  }\n\n  if (titleCase) {\n    return (0, _toTitleCase2.default)(s);\n  }\n\n  return s;\n}\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mightBeEmail;\n// See if s could be an email address. We don't want to send personal data like email.\n// https://support.google.com/analytics/answer/2795983?hl=en\nfunction mightBeEmail(s) {\n  // There's no point trying to validate rfc822 fully, just look for ...@...\n  return (/[^@]+@[^@]+/.test(s)\n  );\n}\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toTitleCase;\n\nvar _trim = __webpack_require__(1);\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar smallWords = /^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\\.?|via)$/i; /**\n                                                                                                * To Title Case 2.1 - http://individed.com/code/to-title-case/\n                                                                                                * Copyright 2008-2013 David Gouch. Licensed under the MIT License.\n                                                                                                * https://github.com/gouch/to-title-case\n                                                                                                */\n\nfunction toTitleCase(string) {\n  return (0, _trim2.default)(string).replace(/[A-Za-z0-9\\u00C0-\\u00FF]+[^\\s-]*/g, function (match, index, title) {\n    if (index > 0 && index + match.length !== title.length && match.search(smallWords) > -1 && title.charAt(index - 2) !== ':' && (title.charAt(index + match.length) !== '-' || title.charAt(index - 1) === '-') && title.charAt(index - 1).search(/[^\\s-]/) < 0) {\n      return match.toLowerCase();\n    }\n\n    if (match.substr(1).search(/[A-Z]|\\../) > -1) {\n      return match;\n    }\n\n    return match.charAt(0).toUpperCase() + match.substr(1);\n  });\n}\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = removeLeadingSlash;\nfunction removeLeadingSlash(string) {\n  if (string.substring(0, 1) === '/') {\n    return string.substring(1);\n  }\n\n  return string;\n}\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (options) {\n  // https://developers.google.com/analytics/devguides/collection/analyticsjs/\n  /* eslint-disable */\n  (function (i, s, o, g, r, a, m) {\n    i['GoogleAnalyticsObject'] = r;\n    i[r] = i[r] || function () {\n      (i[r].q = i[r].q || []).push(arguments);\n    }, i[r].l = 1 * new Date();\n    a = s.createElement(o), m = s.getElementsByTagName(o)[0];\n    a.async = 1;\n    a.src = g;\n    m.parentNode.insertBefore(a, m);\n  })(window, document, 'script', options && options.gaAddress ? options.gaAddress : 'https://www.google-analytics.com/analytics.js', 'ga');\n  /* eslint-enable */\n};\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = log;\nfunction log(s) {\n  console.info('[react-ga]', s);\n}\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar gaCalls = exports.gaCalls = [];\n\nexports.default = {\n  calls: gaCalls,\n  ga: function ga() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    gaCalls.push([].concat(args));\n  }\n};\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(11);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = __webpack_require__(12);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _warn = __webpack_require__(0);\n\nvar _warn2 = _interopRequireDefault(_warn);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar NEWTAB = '_blank';\nvar MIDDLECLICK = 1;\n\nvar OutboundLink = function (_Component) {\n  _inherits(OutboundLink, _Component);\n\n  function OutboundLink() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, OutboundLink);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = OutboundLink.__proto__ || Object.getPrototypeOf(OutboundLink)).call.apply(_ref, [this].concat(args))), _this), _this.handleClick = function (event) {\n      var _this$props = _this.props,\n          target = _this$props.target,\n          eventLabel = _this$props.eventLabel,\n          to = _this$props.to,\n          onClick = _this$props.onClick;\n\n      var eventMeta = { label: eventLabel };\n      var sameTarget = target !== NEWTAB;\n      var normalClick = !(event.ctrlKey || event.shiftKey || event.metaKey || event.button === MIDDLECLICK);\n\n      if (sameTarget && normalClick) {\n        event.preventDefault();\n        OutboundLink.trackLink(eventMeta, function () {\n          window.location.href = to;\n        });\n      } else {\n        OutboundLink.trackLink(eventMeta, function () {});\n      }\n\n      if (onClick) {\n        onClick(event);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(OutboundLink, [{\n    key: 'render',\n    value: function render() {\n      var props = _extends({}, this.props, {\n        href: this.props.to,\n        onClick: this.handleClick\n      });\n      delete props.eventLabel;\n      return _react2.default.createElement('a', props);\n    }\n  }]);\n\n  return OutboundLink;\n}(_react.Component);\n\nOutboundLink.propTypes = {\n  eventLabel: _propTypes2.default.string.isRequired,\n  target: _propTypes2.default.string,\n  to: _propTypes2.default.string,\n  onClick: _propTypes2.default.func\n};\nOutboundLink.defaultProps = {\n  target: null,\n  to: null,\n  onClick: null\n};\n\nOutboundLink.trackLink = function () {\n  (0, _warn2.default)('ga tracking not enabled');\n};\n\nexports.default = OutboundLink;\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n/***/ })\n/******/ ]);\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/react-ga/dist/react-ga.js\n// module id = ./node_modules/react-ga/dist/react-ga.js\n// module chunks = 5","\nmodule.exports = [\n  'a',\n  'an',\n  'and',\n  'as',\n  'at',\n  'but',\n  'by',\n  'en',\n  'for',\n  'from',\n  'how',\n  'if',\n  'in',\n  'neither',\n  'nor',\n  'of',\n  'on',\n  'only',\n  'onto',\n  'out',\n  'or',\n  'per',\n  'so',\n  'than',\n  'that',\n  'the',\n  'to',\n  'until',\n  'up',\n  'upon',\n  'v',\n  'v.',\n  'versus',\n  'vs',\n  'vs.',\n  'via',\n  'when',\n  'with',\n  'without',\n  'yet'\n];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/title-case-minors/index.js\n// module id = ./node_modules/title-case-minors/index.js\n// module chunks = 5","module.exports = function(originalModule) {\r\n\tif(!originalModule.webpackPolyfill) {\r\n\t\tvar module = Object.create(originalModule);\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"exports\", {\r\n\t\t\tenumerable: true,\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/harmony-module.js\n// module id = ./node_modules/webpack/buildin/harmony-module.js\n// module chunks = 1 5","\n/***** xregexp.js *****/\n\n/*!\r\n * XRegExp v2.0.0\r\n * (c) 2007-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n */\r\n\r\n/**\r\n * XRegExp provides augmented, extensible JavaScript regular expressions. You get new syntax,\r\n * flags, and methods beyond what browsers support natively. XRegExp is also a regex utility belt\r\n * with tools to make your client-side grepping simpler and more powerful, while freeing you from\r\n * worrying about pesky cross-browser inconsistencies and the dubious `lastIndex` property. See\r\n * XRegExp's documentation (http://xregexp.com/) for more details.\r\n * @module xregexp\r\n * @requires N/A\r\n */\r\nvar XRegExp;\r\n\r\n// Avoid running twice; that would reset tokens and could break references to native globals\r\nXRegExp = XRegExp || (function (undef) {\r\n    \"use strict\";\r\n\r\n/*--------------------------------------\r\n *  Private variables\r\n *------------------------------------*/\r\n\r\n    var self,\r\n        addToken,\r\n        add,\r\n\r\n// Optional features; can be installed and uninstalled\r\n        features = {\r\n            natives: false,\r\n            extensibility: false\r\n        },\r\n\r\n// Store native methods to use and restore (\"native\" is an ES3 reserved keyword)\r\n        nativ = {\r\n            exec: RegExp.prototype.exec,\r\n            test: RegExp.prototype.test,\r\n            match: String.prototype.match,\r\n            replace: String.prototype.replace,\r\n            split: String.prototype.split\r\n        },\r\n\r\n// Storage for fixed/extended native methods\r\n        fixed = {},\r\n\r\n// Storage for cached regexes\r\n        cache = {},\r\n\r\n// Storage for addon tokens\r\n        tokens = [],\r\n\r\n// Token scopes\r\n        defaultScope = \"default\",\r\n        classScope = \"class\",\r\n\r\n// Regexes that match native regex syntax\r\n        nativeTokens = {\r\n            // Any native multicharacter token in default scope (includes octals, excludes character classes)\r\n            \"default\": /^(?:\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\dA-Fa-f]{2}|u[\\dA-Fa-f]{4}|c[A-Za-z]|[\\s\\S])|\\(\\?[:=!]|[?*+]\\?|{\\d+(?:,\\d*)?}\\??)/,\r\n            // Any native multicharacter token in character class scope (includes octals)\r\n            \"class\": /^(?:\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\dA-Fa-f]{2}|u[\\dA-Fa-f]{4}|c[A-Za-z]|[\\s\\S]))/\r\n        },\r\n\r\n// Any backreference in replacement strings\r\n        replacementToken = /\\$(?:{([\\w$]+)}|(\\d\\d?|[\\s\\S]))/g,\r\n\r\n// Any character with a later instance in the string\r\n        duplicateFlags = /([\\s\\S])(?=[\\s\\S]*\\1)/g,\r\n\r\n// Any greedy/lazy quantifier\r\n        quantifier = /^(?:[?*+]|{\\d+(?:,\\d*)?})\\??/,\r\n\r\n// Check for correct `exec` handling of nonparticipating capturing groups\r\n        compliantExecNpcg = nativ.exec.call(/()??/, \"\")[1] === undef,\r\n\r\n// Check for flag y support (Firefox 3+)\r\n        hasNativeY = RegExp.prototype.sticky !== undef,\r\n\r\n// Used to kill infinite recursion during XRegExp construction\r\n        isInsideConstructor = false,\r\n\r\n// Storage for known flags, including addon flags\r\n        registeredFlags = \"gim\" + (hasNativeY ? \"y\" : \"\");\r\n\r\n/*--------------------------------------\r\n *  Private helper functions\r\n *------------------------------------*/\r\n\r\n/**\r\n * Attaches XRegExp.prototype properties and named capture supporting data to a regex object.\r\n * @private\r\n * @param {RegExp} regex Regex to augment.\r\n * @param {Array} captureNames Array with capture names, or null.\r\n * @param {Boolean} [isNative] Whether the regex was created by `RegExp` rather than `XRegExp`.\r\n * @returns {RegExp} Augmented regex.\r\n */\r\n    function augment(regex, captureNames, isNative) {\r\n        var p;\r\n        // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value\r\n        for (p in self.prototype) {\r\n            if (self.prototype.hasOwnProperty(p)) {\r\n                regex[p] = self.prototype[p];\r\n            }\r\n        }\r\n        regex.xregexp = {captureNames: captureNames, isNative: !!isNative};\r\n        return regex;\r\n    }\r\n\r\n/**\r\n * Returns native `RegExp` flags used by a regex object.\r\n * @private\r\n * @param {RegExp} regex Regex to check.\r\n * @returns {String} Native flags in use.\r\n */\r\n    function getNativeFlags(regex) {\r\n        //return nativ.exec.call(/\\/([a-z]*)$/i, String(regex))[1];\r\n        return (regex.global     ? \"g\" : \"\") +\r\n               (regex.ignoreCase ? \"i\" : \"\") +\r\n               (regex.multiline  ? \"m\" : \"\") +\r\n               (regex.extended   ? \"x\" : \"\") + // Proposed for ES6, included in AS3\r\n               (regex.sticky     ? \"y\" : \"\"); // Proposed for ES6, included in Firefox 3+\r\n    }\r\n\r\n/**\r\n * Copies a regex object while preserving special properties for named capture and augmenting with\r\n * `XRegExp.prototype` methods. The copy has a fresh `lastIndex` property (set to zero). Allows\r\n * adding and removing flags while copying the regex.\r\n * @private\r\n * @param {RegExp} regex Regex to copy.\r\n * @param {String} [addFlags] Flags to be added while copying the regex.\r\n * @param {String} [removeFlags] Flags to be removed while copying the regex.\r\n * @returns {RegExp} Copy of the provided regex, possibly with modified flags.\r\n */\r\n    function copy(regex, addFlags, removeFlags) {\r\n        if (!self.isRegExp(regex)) {\r\n            throw new TypeError(\"type RegExp expected\");\r\n        }\r\n        var flags = nativ.replace.call(getNativeFlags(regex) + (addFlags || \"\"), duplicateFlags, \"\");\r\n        if (removeFlags) {\r\n            // Would need to escape `removeFlags` if this was public\r\n            flags = nativ.replace.call(flags, new RegExp(\"[\" + removeFlags + \"]+\", \"g\"), \"\");\r\n        }\r\n        if (regex.xregexp && !regex.xregexp.isNative) {\r\n            // Compiling the current (rather than precompilation) source preserves the effects of nonnative source flags\r\n            regex = augment(self(regex.source, flags),\r\n                            regex.xregexp.captureNames ? regex.xregexp.captureNames.slice(0) : null);\r\n        } else {\r\n            // Augment with `XRegExp.prototype` methods, but use native `RegExp` (avoid searching for special tokens)\r\n            regex = augment(new RegExp(regex.source, flags), null, true);\r\n        }\r\n        return regex;\r\n    }\r\n\r\n/*\r\n * Returns the last index at which a given value can be found in an array, or `-1` if it's not\r\n * present. The array is searched backwards.\r\n * @private\r\n * @param {Array} array Array to search.\r\n * @param {*} value Value to locate in the array.\r\n * @returns {Number} Last zero-based index at which the item is found, or -1.\r\n */\r\n    function lastIndexOf(array, value) {\r\n        var i = array.length;\r\n        if (Array.prototype.lastIndexOf) {\r\n            return array.lastIndexOf(value); // Use the native method if available\r\n        }\r\n        while (i--) {\r\n            if (array[i] === value) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n/**\r\n * Determines whether an object is of the specified type.\r\n * @private\r\n * @param {*} value Object to check.\r\n * @param {String} type Type to check for, in lowercase.\r\n * @returns {Boolean} Whether the object matches the type.\r\n */\r\n    function isType(value, type) {\r\n        return Object.prototype.toString.call(value).toLowerCase() === \"[object \" + type + \"]\";\r\n    }\r\n\r\n/**\r\n * Prepares an options object from the given value.\r\n * @private\r\n * @param {String|Object} value Value to convert to an options object.\r\n * @returns {Object} Options object.\r\n */\r\n    function prepareOptions(value) {\r\n        value = value || {};\r\n        if (value === \"all\" || value.all) {\r\n            value = {natives: true, extensibility: true};\r\n        } else if (isType(value, \"string\")) {\r\n            value = self.forEach(value, /[^\\s,]+/, function (m) {\r\n                this[m] = true;\r\n            }, {});\r\n        }\r\n        return value;\r\n    }\r\n\r\n/**\r\n * Runs built-in/custom tokens in reverse insertion order, until a match is found.\r\n * @private\r\n * @param {String} pattern Original pattern from which an XRegExp object is being built.\r\n * @param {Number} pos Position to search for tokens within `pattern`.\r\n * @param {Number} scope Current regex scope.\r\n * @param {Object} context Context object assigned to token handler functions.\r\n * @returns {Object} Object with properties `output` (the substitution string returned by the\r\n *   successful token handler) and `match` (the token's match array), or null.\r\n */\r\n    function runTokens(pattern, pos, scope, context) {\r\n        var i = tokens.length,\r\n            result = null,\r\n            match,\r\n            t;\r\n        // Protect against constructing XRegExps within token handler and trigger functions\r\n        isInsideConstructor = true;\r\n        // Must reset `isInsideConstructor`, even if a `trigger` or `handler` throws\r\n        try {\r\n            while (i--) { // Run in reverse order\r\n                t = tokens[i];\r\n                if ((t.scope === \"all\" || t.scope === scope) && (!t.trigger || t.trigger.call(context))) {\r\n                    t.pattern.lastIndex = pos;\r\n                    match = fixed.exec.call(t.pattern, pattern); // Fixed `exec` here allows use of named backreferences, etc.\r\n                    if (match && match.index === pos) {\r\n                        result = {\r\n                            output: t.handler.call(context, match, scope),\r\n                            match: match\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } catch (err) {\r\n            throw err;\r\n        } finally {\r\n            isInsideConstructor = false;\r\n        }\r\n        return result;\r\n    }\r\n\r\n/**\r\n * Enables or disables XRegExp syntax and flag extensibility.\r\n * @private\r\n * @param {Boolean} on `true` to enable; `false` to disable.\r\n */\r\n    function setExtensibility(on) {\r\n        self.addToken = addToken[on ? \"on\" : \"off\"];\r\n        features.extensibility = on;\r\n    }\r\n\r\n/**\r\n * Enables or disables native method overrides.\r\n * @private\r\n * @param {Boolean} on `true` to enable; `false` to disable.\r\n */\r\n    function setNatives(on) {\r\n        RegExp.prototype.exec = (on ? fixed : nativ).exec;\r\n        RegExp.prototype.test = (on ? fixed : nativ).test;\r\n        String.prototype.match = (on ? fixed : nativ).match;\r\n        String.prototype.replace = (on ? fixed : nativ).replace;\r\n        String.prototype.split = (on ? fixed : nativ).split;\r\n        features.natives = on;\r\n    }\r\n\r\n/*--------------------------------------\r\n *  Constructor\r\n *------------------------------------*/\r\n\r\n/**\r\n * Creates an extended regular expression object for matching text with a pattern. Differs from a\r\n * native regular expression in that additional syntax and flags are supported. The returned object\r\n * is in fact a native `RegExp` and works with all native methods.\r\n * @class XRegExp\r\n * @constructor\r\n * @param {String|RegExp} pattern Regex pattern string, or an existing `RegExp` object to copy.\r\n * @param {String} [flags] Any combination of flags:\r\n *   <li>`g` - global\r\n *   <li>`i` - ignore case\r\n *   <li>`m` - multiline anchors\r\n *   <li>`n` - explicit capture\r\n *   <li>`s` - dot matches all (aka singleline)\r\n *   <li>`x` - free-spacing and line comments (aka extended)\r\n *   <li>`y` - sticky (Firefox 3+ only)\r\n *   Flags cannot be provided when constructing one `RegExp` from another.\r\n * @returns {RegExp} Extended regular expression object.\r\n * @example\r\n *\r\n * // With named capture and flag x\r\n * date = XRegExp('(?<year>  [0-9]{4}) -?  # year  \\n\\\r\n *                 (?<month> [0-9]{2}) -?  # month \\n\\\r\n *                 (?<day>   [0-9]{2})     # day   ', 'x');\r\n *\r\n * // Passing a regex object to copy it. The copy maintains special properties for named capture,\r\n * // is augmented with `XRegExp.prototype` methods, and has a fresh `lastIndex` property (set to\r\n * // zero). Native regexes are not recompiled using XRegExp syntax.\r\n * XRegExp(/regex/);\r\n */\r\n    self = function (pattern, flags) {\r\n        if (self.isRegExp(pattern)) {\r\n            if (flags !== undef) {\r\n                throw new TypeError(\"can't supply flags when constructing one RegExp from another\");\r\n            }\r\n            return copy(pattern);\r\n        }\r\n        // Tokens become part of the regex construction process, so protect against infinite recursion\r\n        // when an XRegExp is constructed within a token handler function\r\n        if (isInsideConstructor) {\r\n            throw new Error(\"can't call the XRegExp constructor within token definition functions\");\r\n        }\r\n\r\n        var output = [],\r\n            scope = defaultScope,\r\n            tokenContext = {\r\n                hasNamedCapture: false,\r\n                captureNames: [],\r\n                hasFlag: function (flag) {\r\n                    return flags.indexOf(flag) > -1;\r\n                }\r\n            },\r\n            pos = 0,\r\n            tokenResult,\r\n            match,\r\n            chr;\r\n        pattern = pattern === undef ? \"\" : String(pattern);\r\n        flags = flags === undef ? \"\" : String(flags);\r\n\r\n        if (nativ.match.call(flags, duplicateFlags)) { // Don't use test/exec because they would update lastIndex\r\n            throw new SyntaxError(\"invalid duplicate regular expression flag\");\r\n        }\r\n        // Strip/apply leading mode modifier with any combination of flags except g or y: (?imnsx)\r\n        pattern = nativ.replace.call(pattern, /^\\(\\?([\\w$]+)\\)/, function ($0, $1) {\r\n            if (nativ.test.call(/[gy]/, $1)) {\r\n                throw new SyntaxError(\"can't use flag g or y in mode modifier\");\r\n            }\r\n            flags = nativ.replace.call(flags + $1, duplicateFlags, \"\");\r\n            return \"\";\r\n        });\r\n        self.forEach(flags, /[\\s\\S]/, function (m) {\r\n            if (registeredFlags.indexOf(m[0]) < 0) {\r\n                throw new SyntaxError(\"invalid regular expression flag \" + m[0]);\r\n            }\r\n        });\r\n\r\n        while (pos < pattern.length) {\r\n            // Check for custom tokens at the current position\r\n            tokenResult = runTokens(pattern, pos, scope, tokenContext);\r\n            if (tokenResult) {\r\n                output.push(tokenResult.output);\r\n                pos += (tokenResult.match[0].length || 1);\r\n            } else {\r\n                // Check for native tokens (except character classes) at the current position\r\n                match = nativ.exec.call(nativeTokens[scope], pattern.slice(pos));\r\n                if (match) {\r\n                    output.push(match[0]);\r\n                    pos += match[0].length;\r\n                } else {\r\n                    chr = pattern.charAt(pos);\r\n                    if (chr === \"[\") {\r\n                        scope = classScope;\r\n                    } else if (chr === \"]\") {\r\n                        scope = defaultScope;\r\n                    }\r\n                    // Advance position by one character\r\n                    output.push(chr);\r\n                    ++pos;\r\n                }\r\n            }\r\n        }\r\n\r\n        return augment(new RegExp(output.join(\"\"), nativ.replace.call(flags, /[^gimy]+/g, \"\")),\r\n                       tokenContext.hasNamedCapture ? tokenContext.captureNames : null);\r\n    };\r\n\r\n/*--------------------------------------\r\n *  Public methods/properties\r\n *------------------------------------*/\r\n\r\n// Installed and uninstalled states for `XRegExp.addToken`\r\n    addToken = {\r\n        on: function (regex, handler, options) {\r\n            options = options || {};\r\n            if (regex) {\r\n                tokens.push({\r\n                    pattern: copy(regex, \"g\" + (hasNativeY ? \"y\" : \"\")),\r\n                    handler: handler,\r\n                    scope: options.scope || defaultScope,\r\n                    trigger: options.trigger || null\r\n                });\r\n            }\r\n            // Providing `customFlags` with null `regex` and `handler` allows adding flags that do\r\n            // nothing, but don't throw an error\r\n            if (options.customFlags) {\r\n                registeredFlags = nativ.replace.call(registeredFlags + options.customFlags, duplicateFlags, \"\");\r\n            }\r\n        },\r\n        off: function () {\r\n            throw new Error(\"extensibility must be installed before using addToken\");\r\n        }\r\n    };\r\n\r\n/**\r\n * Extends or changes XRegExp syntax and allows custom flags. This is used internally and can be\r\n * used to create XRegExp addons. `XRegExp.install('extensibility')` must be run before calling\r\n * this function, or an error is thrown. If more than one token can match the same string, the last\r\n * added wins.\r\n * @memberOf XRegExp\r\n * @param {RegExp} regex Regex object that matches the new token.\r\n * @param {Function} handler Function that returns a new pattern string (using native regex syntax)\r\n *   to replace the matched token within all future XRegExp regexes. Has access to persistent\r\n *   properties of the regex being built, through `this`. Invoked with two arguments:\r\n *   <li>The match array, with named backreference properties.\r\n *   <li>The regex scope where the match was found.\r\n * @param {Object} [options] Options object with optional properties:\r\n *   <li>`scope` {String} Scopes where the token applies: 'default', 'class', or 'all'.\r\n *   <li>`trigger` {Function} Function that returns `true` when the token should be applied; e.g.,\r\n *     if a flag is set. If `false` is returned, the matched string can be matched by other tokens.\r\n *     Has access to persistent properties of the regex being built, through `this` (including\r\n *     function `this.hasFlag`).\r\n *   <li>`customFlags` {String} Nonnative flags used by the token's handler or trigger functions.\r\n *     Prevents XRegExp from throwing an invalid flag error when the specified flags are used.\r\n * @example\r\n *\r\n * // Basic usage: Adds \\a for ALERT character\r\n * XRegExp.addToken(\r\n *   /\\\\a/,\r\n *   function () {return '\\\\x07';},\r\n *   {scope: 'all'}\r\n * );\r\n * XRegExp('\\\\a[\\\\a-\\\\n]+').test('\\x07\\n\\x07'); // -> true\r\n */\r\n    self.addToken = addToken.off;\r\n\r\n/**\r\n * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with\r\n * the same pattern and flag combination, the cached copy is returned.\r\n * @memberOf XRegExp\r\n * @param {String} pattern Regex pattern string.\r\n * @param {String} [flags] Any combination of XRegExp flags.\r\n * @returns {RegExp} Cached XRegExp object.\r\n * @example\r\n *\r\n * while (match = XRegExp.cache('.', 'gs').exec(str)) {\r\n *   // The regex is compiled once only\r\n * }\r\n */\r\n    self.cache = function (pattern, flags) {\r\n        var key = pattern + \"/\" + (flags || \"\");\r\n        return cache[key] || (cache[key] = self(pattern, flags));\r\n    };\r\n\r\n/**\r\n * Escapes any regular expression metacharacters, for use when matching literal strings. The result\r\n * can safely be used at any point within a regex that uses any flags.\r\n * @memberOf XRegExp\r\n * @param {String} str String to escape.\r\n * @returns {String} String with regex metacharacters escaped.\r\n * @example\r\n *\r\n * XRegExp.escape('Escaped? <.>');\r\n * // -> 'Escaped\\?\\ <\\.>'\r\n */\r\n    self.escape = function (str) {\r\n        return nativ.replace.call(str, /[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\r\n    };\r\n\r\n/**\r\n * Executes a regex search in a specified string. Returns a match array or `null`. If the provided\r\n * regex uses named capture, named backreference properties are included on the match array.\r\n * Optional `pos` and `sticky` arguments specify the search start position, and whether the match\r\n * must start at the specified position only. The `lastIndex` property of the provided regex is not\r\n * used, but is updated for compatibility. Also fixes browser bugs compared to the native\r\n * `RegExp.prototype.exec` and can be used reliably cross-browser.\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {RegExp} regex Regex to search with.\r\n * @param {Number} [pos=0] Zero-based index at which to start the search.\r\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\r\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\r\n * @returns {Array} Match array with named backreference properties, or null.\r\n * @example\r\n *\r\n * // Basic use, with named backreference\r\n * var match = XRegExp.exec('U+2620', XRegExp('U\\\\+(?<hex>[0-9A-F]{4})'));\r\n * match.hex; // -> '2620'\r\n *\r\n * // With pos and sticky, in a loop\r\n * var pos = 2, result = [], match;\r\n * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d)>/, pos, 'sticky')) {\r\n *   result.push(match[1]);\r\n *   pos = match.index + match[0].length;\r\n * }\r\n * // result -> ['2', '3', '4']\r\n */\r\n    self.exec = function (str, regex, pos, sticky) {\r\n        var r2 = copy(regex, \"g\" + (sticky && hasNativeY ? \"y\" : \"\"), (sticky === false ? \"y\" : \"\")),\r\n            match;\r\n        r2.lastIndex = pos = pos || 0;\r\n        match = fixed.exec.call(r2, str); // Fixed `exec` required for `lastIndex` fix, etc.\r\n        if (sticky && match && match.index !== pos) {\r\n            match = null;\r\n        }\r\n        if (regex.global) {\r\n            regex.lastIndex = match ? r2.lastIndex : 0;\r\n        }\r\n        return match;\r\n    };\r\n\r\n/**\r\n * Executes a provided function once per regex match.\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {RegExp} regex Regex to search with.\r\n * @param {Function} callback Function to execute for each match. Invoked with four arguments:\r\n *   <li>The match array, with named backreference properties.\r\n *   <li>The zero-based match index.\r\n *   <li>The string being traversed.\r\n *   <li>The regex object being used to traverse the string.\r\n * @param {*} [context] Object to use as `this` when executing `callback`.\r\n * @returns {*} Provided `context` object.\r\n * @example\r\n *\r\n * // Extracts every other digit from a string\r\n * XRegExp.forEach('1a2345', /\\d/, function (match, i) {\r\n *   if (i % 2) this.push(+match[0]);\r\n * }, []);\r\n * // -> [2, 4]\r\n */\r\n    self.forEach = function (str, regex, callback, context) {\r\n        var pos = 0,\r\n            i = -1,\r\n            match;\r\n        while ((match = self.exec(str, regex, pos))) {\r\n            callback.call(context, match, ++i, str, regex);\r\n            pos = match.index + (match[0].length || 1);\r\n        }\r\n        return context;\r\n    };\r\n\r\n/**\r\n * Copies a regex object and adds flag `g`. The copy maintains special properties for named\r\n * capture, is augmented with `XRegExp.prototype` methods, and has a fresh `lastIndex` property\r\n * (set to zero). Native regexes are not recompiled using XRegExp syntax.\r\n * @memberOf XRegExp\r\n * @param {RegExp} regex Regex to globalize.\r\n * @returns {RegExp} Copy of the provided regex with flag `g` added.\r\n * @example\r\n *\r\n * var globalCopy = XRegExp.globalize(/regex/);\r\n * globalCopy.global; // -> true\r\n */\r\n    self.globalize = function (regex) {\r\n        return copy(regex, \"g\");\r\n    };\r\n\r\n/**\r\n * Installs optional features according to the specified options.\r\n * @memberOf XRegExp\r\n * @param {Object|String} options Options object or string.\r\n * @example\r\n *\r\n * // With an options object\r\n * XRegExp.install({\r\n *   // Overrides native regex methods with fixed/extended versions that support named\r\n *   // backreferences and fix numerous cross-browser bugs\r\n *   natives: true,\r\n *\r\n *   // Enables extensibility of XRegExp syntax and flags\r\n *   extensibility: true\r\n * });\r\n *\r\n * // With an options string\r\n * XRegExp.install('natives extensibility');\r\n *\r\n * // Using a shortcut to install all optional features\r\n * XRegExp.install('all');\r\n */\r\n    self.install = function (options) {\r\n        options = prepareOptions(options);\r\n        if (!features.natives && options.natives) {\r\n            setNatives(true);\r\n        }\r\n        if (!features.extensibility && options.extensibility) {\r\n            setExtensibility(true);\r\n        }\r\n    };\r\n\r\n/**\r\n * Checks whether an individual optional feature is installed.\r\n * @memberOf XRegExp\r\n * @param {String} feature Name of the feature to check. One of:\r\n *   <li>`natives`\r\n *   <li>`extensibility`\r\n * @returns {Boolean} Whether the feature is installed.\r\n * @example\r\n *\r\n * XRegExp.isInstalled('natives');\r\n */\r\n    self.isInstalled = function (feature) {\r\n        return !!(features[feature]);\r\n    };\r\n\r\n/**\r\n * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes\r\n * created in another frame, when `instanceof` and `constructor` checks would fail.\r\n * @memberOf XRegExp\r\n * @param {*} value Object to check.\r\n * @returns {Boolean} Whether the object is a `RegExp` object.\r\n * @example\r\n *\r\n * XRegExp.isRegExp('string'); // -> false\r\n * XRegExp.isRegExp(/regex/i); // -> true\r\n * XRegExp.isRegExp(RegExp('^', 'm')); // -> true\r\n * XRegExp.isRegExp(XRegExp('(?s).')); // -> true\r\n */\r\n    self.isRegExp = function (value) {\r\n        return isType(value, \"regexp\");\r\n    };\r\n\r\n/**\r\n * Retrieves the matches from searching a string using a chain of regexes that successively search\r\n * within previous matches. The provided `chain` array can contain regexes and objects with `regex`\r\n * and `backref` properties. When a backreference is specified, the named or numbered backreference\r\n * is passed forward to the next regex or returned.\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {Array} chain Regexes that each search for matches within preceding results.\r\n * @returns {Array} Matches by the last regex in the chain, or an empty array.\r\n * @example\r\n *\r\n * // Basic usage; matches numbers within <b> tags\r\n * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\r\n *   XRegExp('(?is)<b>.*?</b>'),\r\n *   /\\d+/\r\n * ]);\r\n * // -> ['2', '4', '56']\r\n *\r\n * // Passing forward and returning specific backreferences\r\n * html = '<a href=\"http://xregexp.com/api/\">XRegExp</a>\\\r\n *         <a href=\"http://www.google.com/\">Google</a>';\r\n * XRegExp.matchChain(html, [\r\n *   {regex: /<a href=\"([^\"]+)\">/i, backref: 1},\r\n *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\r\n * ]);\r\n * // -> ['xregexp.com', 'www.google.com']\r\n */\r\n    self.matchChain = function (str, chain) {\r\n        return (function recurseChain(values, level) {\r\n            var item = chain[level].regex ? chain[level] : {regex: chain[level]},\r\n                matches = [],\r\n                addMatch = function (match) {\r\n                    matches.push(item.backref ? (match[item.backref] || \"\") : match[0]);\r\n                },\r\n                i;\r\n            for (i = 0; i < values.length; ++i) {\r\n                self.forEach(values[i], item.regex, addMatch);\r\n            }\r\n            return ((level === chain.length - 1) || !matches.length) ?\r\n                    matches :\r\n                    recurseChain(matches, level + 1);\r\n        }([str], 0));\r\n    };\r\n\r\n/**\r\n * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string\r\n * or regex, and the replacement can be a string or a function to be called for each match. To\r\n * perform a global search and replace, use the optional `scope` argument or include flag `g` if\r\n * using a regex. Replacement strings can use `${n}` for named and numbered backreferences.\r\n * Replacement functions can use named backreferences via `arguments[0].name`. Also fixes browser\r\n * bugs compared to the native `String.prototype.replace` and can be used reliably cross-browser.\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {RegExp|String} search Search pattern to be replaced.\r\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\r\n *   Replacement strings can include special replacement syntax:\r\n *     <li>$$ - Inserts a literal '$'.\r\n *     <li>$&, $0 - Inserts the matched substring.\r\n *     <li>$` - Inserts the string that precedes the matched substring (left context).\r\n *     <li>$' - Inserts the string that follows the matched substring (right context).\r\n *     <li>$n, $nn - Where n/nn are digits referencing an existent capturing group, inserts\r\n *       backreference n/nn.\r\n *     <li>${n} - Where n is a name or any number of digits that reference an existent capturing\r\n *       group, inserts backreference n.\r\n *   Replacement functions are invoked with three or more arguments:\r\n *     <li>The matched substring (corresponds to $& above). Named backreferences are accessible as\r\n *       properties of this first argument.\r\n *     <li>0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).\r\n *     <li>The zero-based index of the match within the total search string.\r\n *     <li>The total string being searched.\r\n * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not\r\n *   explicitly specified and using a regex with flag `g`, `scope` is 'all'.\r\n * @returns {String} New string with one or all matches replaced.\r\n * @example\r\n *\r\n * // Regex search, using named backreferences in replacement string\r\n * var name = XRegExp('(?<first>\\\\w+) (?<last>\\\\w+)');\r\n * XRegExp.replace('John Smith', name, '${last}, ${first}');\r\n * // -> 'Smith, John'\r\n *\r\n * // Regex search, using named backreferences in replacement function\r\n * XRegExp.replace('John Smith', name, function (match) {\r\n *   return match.last + ', ' + match.first;\r\n * });\r\n * // -> 'Smith, John'\r\n *\r\n * // Global string search/replacement\r\n * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');\r\n * // -> 'XRegExp builds XRegExps'\r\n */\r\n    self.replace = function (str, search, replacement, scope) {\r\n        var isRegex = self.isRegExp(search),\r\n            search2 = search,\r\n            result;\r\n        if (isRegex) {\r\n            if (scope === undef && search.global) {\r\n                scope = \"all\"; // Follow flag g when `scope` isn't explicit\r\n            }\r\n            // Note that since a copy is used, `search`'s `lastIndex` isn't updated *during* replacement iterations\r\n            search2 = copy(search, scope === \"all\" ? \"g\" : \"\", scope === \"all\" ? \"\" : \"g\");\r\n        } else if (scope === \"all\") {\r\n            search2 = new RegExp(self.escape(String(search)), \"g\");\r\n        }\r\n        result = fixed.replace.call(String(str), search2, replacement); // Fixed `replace` required for named backreferences, etc.\r\n        if (isRegex && search.global) {\r\n            search.lastIndex = 0; // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\r\n        }\r\n        return result;\r\n    };\r\n\r\n/**\r\n * Splits a string into an array of strings using a regex or string separator. Matches of the\r\n * separator are not included in the result array. However, if `separator` is a regex that contains\r\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\r\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\r\n * cross-browser.\r\n * @memberOf XRegExp\r\n * @param {String} str String to split.\r\n * @param {RegExp|String} separator Regex or string to use for separating the string.\r\n * @param {Number} [limit] Maximum number of items to include in the result array.\r\n * @returns {Array} Array of substrings.\r\n * @example\r\n *\r\n * // Basic use\r\n * XRegExp.split('a b c', ' ');\r\n * // -> ['a', 'b', 'c']\r\n *\r\n * // With limit\r\n * XRegExp.split('a b c', ' ', 2);\r\n * // -> ['a', 'b']\r\n *\r\n * // Backreferences in result array\r\n * XRegExp.split('..word1..', /([a-z]+)(\\d+)/i);\r\n * // -> ['..', 'word', '1', '..']\r\n */\r\n    self.split = function (str, separator, limit) {\r\n        return fixed.split.call(str, separator, limit);\r\n    };\r\n\r\n/**\r\n * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and\r\n * `sticky` arguments specify the search start position, and whether the match must start at the\r\n * specified position only. The `lastIndex` property of the provided regex is not used, but is\r\n * updated for compatibility. Also fixes browser bugs compared to the native\r\n * `RegExp.prototype.test` and can be used reliably cross-browser.\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {RegExp} regex Regex to search with.\r\n * @param {Number} [pos=0] Zero-based index at which to start the search.\r\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\r\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\r\n * @returns {Boolean} Whether the regex matched the provided value.\r\n * @example\r\n *\r\n * // Basic use\r\n * XRegExp.test('abc', /c/); // -> true\r\n *\r\n * // With pos and sticky\r\n * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false\r\n */\r\n    self.test = function (str, regex, pos, sticky) {\r\n        // Do this the easy way :-)\r\n        return !!self.exec(str, regex, pos, sticky);\r\n    };\r\n\r\n/**\r\n * Uninstalls optional features according to the specified options.\r\n * @memberOf XRegExp\r\n * @param {Object|String} options Options object or string.\r\n * @example\r\n *\r\n * // With an options object\r\n * XRegExp.uninstall({\r\n *   // Restores native regex methods\r\n *   natives: true,\r\n *\r\n *   // Disables additional syntax and flag extensions\r\n *   extensibility: true\r\n * });\r\n *\r\n * // With an options string\r\n * XRegExp.uninstall('natives extensibility');\r\n *\r\n * // Using a shortcut to uninstall all optional features\r\n * XRegExp.uninstall('all');\r\n */\r\n    self.uninstall = function (options) {\r\n        options = prepareOptions(options);\r\n        if (features.natives && options.natives) {\r\n            setNatives(false);\r\n        }\r\n        if (features.extensibility && options.extensibility) {\r\n            setExtensibility(false);\r\n        }\r\n    };\r\n\r\n/**\r\n * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as\r\n * regex objects or strings. Metacharacters are escaped in patterns provided as strings.\r\n * Backreferences in provided regex objects are automatically renumbered to work correctly. Native\r\n * flags used by provided regexes are ignored in favor of the `flags` argument.\r\n * @memberOf XRegExp\r\n * @param {Array} patterns Regexes and strings to combine.\r\n * @param {String} [flags] Any combination of XRegExp flags.\r\n * @returns {RegExp} Union of the provided regexes and strings.\r\n * @example\r\n *\r\n * XRegExp.union(['a+b*c', /(dogs)\\1/, /(cats)\\1/], 'i');\r\n * // -> /a\\+b\\*c|(dogs)\\1|(cats)\\2/i\r\n *\r\n * XRegExp.union([XRegExp('(?<pet>dogs)\\\\k<pet>'), XRegExp('(?<pet>cats)\\\\k<pet>')]);\r\n * // -> XRegExp('(?<pet>dogs)\\\\k<pet>|(?<pet>cats)\\\\k<pet>')\r\n */\r\n    self.union = function (patterns, flags) {\r\n        var parts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*]/g,\r\n            numCaptures = 0,\r\n            numPriorCaptures,\r\n            captureNames,\r\n            rewrite = function (match, paren, backref) {\r\n                var name = captureNames[numCaptures - numPriorCaptures];\r\n                if (paren) { // Capturing group\r\n                    ++numCaptures;\r\n                    if (name) { // If the current capture has a name\r\n                        return \"(?<\" + name + \">\";\r\n                    }\r\n                } else if (backref) { // Backreference\r\n                    return \"\\\\\" + (+backref + numPriorCaptures);\r\n                }\r\n                return match;\r\n            },\r\n            output = [],\r\n            pattern,\r\n            i;\r\n        if (!(isType(patterns, \"array\") && patterns.length)) {\r\n            throw new TypeError(\"patterns must be a nonempty array\");\r\n        }\r\n        for (i = 0; i < patterns.length; ++i) {\r\n            pattern = patterns[i];\r\n            if (self.isRegExp(pattern)) {\r\n                numPriorCaptures = numCaptures;\r\n                captureNames = (pattern.xregexp && pattern.xregexp.captureNames) || [];\r\n                // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns\r\n                // are independently valid; helps keep this simple. Named captures are put back\r\n                output.push(self(pattern.source).source.replace(parts, rewrite));\r\n            } else {\r\n                output.push(self.escape(pattern));\r\n            }\r\n        }\r\n        return self(output.join(\"|\"), flags);\r\n    };\r\n\r\n/**\r\n * The XRegExp version number.\r\n * @static\r\n * @memberOf XRegExp\r\n * @type String\r\n */\r\n    self.version = \"2.0.0\";\r\n\r\n/*--------------------------------------\r\n *  Fixed/extended native methods\r\n *------------------------------------*/\r\n\r\n/**\r\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\r\n * bugs in the native `RegExp.prototype.exec`. Calling `XRegExp.install('natives')` uses this to\r\n * override the native method. Use via `XRegExp.exec` without overriding natives.\r\n * @private\r\n * @param {String} str String to search.\r\n * @returns {Array} Match array with named backreference properties, or null.\r\n */\r\n    fixed.exec = function (str) {\r\n        var match, name, r2, origLastIndex, i;\r\n        if (!this.global) {\r\n            origLastIndex = this.lastIndex;\r\n        }\r\n        match = nativ.exec.apply(this, arguments);\r\n        if (match) {\r\n            // Fix browsers whose `exec` methods don't consistently return `undefined` for\r\n            // nonparticipating capturing groups\r\n            if (!compliantExecNpcg && match.length > 1 && lastIndexOf(match, \"\") > -1) {\r\n                r2 = new RegExp(this.source, nativ.replace.call(getNativeFlags(this), \"g\", \"\"));\r\n                // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed\r\n                // matching due to characters outside the match\r\n                nativ.replace.call(String(str).slice(match.index), r2, function () {\r\n                    var i;\r\n                    for (i = 1; i < arguments.length - 2; ++i) {\r\n                        if (arguments[i] === undef) {\r\n                            match[i] = undef;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            // Attach named capture properties\r\n            if (this.xregexp && this.xregexp.captureNames) {\r\n                for (i = 1; i < match.length; ++i) {\r\n                    name = this.xregexp.captureNames[i - 1];\r\n                    if (name) {\r\n                        match[name] = match[i];\r\n                    }\r\n                }\r\n            }\r\n            // Fix browsers that increment `lastIndex` after zero-length matches\r\n            if (this.global && !match[0].length && (this.lastIndex > match.index)) {\r\n                this.lastIndex = match.index;\r\n            }\r\n        }\r\n        if (!this.global) {\r\n            this.lastIndex = origLastIndex; // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\r\n        }\r\n        return match;\r\n    };\r\n\r\n/**\r\n * Fixes browser bugs in the native `RegExp.prototype.test`. Calling `XRegExp.install('natives')`\r\n * uses this to override the native method.\r\n * @private\r\n * @param {String} str String to search.\r\n * @returns {Boolean} Whether the regex matched the provided value.\r\n */\r\n    fixed.test = function (str) {\r\n        // Do this the easy way :-)\r\n        return !!fixed.exec.call(this, str);\r\n    };\r\n\r\n/**\r\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\r\n * bugs in the native `String.prototype.match`. Calling `XRegExp.install('natives')` uses this to\r\n * override the native method.\r\n * @private\r\n * @param {RegExp} regex Regex to search with.\r\n * @returns {Array} If `regex` uses flag g, an array of match strings or null. Without flag g, the\r\n *   result of calling `regex.exec(this)`.\r\n */\r\n    fixed.match = function (regex) {\r\n        if (!self.isRegExp(regex)) {\r\n            regex = new RegExp(regex); // Use native `RegExp`\r\n        } else if (regex.global) {\r\n            var result = nativ.match.apply(this, arguments);\r\n            regex.lastIndex = 0; // Fixes IE bug\r\n            return result;\r\n        }\r\n        return fixed.exec.call(regex, this);\r\n    };\r\n\r\n/**\r\n * Adds support for `${n}` tokens for named and numbered backreferences in replacement text, and\r\n * provides named backreferences to replacement functions as `arguments[0].name`. Also fixes\r\n * browser bugs in replacement text syntax when performing a replacement using a nonregex search\r\n * value, and the value of a replacement regex's `lastIndex` property during replacement iterations\r\n * and upon completion. Note that this doesn't support SpiderMonkey's proprietary third (`flags`)\r\n * argument. Calling `XRegExp.install('natives')` uses this to override the native method. Use via\r\n * `XRegExp.replace` without overriding natives.\r\n * @private\r\n * @param {RegExp|String} search Search pattern to be replaced.\r\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\r\n * @returns {String} New string with one or all matches replaced.\r\n */\r\n    fixed.replace = function (search, replacement) {\r\n        var isRegex = self.isRegExp(search), captureNames, result, str, origLastIndex;\r\n        if (isRegex) {\r\n            if (search.xregexp) {\r\n                captureNames = search.xregexp.captureNames;\r\n            }\r\n            if (!search.global) {\r\n                origLastIndex = search.lastIndex;\r\n            }\r\n        } else {\r\n            search += \"\";\r\n        }\r\n        if (isType(replacement, \"function\")) {\r\n            result = nativ.replace.call(String(this), search, function () {\r\n                var args = arguments, i;\r\n                if (captureNames) {\r\n                    // Change the `arguments[0]` string primitive to a `String` object that can store properties\r\n                    args[0] = new String(args[0]);\r\n                    // Store named backreferences on the first argument\r\n                    for (i = 0; i < captureNames.length; ++i) {\r\n                        if (captureNames[i]) {\r\n                            args[0][captureNames[i]] = args[i + 1];\r\n                        }\r\n                    }\r\n                }\r\n                // Update `lastIndex` before calling `replacement`.\r\n                // Fixes IE, Chrome, Firefox, Safari bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)\r\n                if (isRegex && search.global) {\r\n                    search.lastIndex = args[args.length - 2] + args[0].length;\r\n                }\r\n                return replacement.apply(null, args);\r\n            });\r\n        } else {\r\n            str = String(this); // Ensure `args[args.length - 1]` will be a string when given nonstring `this`\r\n            result = nativ.replace.call(str, search, function () {\r\n                var args = arguments; // Keep this function's `arguments` available through closure\r\n                return nativ.replace.call(String(replacement), replacementToken, function ($0, $1, $2) {\r\n                    var n;\r\n                    // Named or numbered backreference with curly brackets\r\n                    if ($1) {\r\n                        /* XRegExp behavior for `${n}`:\r\n                         * 1. Backreference to numbered capture, where `n` is 1+ digits. `0`, `00`, etc. is the entire match.\r\n                         * 2. Backreference to named capture `n`, if it exists and is not a number overridden by numbered capture.\r\n                         * 3. Otherwise, it's an error.\r\n                         */\r\n                        n = +$1; // Type-convert; drop leading zeros\r\n                        if (n <= args.length - 3) {\r\n                            return args[n] || \"\";\r\n                        }\r\n                        n = captureNames ? lastIndexOf(captureNames, $1) : -1;\r\n                        if (n < 0) {\r\n                            throw new SyntaxError(\"backreference to undefined group \" + $0);\r\n                        }\r\n                        return args[n + 1] || \"\";\r\n                    }\r\n                    // Else, special variable or numbered backreference (without curly brackets)\r\n                    if ($2 === \"$\") return \"$\";\r\n                    if ($2 === \"&\" || +$2 === 0) return args[0]; // $&, $0 (not followed by 1-9), $00\r\n                    if ($2 === \"`\") return args[args.length - 1].slice(0, args[args.length - 2]);\r\n                    if ($2 === \"'\") return args[args.length - 1].slice(args[args.length - 2] + args[0].length);\r\n                    // Else, numbered backreference (without curly brackets)\r\n                    $2 = +$2; // Type-convert; drop leading zero\r\n                    /* XRegExp behavior:\r\n                     * - Backreferences without curly brackets end after 1 or 2 digits. Use `${..}` for more digits.\r\n                     * - `$1` is an error if there are no capturing groups.\r\n                     * - `$10` is an error if there are less than 10 capturing groups. Use `${1}0` instead.\r\n                     * - `$01` is equivalent to `$1` if a capturing group exists, otherwise it's an error.\r\n                     * - `$0` (not followed by 1-9), `$00`, and `$&` are the entire match.\r\n                     * Native behavior, for comparison:\r\n                     * - Backreferences end after 1 or 2 digits. Cannot use backreference to capturing group 100+.\r\n                     * - `$1` is a literal `$1` if there are no capturing groups.\r\n                     * - `$10` is `$1` followed by a literal `0` if there are less than 10 capturing groups.\r\n                     * - `$01` is equivalent to `$1` if a capturing group exists, otherwise it's a literal `$01`.\r\n                     * - `$0` is a literal `$0`. `$&` is the entire match.\r\n                     */\r\n                    if (!isNaN($2)) {\r\n                        if ($2 > args.length - 3) {\r\n                            throw new SyntaxError(\"backreference to undefined group \" + $0);\r\n                        }\r\n                        return args[$2] || \"\";\r\n                    }\r\n                    throw new SyntaxError(\"invalid token \" + $0);\r\n                });\r\n            });\r\n        }\r\n        if (isRegex) {\r\n            if (search.global) {\r\n                search.lastIndex = 0; // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\r\n            } else {\r\n                search.lastIndex = origLastIndex; // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n/**\r\n * Fixes browser bugs in the native `String.prototype.split`. Calling `XRegExp.install('natives')`\r\n * uses this to override the native method. Use via `XRegExp.split` without overriding natives.\r\n * @private\r\n * @param {RegExp|String} separator Regex or string to use for separating the string.\r\n * @param {Number} [limit] Maximum number of items to include in the result array.\r\n * @returns {Array} Array of substrings.\r\n */\r\n    fixed.split = function (separator, limit) {\r\n        if (!self.isRegExp(separator)) {\r\n            return nativ.split.apply(this, arguments); // use faster native method\r\n        }\r\n        var str = String(this),\r\n            origLastIndex = separator.lastIndex,\r\n            output = [],\r\n            lastLastIndex = 0,\r\n            lastLength;\r\n        /* Values for `limit`, per the spec:\r\n         * If undefined: pow(2,32) - 1\r\n         * If 0, Infinity, or NaN: 0\r\n         * If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);\r\n         * If negative number: pow(2,32) - floor(abs(limit))\r\n         * If other: Type-convert, then use the above rules\r\n         */\r\n        limit = (limit === undef ? -1 : limit) >>> 0;\r\n        self.forEach(str, separator, function (match) {\r\n            if ((match.index + match[0].length) > lastLastIndex) { // != `if (match[0].length)`\r\n                output.push(str.slice(lastLastIndex, match.index));\r\n                if (match.length > 1 && match.index < str.length) {\r\n                    Array.prototype.push.apply(output, match.slice(1));\r\n                }\r\n                lastLength = match[0].length;\r\n                lastLastIndex = match.index + lastLength;\r\n            }\r\n        });\r\n        if (lastLastIndex === str.length) {\r\n            if (!nativ.test.call(separator, \"\") || lastLength) {\r\n                output.push(\"\");\r\n            }\r\n        } else {\r\n            output.push(str.slice(lastLastIndex));\r\n        }\r\n        separator.lastIndex = origLastIndex;\r\n        return output.length > limit ? output.slice(0, limit) : output;\r\n    };\r\n\r\n/*--------------------------------------\r\n *  Built-in tokens\r\n *------------------------------------*/\r\n\r\n// Shortcut\r\n    add = addToken.on;\r\n\r\n/* Letter identity escapes that natively match literal characters: \\p, \\P, etc.\r\n * Should be SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-\r\n * browser consistency and to reserve their syntax, but lets them be superseded by XRegExp addons.\r\n */\r\n    add(/\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\dA-Fa-f]{4})|x(?![\\dA-Fa-f]{2}))/,\r\n        function (match, scope) {\r\n            // \\B is allowed in default scope only\r\n            if (match[1] === \"B\" && scope === defaultScope) {\r\n                return match[0];\r\n            }\r\n            throw new SyntaxError(\"invalid escape \" + match[0]);\r\n        },\r\n        {scope: \"all\"});\r\n\r\n/* Empty character class: [] or [^]\r\n * Fixes a critical cross-browser syntax inconsistency. Unless this is standardized (per the spec),\r\n * regex syntax can't be accurately parsed because character class endings can't be determined.\r\n */\r\n    add(/\\[(\\^?)]/,\r\n        function (match) {\r\n            // For cross-browser compatibility with ES3, convert [] to \\b\\B and [^] to [\\s\\S].\r\n            // (?!) should work like \\b\\B, but is unreliable in Firefox\r\n            return match[1] ? \"[\\\\s\\\\S]\" : \"\\\\b\\\\B\";\r\n        });\r\n\r\n/* Comment pattern: (?# )\r\n * Inline comments are an alternative to the line comments allowed in free-spacing mode (flag x).\r\n */\r\n    add(/(?:\\(\\?#[^)]*\\))+/,\r\n        function (match) {\r\n            // Keep tokens separated unless the following token is a quantifier\r\n            return nativ.test.call(quantifier, match.input.slice(match.index + match[0].length)) ? \"\" : \"(?:)\";\r\n        });\r\n\r\n/* Named backreference: \\k<name>\r\n * Backreference names can use the characters A-Z, a-z, 0-9, _, and $ only.\r\n */\r\n    add(/\\\\k<([\\w$]+)>/,\r\n        function (match) {\r\n            var index = isNaN(match[1]) ? (lastIndexOf(this.captureNames, match[1]) + 1) : +match[1],\r\n                endIndex = match.index + match[0].length;\r\n            if (!index || index > this.captureNames.length) {\r\n                throw new SyntaxError(\"backreference to undefined group \" + match[0]);\r\n            }\r\n            // Keep backreferences separate from subsequent literal numbers\r\n            return \"\\\\\" + index + (\r\n                endIndex === match.input.length || isNaN(match.input.charAt(endIndex)) ? \"\" : \"(?:)\"\r\n            );\r\n        });\r\n\r\n/* Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.\r\n */\r\n    add(/(?:\\s+|#.*)+/,\r\n        function (match) {\r\n            // Keep tokens separated unless the following token is a quantifier\r\n            return nativ.test.call(quantifier, match.input.slice(match.index + match[0].length)) ? \"\" : \"(?:)\";\r\n        },\r\n        {\r\n            trigger: function () {\r\n                return this.hasFlag(\"x\");\r\n            },\r\n            customFlags: \"x\"\r\n        });\r\n\r\n/* Dot, in dotall mode (aka singleline mode, flag s) only.\r\n */\r\n    add(/\\./,\r\n        function () {\r\n            return \"[\\\\s\\\\S]\";\r\n        },\r\n        {\r\n            trigger: function () {\r\n                return this.hasFlag(\"s\");\r\n            },\r\n            customFlags: \"s\"\r\n        });\r\n\r\n/* Named capturing group; match the opening delimiter only: (?<name>\r\n * Capture names can use the characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers.\r\n * Supports Python-style (?P<name> as an alternate syntax to avoid issues in recent Opera (which\r\n * natively supports the Python-style syntax). Otherwise, XRegExp might treat numbered\r\n * backreferences to Python-style named capture as octals.\r\n */\r\n    add(/\\(\\?P?<([\\w$]+)>/,\r\n        function (match) {\r\n            if (!isNaN(match[1])) {\r\n                // Avoid incorrect lookups, since named backreferences are added to match arrays\r\n                throw new SyntaxError(\"can't use integer as capture name \" + match[0]);\r\n            }\r\n            this.captureNames.push(match[1]);\r\n            this.hasNamedCapture = true;\r\n            return \"(\";\r\n        });\r\n\r\n/* Numbered backreference or octal, plus any following digits: \\0, \\11, etc.\r\n * Octals except \\0 not followed by 0-9 and backreferences to unopened capture groups throw an\r\n * error. Other matches are returned unaltered. IE <= 8 doesn't support backreferences greater than\r\n * \\99 in regex syntax.\r\n */\r\n    add(/\\\\(\\d+)/,\r\n        function (match, scope) {\r\n            if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) &&\r\n                    match[1] !== \"0\") {\r\n                throw new SyntaxError(\"can't use octal escape or backreference to undefined group \" + match[0]);\r\n            }\r\n            return match[0];\r\n        },\r\n        {scope: \"all\"});\r\n\r\n/* Capturing group; match the opening parenthesis only.\r\n * Required for support of named capturing groups. Also adds explicit capture mode (flag n).\r\n */\r\n    add(/\\((?!\\?)/,\r\n        function () {\r\n            if (this.hasFlag(\"n\")) {\r\n                return \"(?:\";\r\n            }\r\n            this.captureNames.push(null);\r\n            return \"(\";\r\n        },\r\n        {customFlags: \"n\"});\r\n\r\n/*--------------------------------------\r\n *  Expose XRegExp\r\n *------------------------------------*/\r\n\r\n// For CommonJS enviroments\r\n    if (typeof exports !== \"undefined\") {\r\n        exports.XRegExp = self;\r\n    }\r\n\r\n    return self;\r\n\r\n}());\r\n\r\n\n/***** unicode-base.js *****/\n\n/*!\r\n * XRegExp Unicode Base v1.0.0\r\n * (c) 2008-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Uses Unicode 6.1 <http://unicode.org/>\r\n */\r\n\r\n/**\r\n * Adds support for the `\\p{L}` or `\\p{Letter}` Unicode category. Addon packages for other Unicode\r\n * categories, scripts, blocks, and properties are available separately. All Unicode tokens can be\r\n * inverted using `\\P{..}` or `\\p{^..}`. Token names are case insensitive, and any spaces, hyphens,\r\n * and underscores are ignored.\r\n * @requires XRegExp\r\n */\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n    var unicode = {};\r\n\r\n/*--------------------------------------\r\n *  Private helper functions\r\n *------------------------------------*/\r\n\r\n// Generates a standardized token name (lowercase, with hyphens, spaces, and underscores removed)\r\n    function slug(name) {\r\n        return name.replace(/[- _]+/g, \"\").toLowerCase();\r\n    }\r\n\r\n// Expands a list of Unicode code points and ranges to be usable in a regex character class\r\n    function expand(str) {\r\n        return str.replace(/\\w{4}/g, \"\\\\u$&\");\r\n    }\r\n\r\n// Adds leading zeros if shorter than four characters\r\n    function pad4(str) {\r\n        while (str.length < 4) {\r\n            str = \"0\" + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n// Converts a hexadecimal number to decimal\r\n    function dec(hex) {\r\n        return parseInt(hex, 16);\r\n    }\r\n\r\n// Converts a decimal number to hexadecimal\r\n    function hex(dec) {\r\n        return parseInt(dec, 10).toString(16);\r\n    }\r\n\r\n// Inverts a list of Unicode code points and ranges\r\n    function invert(range) {\r\n        var output = [],\r\n            lastEnd = -1,\r\n            start;\r\n        XRegExp.forEach(range, /\\\\u(\\w{4})(?:-\\\\u(\\w{4}))?/, function (m) {\r\n            start = dec(m[1]);\r\n            if (start > (lastEnd + 1)) {\r\n                output.push(\"\\\\u\" + pad4(hex(lastEnd + 1)));\r\n                if (start > (lastEnd + 2)) {\r\n                    output.push(\"-\\\\u\" + pad4(hex(start - 1)));\r\n                }\r\n            }\r\n            lastEnd = dec(m[2] || m[1]);\r\n        });\r\n        if (lastEnd < 0xFFFF) {\r\n            output.push(\"\\\\u\" + pad4(hex(lastEnd + 1)));\r\n            if (lastEnd < 0xFFFE) {\r\n                output.push(\"-\\\\uFFFF\");\r\n            }\r\n        }\r\n        return output.join(\"\");\r\n    }\r\n\r\n// Generates an inverted token on first use\r\n    function cacheInversion(item) {\r\n        return unicode[\"^\" + item] || (unicode[\"^\" + item] = invert(unicode[item]));\r\n    }\r\n\r\n/*--------------------------------------\r\n *  Core functionality\r\n *------------------------------------*/\r\n\r\n    XRegExp.install(\"extensibility\");\r\n\r\n/**\r\n * Adds to the list of Unicode properties that XRegExp regexes can match via \\p{..} or \\P{..}.\r\n * @memberOf XRegExp\r\n * @param {Object} pack Named sets of Unicode code points and ranges.\r\n * @param {Object} [aliases] Aliases for the primary token names.\r\n * @example\r\n *\r\n * XRegExp.addUnicodePackage({\r\n *   XDigit: '0030-00390041-00460061-0066' // 0-9A-Fa-f\r\n * }, {\r\n *   XDigit: 'Hexadecimal'\r\n * });\r\n */\r\n    XRegExp.addUnicodePackage = function (pack, aliases) {\r\n        var p;\r\n        if (!XRegExp.isInstalled(\"extensibility\")) {\r\n            throw new Error(\"extensibility must be installed before adding Unicode packages\");\r\n        }\r\n        if (pack) {\r\n            for (p in pack) {\r\n                if (pack.hasOwnProperty(p)) {\r\n                    unicode[slug(p)] = expand(pack[p]);\r\n                }\r\n            }\r\n        }\r\n        if (aliases) {\r\n            for (p in aliases) {\r\n                if (aliases.hasOwnProperty(p)) {\r\n                    unicode[slug(aliases[p])] = unicode[slug(p)];\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n/* Adds data for the Unicode `Letter` category. Addon packages include other categories, scripts,\r\n * blocks, and properties.\r\n */\r\n    XRegExp.addUnicodePackage({\r\n        L: \"0041-005A0061-007A00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE0370-037403760377037A-037D03860388-038A038C038E-03A103A3-03F503F7-0481048A-05270531-055605590561-058705D0-05EA05F0-05F20620-064A066E066F0671-06D306D506E506E606EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA07F407F507FA0800-0815081A082408280840-085808A008A2-08AC0904-0939093D09500958-09610971-09770979-097F0985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E460E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EC60EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA1700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317D717DC1820-18771880-18A818AA18B0-18F51900-191C1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541AA71B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF11CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E218321842C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2E2F300530063031-3035303B303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA67F-A697A6A0-A6E5A717-A71FA722-A788A78B-A78EA790-A793A7A0-A7AAA7F8-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2A9CFAA00-AA28AA40-AA42AA44-AA4BAA60-AA76AA7AAA80-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADB-AADDAAE0-AAEAAAF2-AAF4AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\"\r\n    }, {\r\n        L: \"Letter\"\r\n    });\r\n\r\n/* Adds Unicode property syntax to XRegExp: \\p{..}, \\P{..}, \\p{^..}\r\n */\r\n    XRegExp.addToken(\r\n        /\\\\([pP]){(\\^?)([^}]*)}/,\r\n        function (match, scope) {\r\n            var inv = (match[1] === \"P\" || match[2]) ? \"^\" : \"\",\r\n                item = slug(match[3]);\r\n            // The double negative \\P{^..} is invalid\r\n            if (match[1] === \"P\" && match[2]) {\r\n                throw new SyntaxError(\"invalid double negation \\\\P{^\");\r\n            }\r\n            if (!unicode.hasOwnProperty(item)) {\r\n                throw new SyntaxError(\"invalid or unknown Unicode property \" + match[0]);\r\n            }\r\n            return scope === \"class\" ?\r\n                    (inv ? cacheInversion(item) : unicode[item]) :\r\n                    \"[\" + inv + unicode[item] + \"]\";\r\n        },\r\n        {scope: \"all\"}\r\n    );\r\n\r\n}(XRegExp));\r\n\r\n\n/***** unicode-categories.js *****/\n\n/*!\r\n * XRegExp Unicode Categories v1.2.0\r\n * (c) 2010-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Uses Unicode 6.1 <http://unicode.org/>\r\n */\r\n\r\n/**\r\n * Adds support for all Unicode categories (aka properties) E.g., `\\p{Lu}` or\r\n * `\\p{Uppercase Letter}`. Token names are case insensitive, and any spaces, hyphens, and\r\n * underscores are ignored.\r\n * @requires XRegExp, XRegExp Unicode Base\r\n */\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n    if (!XRegExp.addUnicodePackage) {\r\n        throw new ReferenceError(\"Unicode Base must be loaded before Unicode Categories\");\r\n    }\r\n\r\n    XRegExp.install(\"extensibility\");\r\n\r\n    XRegExp.addUnicodePackage({\r\n        //L: \"\", // Included in the Unicode Base addon\r\n        Ll: \"0061-007A00B500DF-00F600F8-00FF01010103010501070109010B010D010F01110113011501170119011B011D011F01210123012501270129012B012D012F01310133013501370138013A013C013E014001420144014601480149014B014D014F01510153015501570159015B015D015F01610163016501670169016B016D016F0171017301750177017A017C017E-0180018301850188018C018D019201950199-019B019E01A101A301A501A801AA01AB01AD01B001B401B601B901BA01BD-01BF01C601C901CC01CE01D001D201D401D601D801DA01DC01DD01DF01E101E301E501E701E901EB01ED01EF01F001F301F501F901FB01FD01FF02010203020502070209020B020D020F02110213021502170219021B021D021F02210223022502270229022B022D022F02310233-0239023C023F0240024202470249024B024D024F-02930295-02AF037103730377037B-037D039003AC-03CE03D003D103D5-03D703D903DB03DD03DF03E103E303E503E703E903EB03ED03EF-03F303F503F803FB03FC0430-045F04610463046504670469046B046D046F04710473047504770479047B047D047F0481048B048D048F04910493049504970499049B049D049F04A104A304A504A704A904AB04AD04AF04B104B304B504B704B904BB04BD04BF04C204C404C604C804CA04CC04CE04CF04D104D304D504D704D904DB04DD04DF04E104E304E504E704E904EB04ED04EF04F104F304F504F704F904FB04FD04FF05010503050505070509050B050D050F05110513051505170519051B051D051F05210523052505270561-05871D00-1D2B1D6B-1D771D79-1D9A1E011E031E051E071E091E0B1E0D1E0F1E111E131E151E171E191E1B1E1D1E1F1E211E231E251E271E291E2B1E2D1E2F1E311E331E351E371E391E3B1E3D1E3F1E411E431E451E471E491E4B1E4D1E4F1E511E531E551E571E591E5B1E5D1E5F1E611E631E651E671E691E6B1E6D1E6F1E711E731E751E771E791E7B1E7D1E7F1E811E831E851E871E891E8B1E8D1E8F1E911E931E95-1E9D1E9F1EA11EA31EA51EA71EA91EAB1EAD1EAF1EB11EB31EB51EB71EB91EBB1EBD1EBF1EC11EC31EC51EC71EC91ECB1ECD1ECF1ED11ED31ED51ED71ED91EDB1EDD1EDF1EE11EE31EE51EE71EE91EEB1EED1EEF1EF11EF31EF51EF71EF91EFB1EFD1EFF-1F071F10-1F151F20-1F271F30-1F371F40-1F451F50-1F571F60-1F671F70-1F7D1F80-1F871F90-1F971FA0-1FA71FB0-1FB41FB61FB71FBE1FC2-1FC41FC61FC71FD0-1FD31FD61FD71FE0-1FE71FF2-1FF41FF61FF7210A210E210F2113212F21342139213C213D2146-2149214E21842C30-2C5E2C612C652C662C682C6A2C6C2C712C732C742C76-2C7B2C812C832C852C872C892C8B2C8D2C8F2C912C932C952C972C992C9B2C9D2C9F2CA12CA32CA52CA72CA92CAB2CAD2CAF2CB12CB32CB52CB72CB92CBB2CBD2CBF2CC12CC32CC52CC72CC92CCB2CCD2CCF2CD12CD32CD52CD72CD92CDB2CDD2CDF2CE12CE32CE42CEC2CEE2CF32D00-2D252D272D2DA641A643A645A647A649A64BA64DA64FA651A653A655A657A659A65BA65DA65FA661A663A665A667A669A66BA66DA681A683A685A687A689A68BA68DA68FA691A693A695A697A723A725A727A729A72BA72DA72F-A731A733A735A737A739A73BA73DA73FA741A743A745A747A749A74BA74DA74FA751A753A755A757A759A75BA75DA75FA761A763A765A767A769A76BA76DA76FA771-A778A77AA77CA77FA781A783A785A787A78CA78EA791A793A7A1A7A3A7A5A7A7A7A9A7FAFB00-FB06FB13-FB17FF41-FF5A\",\r\n        Lu: \"0041-005A00C0-00D600D8-00DE01000102010401060108010A010C010E01100112011401160118011A011C011E01200122012401260128012A012C012E01300132013401360139013B013D013F0141014301450147014A014C014E01500152015401560158015A015C015E01600162016401660168016A016C016E017001720174017601780179017B017D018101820184018601870189-018B018E-0191019301940196-0198019C019D019F01A001A201A401A601A701A901AC01AE01AF01B1-01B301B501B701B801BC01C401C701CA01CD01CF01D101D301D501D701D901DB01DE01E001E201E401E601E801EA01EC01EE01F101F401F6-01F801FA01FC01FE02000202020402060208020A020C020E02100212021402160218021A021C021E02200222022402260228022A022C022E02300232023A023B023D023E02410243-02460248024A024C024E03700372037603860388-038A038C038E038F0391-03A103A3-03AB03CF03D2-03D403D803DA03DC03DE03E003E203E403E603E803EA03EC03EE03F403F703F903FA03FD-042F04600462046404660468046A046C046E04700472047404760478047A047C047E0480048A048C048E04900492049404960498049A049C049E04A004A204A404A604A804AA04AC04AE04B004B204B404B604B804BA04BC04BE04C004C104C304C504C704C904CB04CD04D004D204D404D604D804DA04DC04DE04E004E204E404E604E804EA04EC04EE04F004F204F404F604F804FA04FC04FE05000502050405060508050A050C050E05100512051405160518051A051C051E05200522052405260531-055610A0-10C510C710CD1E001E021E041E061E081E0A1E0C1E0E1E101E121E141E161E181E1A1E1C1E1E1E201E221E241E261E281E2A1E2C1E2E1E301E321E341E361E381E3A1E3C1E3E1E401E421E441E461E481E4A1E4C1E4E1E501E521E541E561E581E5A1E5C1E5E1E601E621E641E661E681E6A1E6C1E6E1E701E721E741E761E781E7A1E7C1E7E1E801E821E841E861E881E8A1E8C1E8E1E901E921E941E9E1EA01EA21EA41EA61EA81EAA1EAC1EAE1EB01EB21EB41EB61EB81EBA1EBC1EBE1EC01EC21EC41EC61EC81ECA1ECC1ECE1ED01ED21ED41ED61ED81EDA1EDC1EDE1EE01EE21EE41EE61EE81EEA1EEC1EEE1EF01EF21EF41EF61EF81EFA1EFC1EFE1F08-1F0F1F18-1F1D1F28-1F2F1F38-1F3F1F48-1F4D1F591F5B1F5D1F5F1F68-1F6F1FB8-1FBB1FC8-1FCB1FD8-1FDB1FE8-1FEC1FF8-1FFB21022107210B-210D2110-211221152119-211D212421262128212A-212D2130-2133213E213F214521832C00-2C2E2C602C62-2C642C672C692C6B2C6D-2C702C722C752C7E-2C802C822C842C862C882C8A2C8C2C8E2C902C922C942C962C982C9A2C9C2C9E2CA02CA22CA42CA62CA82CAA2CAC2CAE2CB02CB22CB42CB62CB82CBA2CBC2CBE2CC02CC22CC42CC62CC82CCA2CCC2CCE2CD02CD22CD42CD62CD82CDA2CDC2CDE2CE02CE22CEB2CED2CF2A640A642A644A646A648A64AA64CA64EA650A652A654A656A658A65AA65CA65EA660A662A664A666A668A66AA66CA680A682A684A686A688A68AA68CA68EA690A692A694A696A722A724A726A728A72AA72CA72EA732A734A736A738A73AA73CA73EA740A742A744A746A748A74AA74CA74EA750A752A754A756A758A75AA75CA75EA760A762A764A766A768A76AA76CA76EA779A77BA77DA77EA780A782A784A786A78BA78DA790A792A7A0A7A2A7A4A7A6A7A8A7AAFF21-FF3A\",\r\n        Lt: \"01C501C801CB01F21F88-1F8F1F98-1F9F1FA8-1FAF1FBC1FCC1FFC\",\r\n        Lm: \"02B0-02C102C6-02D102E0-02E402EC02EE0374037A0559064006E506E607F407F507FA081A0824082809710E460EC610FC17D718431AA71C78-1C7D1D2C-1D6A1D781D9B-1DBF2071207F2090-209C2C7C2C7D2D6F2E2F30053031-3035303B309D309E30FC-30FEA015A4F8-A4FDA60CA67FA717-A71FA770A788A7F8A7F9A9CFAA70AADDAAF3AAF4FF70FF9EFF9F\",\r\n        Lo: \"00AA00BA01BB01C0-01C3029405D0-05EA05F0-05F20620-063F0641-064A066E066F0671-06D306D506EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA0800-08150840-085808A008A2-08AC0904-0939093D09500958-09610972-09770979-097F0985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E450E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10D0-10FA10FD-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA1700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317DC1820-18421844-18771880-18A818AA18B0-18F51900-191C1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C771CE9-1CEC1CEE-1CF11CF51CF62135-21382D30-2D672D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE3006303C3041-3096309F30A1-30FA30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A014A016-A48CA4D0-A4F7A500-A60BA610-A61FA62AA62BA66EA6A0-A6E5A7FB-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2AA00-AA28AA40-AA42AA44-AA4BAA60-AA6FAA71-AA76AA7AAA80-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADBAADCAAE0-AAEAAAF2AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF66-FF6FFF71-FF9DFFA0-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\",\r\n        M: \"0300-036F0483-04890591-05BD05BF05C105C205C405C505C70610-061A064B-065F067006D6-06DC06DF-06E406E706E806EA-06ED07110730-074A07A6-07B007EB-07F30816-0819081B-08230825-08270829-082D0859-085B08E4-08FE0900-0903093A-093C093E-094F0951-0957096209630981-098309BC09BE-09C409C709C809CB-09CD09D709E209E30A01-0A030A3C0A3E-0A420A470A480A4B-0A4D0A510A700A710A750A81-0A830ABC0ABE-0AC50AC7-0AC90ACB-0ACD0AE20AE30B01-0B030B3C0B3E-0B440B470B480B4B-0B4D0B560B570B620B630B820BBE-0BC20BC6-0BC80BCA-0BCD0BD70C01-0C030C3E-0C440C46-0C480C4A-0C4D0C550C560C620C630C820C830CBC0CBE-0CC40CC6-0CC80CCA-0CCD0CD50CD60CE20CE30D020D030D3E-0D440D46-0D480D4A-0D4D0D570D620D630D820D830DCA0DCF-0DD40DD60DD8-0DDF0DF20DF30E310E34-0E3A0E47-0E4E0EB10EB4-0EB90EBB0EBC0EC8-0ECD0F180F190F350F370F390F3E0F3F0F71-0F840F860F870F8D-0F970F99-0FBC0FC6102B-103E1056-1059105E-10601062-10641067-106D1071-10741082-108D108F109A-109D135D-135F1712-17141732-1734175217531772177317B4-17D317DD180B-180D18A91920-192B1930-193B19B0-19C019C819C91A17-1A1B1A55-1A5E1A60-1A7C1A7F1B00-1B041B34-1B441B6B-1B731B80-1B821BA1-1BAD1BE6-1BF31C24-1C371CD0-1CD21CD4-1CE81CED1CF2-1CF41DC0-1DE61DFC-1DFF20D0-20F02CEF-2CF12D7F2DE0-2DFF302A-302F3099309AA66F-A672A674-A67DA69FA6F0A6F1A802A806A80BA823-A827A880A881A8B4-A8C4A8E0-A8F1A926-A92DA947-A953A980-A983A9B3-A9C0AA29-AA36AA43AA4CAA4DAA7BAAB0AAB2-AAB4AAB7AAB8AABEAABFAAC1AAEB-AAEFAAF5AAF6ABE3-ABEAABECABEDFB1EFE00-FE0FFE20-FE26\",\r\n        Mn: \"0300-036F0483-04870591-05BD05BF05C105C205C405C505C70610-061A064B-065F067006D6-06DC06DF-06E406E706E806EA-06ED07110730-074A07A6-07B007EB-07F30816-0819081B-08230825-08270829-082D0859-085B08E4-08FE0900-0902093A093C0941-0948094D0951-095709620963098109BC09C1-09C409CD09E209E30A010A020A3C0A410A420A470A480A4B-0A4D0A510A700A710A750A810A820ABC0AC1-0AC50AC70AC80ACD0AE20AE30B010B3C0B3F0B41-0B440B4D0B560B620B630B820BC00BCD0C3E-0C400C46-0C480C4A-0C4D0C550C560C620C630CBC0CBF0CC60CCC0CCD0CE20CE30D41-0D440D4D0D620D630DCA0DD2-0DD40DD60E310E34-0E3A0E47-0E4E0EB10EB4-0EB90EBB0EBC0EC8-0ECD0F180F190F350F370F390F71-0F7E0F80-0F840F860F870F8D-0F970F99-0FBC0FC6102D-10301032-10371039103A103D103E10581059105E-10601071-1074108210851086108D109D135D-135F1712-17141732-1734175217531772177317B417B517B7-17BD17C617C9-17D317DD180B-180D18A91920-19221927192819321939-193B1A171A181A561A58-1A5E1A601A621A65-1A6C1A73-1A7C1A7F1B00-1B031B341B36-1B3A1B3C1B421B6B-1B731B801B811BA2-1BA51BA81BA91BAB1BE61BE81BE91BED1BEF-1BF11C2C-1C331C361C371CD0-1CD21CD4-1CE01CE2-1CE81CED1CF41DC0-1DE61DFC-1DFF20D0-20DC20E120E5-20F02CEF-2CF12D7F2DE0-2DFF302A-302D3099309AA66FA674-A67DA69FA6F0A6F1A802A806A80BA825A826A8C4A8E0-A8F1A926-A92DA947-A951A980-A982A9B3A9B6-A9B9A9BCAA29-AA2EAA31AA32AA35AA36AA43AA4CAAB0AAB2-AAB4AAB7AAB8AABEAABFAAC1AAECAAEDAAF6ABE5ABE8ABEDFB1EFE00-FE0FFE20-FE26\",\r\n        Mc: \"0903093B093E-09400949-094C094E094F0982098309BE-09C009C709C809CB09CC09D70A030A3E-0A400A830ABE-0AC00AC90ACB0ACC0B020B030B3E0B400B470B480B4B0B4C0B570BBE0BBF0BC10BC20BC6-0BC80BCA-0BCC0BD70C01-0C030C41-0C440C820C830CBE0CC0-0CC40CC70CC80CCA0CCB0CD50CD60D020D030D3E-0D400D46-0D480D4A-0D4C0D570D820D830DCF-0DD10DD8-0DDF0DF20DF30F3E0F3F0F7F102B102C10311038103B103C105610571062-10641067-106D108310841087-108C108F109A-109C17B617BE-17C517C717C81923-19261929-192B193019311933-193819B0-19C019C819C91A19-1A1B1A551A571A611A631A641A6D-1A721B041B351B3B1B3D-1B411B431B441B821BA11BA61BA71BAA1BAC1BAD1BE71BEA-1BEC1BEE1BF21BF31C24-1C2B1C341C351CE11CF21CF3302E302FA823A824A827A880A881A8B4-A8C3A952A953A983A9B4A9B5A9BAA9BBA9BD-A9C0AA2FAA30AA33AA34AA4DAA7BAAEBAAEEAAEFAAF5ABE3ABE4ABE6ABE7ABE9ABEAABEC\",\r\n        Me: \"0488048920DD-20E020E2-20E4A670-A672\",\r\n        N: \"0030-003900B200B300B900BC-00BE0660-066906F0-06F907C0-07C90966-096F09E6-09EF09F4-09F90A66-0A6F0AE6-0AEF0B66-0B6F0B72-0B770BE6-0BF20C66-0C6F0C78-0C7E0CE6-0CEF0D66-0D750E50-0E590ED0-0ED90F20-0F331040-10491090-10991369-137C16EE-16F017E0-17E917F0-17F91810-18191946-194F19D0-19DA1A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C5920702074-20792080-20892150-21822185-21892460-249B24EA-24FF2776-27932CFD30073021-30293038-303A3192-31953220-32293248-324F3251-325F3280-328932B1-32BFA620-A629A6E6-A6EFA830-A835A8D0-A8D9A900-A909A9D0-A9D9AA50-AA59ABF0-ABF9FF10-FF19\",\r\n        Nd: \"0030-00390660-066906F0-06F907C0-07C90966-096F09E6-09EF0A66-0A6F0AE6-0AEF0B66-0B6F0BE6-0BEF0C66-0C6F0CE6-0CEF0D66-0D6F0E50-0E590ED0-0ED90F20-0F291040-10491090-109917E0-17E91810-18191946-194F19D0-19D91A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C59A620-A629A8D0-A8D9A900-A909A9D0-A9D9AA50-AA59ABF0-ABF9FF10-FF19\",\r\n        Nl: \"16EE-16F02160-21822185-218830073021-30293038-303AA6E6-A6EF\",\r\n        No: \"00B200B300B900BC-00BE09F4-09F90B72-0B770BF0-0BF20C78-0C7E0D70-0D750F2A-0F331369-137C17F0-17F919DA20702074-20792080-20892150-215F21892460-249B24EA-24FF2776-27932CFD3192-31953220-32293248-324F3251-325F3280-328932B1-32BFA830-A835\",\r\n        P: \"0021-00230025-002A002C-002F003A003B003F0040005B-005D005F007B007D00A100A700AB00B600B700BB00BF037E0387055A-055F0589058A05BE05C005C305C605F305F40609060A060C060D061B061E061F066A-066D06D40700-070D07F7-07F90830-083E085E0964096509700AF00DF40E4F0E5A0E5B0F04-0F120F140F3A-0F3D0F850FD0-0FD40FD90FDA104A-104F10FB1360-13681400166D166E169B169C16EB-16ED1735173617D4-17D617D8-17DA1800-180A194419451A1E1A1F1AA0-1AA61AA8-1AAD1B5A-1B601BFC-1BFF1C3B-1C3F1C7E1C7F1CC0-1CC71CD32010-20272030-20432045-20512053-205E207D207E208D208E2329232A2768-277527C527C627E6-27EF2983-299829D8-29DB29FC29FD2CF9-2CFC2CFE2CFF2D702E00-2E2E2E30-2E3B3001-30033008-30113014-301F3030303D30A030FBA4FEA4FFA60D-A60FA673A67EA6F2-A6F7A874-A877A8CEA8CFA8F8-A8FAA92EA92FA95FA9C1-A9CDA9DEA9DFAA5C-AA5FAADEAADFAAF0AAF1ABEBFD3EFD3FFE10-FE19FE30-FE52FE54-FE61FE63FE68FE6AFE6BFF01-FF03FF05-FF0AFF0C-FF0FFF1AFF1BFF1FFF20FF3B-FF3DFF3FFF5BFF5DFF5F-FF65\",\r\n        Pd: \"002D058A05BE140018062010-20152E172E1A2E3A2E3B301C303030A0FE31FE32FE58FE63FF0D\",\r\n        Ps: \"0028005B007B0F3A0F3C169B201A201E2045207D208D23292768276A276C276E27702772277427C527E627E827EA27EC27EE2983298529872989298B298D298F299129932995299729D829DA29FC2E222E242E262E283008300A300C300E3010301430163018301A301DFD3EFE17FE35FE37FE39FE3BFE3DFE3FFE41FE43FE47FE59FE5BFE5DFF08FF3BFF5BFF5FFF62\",\r\n        Pe: \"0029005D007D0F3B0F3D169C2046207E208E232A2769276B276D276F27712773277527C627E727E927EB27ED27EF298429862988298A298C298E2990299229942996299829D929DB29FD2E232E252E272E293009300B300D300F3011301530173019301B301E301FFD3FFE18FE36FE38FE3AFE3CFE3EFE40FE42FE44FE48FE5AFE5CFE5EFF09FF3DFF5DFF60FF63\",\r\n        Pi: \"00AB2018201B201C201F20392E022E042E092E0C2E1C2E20\",\r\n        Pf: \"00BB2019201D203A2E032E052E0A2E0D2E1D2E21\",\r\n        Pc: \"005F203F20402054FE33FE34FE4D-FE4FFF3F\",\r\n        Po: \"0021-00230025-0027002A002C002E002F003A003B003F0040005C00A100A700B600B700BF037E0387055A-055F058905C005C305C605F305F40609060A060C060D061B061E061F066A-066D06D40700-070D07F7-07F90830-083E085E0964096509700AF00DF40E4F0E5A0E5B0F04-0F120F140F850FD0-0FD40FD90FDA104A-104F10FB1360-1368166D166E16EB-16ED1735173617D4-17D617D8-17DA1800-18051807-180A194419451A1E1A1F1AA0-1AA61AA8-1AAD1B5A-1B601BFC-1BFF1C3B-1C3F1C7E1C7F1CC0-1CC71CD3201620172020-20272030-2038203B-203E2041-20432047-205120532055-205E2CF9-2CFC2CFE2CFF2D702E002E012E06-2E082E0B2E0E-2E162E182E192E1B2E1E2E1F2E2A-2E2E2E30-2E393001-3003303D30FBA4FEA4FFA60D-A60FA673A67EA6F2-A6F7A874-A877A8CEA8CFA8F8-A8FAA92EA92FA95FA9C1-A9CDA9DEA9DFAA5C-AA5FAADEAADFAAF0AAF1ABEBFE10-FE16FE19FE30FE45FE46FE49-FE4CFE50-FE52FE54-FE57FE5F-FE61FE68FE6AFE6BFF01-FF03FF05-FF07FF0AFF0CFF0EFF0FFF1AFF1BFF1FFF20FF3CFF61FF64FF65\",\r\n        S: \"0024002B003C-003E005E0060007C007E00A2-00A600A800A900AC00AE-00B100B400B800D700F702C2-02C502D2-02DF02E5-02EB02ED02EF-02FF03750384038503F60482058F0606-0608060B060E060F06DE06E906FD06FE07F609F209F309FA09FB0AF10B700BF3-0BFA0C7F0D790E3F0F01-0F030F130F15-0F170F1A-0F1F0F340F360F380FBE-0FC50FC7-0FCC0FCE0FCF0FD5-0FD8109E109F1390-139917DB194019DE-19FF1B61-1B6A1B74-1B7C1FBD1FBF-1FC11FCD-1FCF1FDD-1FDF1FED-1FEF1FFD1FFE20442052207A-207C208A-208C20A0-20B9210021012103-21062108210921142116-2118211E-2123212521272129212E213A213B2140-2144214A-214D214F2190-2328232B-23F32400-24262440-244A249C-24E92500-26FF2701-27672794-27C427C7-27E527F0-29822999-29D729DC-29FB29FE-2B4C2B50-2B592CE5-2CEA2E80-2E992E9B-2EF32F00-2FD52FF0-2FFB300430123013302030363037303E303F309B309C319031913196-319F31C0-31E33200-321E322A-324732503260-327F328A-32B032C0-32FE3300-33FF4DC0-4DFFA490-A4C6A700-A716A720A721A789A78AA828-A82BA836-A839AA77-AA79FB29FBB2-FBC1FDFCFDFDFE62FE64-FE66FE69FF04FF0BFF1C-FF1EFF3EFF40FF5CFF5EFFE0-FFE6FFE8-FFEEFFFCFFFD\",\r\n        Sm: \"002B003C-003E007C007E00AC00B100D700F703F60606-060820442052207A-207C208A-208C21182140-2144214B2190-2194219A219B21A021A321A621AE21CE21CF21D221D421F4-22FF2308-230B23202321237C239B-23B323DC-23E125B725C125F8-25FF266F27C0-27C427C7-27E527F0-27FF2900-29822999-29D729DC-29FB29FE-2AFF2B30-2B442B47-2B4CFB29FE62FE64-FE66FF0BFF1C-FF1EFF5CFF5EFFE2FFE9-FFEC\",\r\n        Sc: \"002400A2-00A5058F060B09F209F309FB0AF10BF90E3F17DB20A0-20B9A838FDFCFE69FF04FFE0FFE1FFE5FFE6\",\r\n        Sk: \"005E006000A800AF00B400B802C2-02C502D2-02DF02E5-02EB02ED02EF-02FF0375038403851FBD1FBF-1FC11FCD-1FCF1FDD-1FDF1FED-1FEF1FFD1FFE309B309CA700-A716A720A721A789A78AFBB2-FBC1FF3EFF40FFE3\",\r\n        So: \"00A600A900AE00B00482060E060F06DE06E906FD06FE07F609FA0B700BF3-0BF80BFA0C7F0D790F01-0F030F130F15-0F170F1A-0F1F0F340F360F380FBE-0FC50FC7-0FCC0FCE0FCF0FD5-0FD8109E109F1390-1399194019DE-19FF1B61-1B6A1B74-1B7C210021012103-210621082109211421162117211E-2123212521272129212E213A213B214A214C214D214F2195-2199219C-219F21A121A221A421A521A7-21AD21AF-21CD21D021D121D321D5-21F32300-2307230C-231F2322-2328232B-237B237D-239A23B4-23DB23E2-23F32400-24262440-244A249C-24E92500-25B625B8-25C025C2-25F72600-266E2670-26FF2701-27672794-27BF2800-28FF2B00-2B2F2B452B462B50-2B592CE5-2CEA2E80-2E992E9B-2EF32F00-2FD52FF0-2FFB300430123013302030363037303E303F319031913196-319F31C0-31E33200-321E322A-324732503260-327F328A-32B032C0-32FE3300-33FF4DC0-4DFFA490-A4C6A828-A82BA836A837A839AA77-AA79FDFDFFE4FFE8FFEDFFEEFFFCFFFD\",\r\n        Z: \"002000A01680180E2000-200A20282029202F205F3000\",\r\n        Zs: \"002000A01680180E2000-200A202F205F3000\",\r\n        Zl: \"2028\",\r\n        Zp: \"2029\",\r\n        C: \"0000-001F007F-009F00AD03780379037F-0383038B038D03A20528-05300557055805600588058B-058E059005C8-05CF05EB-05EF05F5-0605061C061D06DD070E070F074B074C07B2-07BF07FB-07FF082E082F083F085C085D085F-089F08A108AD-08E308FF097809800984098D098E0991099209A909B109B3-09B509BA09BB09C509C609C909CA09CF-09D609D8-09DB09DE09E409E509FC-0A000A040A0B-0A0E0A110A120A290A310A340A370A3A0A3B0A3D0A43-0A460A490A4A0A4E-0A500A52-0A580A5D0A5F-0A650A76-0A800A840A8E0A920AA90AB10AB40ABA0ABB0AC60ACA0ACE0ACF0AD1-0ADF0AE40AE50AF2-0B000B040B0D0B0E0B110B120B290B310B340B3A0B3B0B450B460B490B4A0B4E-0B550B58-0B5B0B5E0B640B650B78-0B810B840B8B-0B8D0B910B96-0B980B9B0B9D0BA0-0BA20BA5-0BA70BAB-0BAD0BBA-0BBD0BC3-0BC50BC90BCE0BCF0BD1-0BD60BD8-0BE50BFB-0C000C040C0D0C110C290C340C3A-0C3C0C450C490C4E-0C540C570C5A-0C5F0C640C650C70-0C770C800C810C840C8D0C910CA90CB40CBA0CBB0CC50CC90CCE-0CD40CD7-0CDD0CDF0CE40CE50CF00CF3-0D010D040D0D0D110D3B0D3C0D450D490D4F-0D560D58-0D5F0D640D650D76-0D780D800D810D840D97-0D990DB20DBC0DBE0DBF0DC7-0DC90DCB-0DCE0DD50DD70DE0-0DF10DF5-0E000E3B-0E3E0E5C-0E800E830E850E860E890E8B0E8C0E8E-0E930E980EA00EA40EA60EA80EA90EAC0EBA0EBE0EBF0EC50EC70ECE0ECF0EDA0EDB0EE0-0EFF0F480F6D-0F700F980FBD0FCD0FDB-0FFF10C610C8-10CC10CE10CF1249124E124F12571259125E125F1289128E128F12B112B612B712BF12C112C612C712D7131113161317135B135C137D-137F139A-139F13F5-13FF169D-169F16F1-16FF170D1715-171F1737-173F1754-175F176D17711774-177F17DE17DF17EA-17EF17FA-17FF180F181A-181F1878-187F18AB-18AF18F6-18FF191D-191F192C-192F193C-193F1941-1943196E196F1975-197F19AC-19AF19CA-19CF19DB-19DD1A1C1A1D1A5F1A7D1A7E1A8A-1A8F1A9A-1A9F1AAE-1AFF1B4C-1B4F1B7D-1B7F1BF4-1BFB1C38-1C3A1C4A-1C4C1C80-1CBF1CC8-1CCF1CF7-1CFF1DE7-1DFB1F161F171F1E1F1F1F461F471F4E1F4F1F581F5A1F5C1F5E1F7E1F7F1FB51FC51FD41FD51FDC1FF01FF11FF51FFF200B-200F202A-202E2060-206F20722073208F209D-209F20BA-20CF20F1-20FF218A-218F23F4-23FF2427-243F244B-245F27002B4D-2B4F2B5A-2BFF2C2F2C5F2CF4-2CF82D262D28-2D2C2D2E2D2F2D68-2D6E2D71-2D7E2D97-2D9F2DA72DAF2DB72DBF2DC72DCF2DD72DDF2E3C-2E7F2E9A2EF4-2EFF2FD6-2FEF2FFC-2FFF3040309730983100-3104312E-3130318F31BB-31BF31E4-31EF321F32FF4DB6-4DBF9FCD-9FFFA48D-A48FA4C7-A4CFA62C-A63FA698-A69EA6F8-A6FFA78FA794-A79FA7AB-A7F7A82C-A82FA83A-A83FA878-A87FA8C5-A8CDA8DA-A8DFA8FC-A8FFA954-A95EA97D-A97FA9CEA9DA-A9DDA9E0-A9FFAA37-AA3FAA4EAA4FAA5AAA5BAA7C-AA7FAAC3-AADAAAF7-AB00AB07AB08AB0FAB10AB17-AB1FAB27AB2F-ABBFABEEABEFABFA-ABFFD7A4-D7AFD7C7-D7CAD7FC-F8FFFA6EFA6FFADA-FAFFFB07-FB12FB18-FB1CFB37FB3DFB3FFB42FB45FBC2-FBD2FD40-FD4FFD90FD91FDC8-FDEFFDFEFDFFFE1A-FE1FFE27-FE2FFE53FE67FE6C-FE6FFE75FEFD-FF00FFBF-FFC1FFC8FFC9FFD0FFD1FFD8FFD9FFDD-FFDFFFE7FFEF-FFFBFFFEFFFF\",\r\n        Cc: \"0000-001F007F-009F\",\r\n        Cf: \"00AD0600-060406DD070F200B-200F202A-202E2060-2064206A-206FFEFFFFF9-FFFB\",\r\n        Co: \"E000-F8FF\",\r\n        Cs: \"D800-DFFF\",\r\n        Cn: \"03780379037F-0383038B038D03A20528-05300557055805600588058B-058E059005C8-05CF05EB-05EF05F5-05FF0605061C061D070E074B074C07B2-07BF07FB-07FF082E082F083F085C085D085F-089F08A108AD-08E308FF097809800984098D098E0991099209A909B109B3-09B509BA09BB09C509C609C909CA09CF-09D609D8-09DB09DE09E409E509FC-0A000A040A0B-0A0E0A110A120A290A310A340A370A3A0A3B0A3D0A43-0A460A490A4A0A4E-0A500A52-0A580A5D0A5F-0A650A76-0A800A840A8E0A920AA90AB10AB40ABA0ABB0AC60ACA0ACE0ACF0AD1-0ADF0AE40AE50AF2-0B000B040B0D0B0E0B110B120B290B310B340B3A0B3B0B450B460B490B4A0B4E-0B550B58-0B5B0B5E0B640B650B78-0B810B840B8B-0B8D0B910B96-0B980B9B0B9D0BA0-0BA20BA5-0BA70BAB-0BAD0BBA-0BBD0BC3-0BC50BC90BCE0BCF0BD1-0BD60BD8-0BE50BFB-0C000C040C0D0C110C290C340C3A-0C3C0C450C490C4E-0C540C570C5A-0C5F0C640C650C70-0C770C800C810C840C8D0C910CA90CB40CBA0CBB0CC50CC90CCE-0CD40CD7-0CDD0CDF0CE40CE50CF00CF3-0D010D040D0D0D110D3B0D3C0D450D490D4F-0D560D58-0D5F0D640D650D76-0D780D800D810D840D97-0D990DB20DBC0DBE0DBF0DC7-0DC90DCB-0DCE0DD50DD70DE0-0DF10DF5-0E000E3B-0E3E0E5C-0E800E830E850E860E890E8B0E8C0E8E-0E930E980EA00EA40EA60EA80EA90EAC0EBA0EBE0EBF0EC50EC70ECE0ECF0EDA0EDB0EE0-0EFF0F480F6D-0F700F980FBD0FCD0FDB-0FFF10C610C8-10CC10CE10CF1249124E124F12571259125E125F1289128E128F12B112B612B712BF12C112C612C712D7131113161317135B135C137D-137F139A-139F13F5-13FF169D-169F16F1-16FF170D1715-171F1737-173F1754-175F176D17711774-177F17DE17DF17EA-17EF17FA-17FF180F181A-181F1878-187F18AB-18AF18F6-18FF191D-191F192C-192F193C-193F1941-1943196E196F1975-197F19AC-19AF19CA-19CF19DB-19DD1A1C1A1D1A5F1A7D1A7E1A8A-1A8F1A9A-1A9F1AAE-1AFF1B4C-1B4F1B7D-1B7F1BF4-1BFB1C38-1C3A1C4A-1C4C1C80-1CBF1CC8-1CCF1CF7-1CFF1DE7-1DFB1F161F171F1E1F1F1F461F471F4E1F4F1F581F5A1F5C1F5E1F7E1F7F1FB51FC51FD41FD51FDC1FF01FF11FF51FFF2065-206920722073208F209D-209F20BA-20CF20F1-20FF218A-218F23F4-23FF2427-243F244B-245F27002B4D-2B4F2B5A-2BFF2C2F2C5F2CF4-2CF82D262D28-2D2C2D2E2D2F2D68-2D6E2D71-2D7E2D97-2D9F2DA72DAF2DB72DBF2DC72DCF2DD72DDF2E3C-2E7F2E9A2EF4-2EFF2FD6-2FEF2FFC-2FFF3040309730983100-3104312E-3130318F31BB-31BF31E4-31EF321F32FF4DB6-4DBF9FCD-9FFFA48D-A48FA4C7-A4CFA62C-A63FA698-A69EA6F8-A6FFA78FA794-A79FA7AB-A7F7A82C-A82FA83A-A83FA878-A87FA8C5-A8CDA8DA-A8DFA8FC-A8FFA954-A95EA97D-A97FA9CEA9DA-A9DDA9E0-A9FFAA37-AA3FAA4EAA4FAA5AAA5BAA7C-AA7FAAC3-AADAAAF7-AB00AB07AB08AB0FAB10AB17-AB1FAB27AB2F-ABBFABEEABEFABFA-ABFFD7A4-D7AFD7C7-D7CAD7FC-D7FFFA6EFA6FFADA-FAFFFB07-FB12FB18-FB1CFB37FB3DFB3FFB42FB45FBC2-FBD2FD40-FD4FFD90FD91FDC8-FDEFFDFEFDFFFE1A-FE1FFE27-FE2FFE53FE67FE6C-FE6FFE75FEFDFEFEFF00FFBF-FFC1FFC8FFC9FFD0FFD1FFD8FFD9FFDD-FFDFFFE7FFEF-FFF8FFFEFFFF\"\r\n    }, {\r\n        //L: \"Letter\", // Included in the Unicode Base addon\r\n        Ll: \"Lowercase_Letter\",\r\n        Lu: \"Uppercase_Letter\",\r\n        Lt: \"Titlecase_Letter\",\r\n        Lm: \"Modifier_Letter\",\r\n        Lo: \"Other_Letter\",\r\n        M: \"Mark\",\r\n        Mn: \"Nonspacing_Mark\",\r\n        Mc: \"Spacing_Mark\",\r\n        Me: \"Enclosing_Mark\",\r\n        N: \"Number\",\r\n        Nd: \"Decimal_Number\",\r\n        Nl: \"Letter_Number\",\r\n        No: \"Other_Number\",\r\n        P: \"Punctuation\",\r\n        Pd: \"Dash_Punctuation\",\r\n        Ps: \"Open_Punctuation\",\r\n        Pe: \"Close_Punctuation\",\r\n        Pi: \"Initial_Punctuation\",\r\n        Pf: \"Final_Punctuation\",\r\n        Pc: \"Connector_Punctuation\",\r\n        Po: \"Other_Punctuation\",\r\n        S: \"Symbol\",\r\n        Sm: \"Math_Symbol\",\r\n        Sc: \"Currency_Symbol\",\r\n        Sk: \"Modifier_Symbol\",\r\n        So: \"Other_Symbol\",\r\n        Z: \"Separator\",\r\n        Zs: \"Space_Separator\",\r\n        Zl: \"Line_Separator\",\r\n        Zp: \"Paragraph_Separator\",\r\n        C: \"Other\",\r\n        Cc: \"Control\",\r\n        Cf: \"Format\",\r\n        Co: \"Private_Use\",\r\n        Cs: \"Surrogate\",\r\n        Cn: \"Unassigned\"\r\n    });\r\n\r\n}(XRegExp));\r\n\r\n\n/***** unicode-scripts.js *****/\n\n/*!\r\n * XRegExp Unicode Scripts v1.2.0\r\n * (c) 2010-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Uses Unicode 6.1 <http://unicode.org/>\r\n */\r\n\r\n/**\r\n * Adds support for all Unicode scripts in the Basic Multilingual Plane (U+0000-U+FFFF).\r\n * E.g., `\\p{Latin}`. Token names are case insensitive, and any spaces, hyphens, and underscores\r\n * are ignored.\r\n * @requires XRegExp, XRegExp Unicode Base\r\n */\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n    if (!XRegExp.addUnicodePackage) {\r\n        throw new ReferenceError(\"Unicode Base must be loaded before Unicode Scripts\");\r\n    }\r\n\r\n    XRegExp.install(\"extensibility\");\r\n\r\n    XRegExp.addUnicodePackage({\r\n        Arabic: \"0600-06040606-060B060D-061A061E0620-063F0641-064A0656-065E066A-066F0671-06DC06DE-06FF0750-077F08A008A2-08AC08E4-08FEFB50-FBC1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFCFE70-FE74FE76-FEFC\",\r\n        Armenian: \"0531-05560559-055F0561-0587058A058FFB13-FB17\",\r\n        Balinese: \"1B00-1B4B1B50-1B7C\",\r\n        Bamum: \"A6A0-A6F7\",\r\n        Batak: \"1BC0-1BF31BFC-1BFF\",\r\n        Bengali: \"0981-09830985-098C098F09900993-09A809AA-09B009B209B6-09B909BC-09C409C709C809CB-09CE09D709DC09DD09DF-09E309E6-09FB\",\r\n        Bopomofo: \"02EA02EB3105-312D31A0-31BA\",\r\n        Braille: \"2800-28FF\",\r\n        Buginese: \"1A00-1A1B1A1E1A1F\",\r\n        Buhid: \"1740-1753\",\r\n        Canadian_Aboriginal: \"1400-167F18B0-18F5\",\r\n        Cham: \"AA00-AA36AA40-AA4DAA50-AA59AA5C-AA5F\",\r\n        Cherokee: \"13A0-13F4\",\r\n        Common: \"0000-0040005B-0060007B-00A900AB-00B900BB-00BF00D700F702B9-02DF02E5-02E902EC-02FF0374037E038503870589060C061B061F06400660-066906DD096409650E3F0FD5-0FD810FB16EB-16ED173517361802180318051CD31CE11CE9-1CEC1CEE-1CF31CF51CF62000-200B200E-2064206A-20702074-207E2080-208E20A0-20B92100-21252127-2129212C-21312133-214D214F-215F21892190-23F32400-24262440-244A2460-26FF2701-27FF2900-2B4C2B50-2B592E00-2E3B2FF0-2FFB3000-300430063008-30203030-3037303C-303F309B309C30A030FB30FC3190-319F31C0-31E33220-325F327F-32CF3358-33FF4DC0-4DFFA700-A721A788-A78AA830-A839FD3EFD3FFDFDFE10-FE19FE30-FE52FE54-FE66FE68-FE6BFEFFFF01-FF20FF3B-FF40FF5B-FF65FF70FF9EFF9FFFE0-FFE6FFE8-FFEEFFF9-FFFD\",\r\n        Coptic: \"03E2-03EF2C80-2CF32CF9-2CFF\",\r\n        Cyrillic: \"0400-04840487-05271D2B1D782DE0-2DFFA640-A697A69F\",\r\n        Devanagari: \"0900-09500953-09630966-09770979-097FA8E0-A8FB\",\r\n        Ethiopic: \"1200-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A135D-137C1380-13992D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDEAB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2E\",\r\n        Georgian: \"10A0-10C510C710CD10D0-10FA10FC-10FF2D00-2D252D272D2D\",\r\n        Glagolitic: \"2C00-2C2E2C30-2C5E\",\r\n        Greek: \"0370-03730375-0377037A-037D038403860388-038A038C038E-03A103A3-03E103F0-03FF1D26-1D2A1D5D-1D611D66-1D6A1DBF1F00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FC41FC6-1FD31FD6-1FDB1FDD-1FEF1FF2-1FF41FF6-1FFE2126\",\r\n        Gujarati: \"0A81-0A830A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABC-0AC50AC7-0AC90ACB-0ACD0AD00AE0-0AE30AE6-0AF1\",\r\n        Gurmukhi: \"0A01-0A030A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A3C0A3E-0A420A470A480A4B-0A4D0A510A59-0A5C0A5E0A66-0A75\",\r\n        Han: \"2E80-2E992E9B-2EF32F00-2FD5300530073021-30293038-303B3400-4DB54E00-9FCCF900-FA6DFA70-FAD9\",\r\n        Hangul: \"1100-11FF302E302F3131-318E3200-321E3260-327EA960-A97CAC00-D7A3D7B0-D7C6D7CB-D7FBFFA0-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\",\r\n        Hanunoo: \"1720-1734\",\r\n        Hebrew: \"0591-05C705D0-05EA05F0-05F4FB1D-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FB4F\",\r\n        Hiragana: \"3041-3096309D-309F\",\r\n        Inherited: \"0300-036F04850486064B-0655065F0670095109521CD0-1CD21CD4-1CE01CE2-1CE81CED1CF41DC0-1DE61DFC-1DFF200C200D20D0-20F0302A-302D3099309AFE00-FE0FFE20-FE26\",\r\n        Javanese: \"A980-A9CDA9CF-A9D9A9DEA9DF\",\r\n        Kannada: \"0C820C830C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBC-0CC40CC6-0CC80CCA-0CCD0CD50CD60CDE0CE0-0CE30CE6-0CEF0CF10CF2\",\r\n        Katakana: \"30A1-30FA30FD-30FF31F0-31FF32D0-32FE3300-3357FF66-FF6FFF71-FF9D\",\r\n        Kayah_Li: \"A900-A92F\",\r\n        Khmer: \"1780-17DD17E0-17E917F0-17F919E0-19FF\",\r\n        Lao: \"0E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB90EBB-0EBD0EC0-0EC40EC60EC8-0ECD0ED0-0ED90EDC-0EDF\",\r\n        Latin: \"0041-005A0061-007A00AA00BA00C0-00D600D8-00F600F8-02B802E0-02E41D00-1D251D2C-1D5C1D62-1D651D6B-1D771D79-1DBE1E00-1EFF2071207F2090-209C212A212B2132214E2160-21882C60-2C7FA722-A787A78B-A78EA790-A793A7A0-A7AAA7F8-A7FFFB00-FB06FF21-FF3AFF41-FF5A\",\r\n        Lepcha: \"1C00-1C371C3B-1C491C4D-1C4F\",\r\n        Limbu: \"1900-191C1920-192B1930-193B19401944-194F\",\r\n        Lisu: \"A4D0-A4FF\",\r\n        Malayalam: \"0D020D030D05-0D0C0D0E-0D100D12-0D3A0D3D-0D440D46-0D480D4A-0D4E0D570D60-0D630D66-0D750D79-0D7F\",\r\n        Mandaic: \"0840-085B085E\",\r\n        Meetei_Mayek: \"AAE0-AAF6ABC0-ABEDABF0-ABF9\",\r\n        Mongolian: \"1800180118041806-180E1810-18191820-18771880-18AA\",\r\n        Myanmar: \"1000-109FAA60-AA7B\",\r\n        New_Tai_Lue: \"1980-19AB19B0-19C919D0-19DA19DE19DF\",\r\n        Nko: \"07C0-07FA\",\r\n        Ogham: \"1680-169C\",\r\n        Ol_Chiki: \"1C50-1C7F\",\r\n        Oriya: \"0B01-0B030B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3C-0B440B470B480B4B-0B4D0B560B570B5C0B5D0B5F-0B630B66-0B77\",\r\n        Phags_Pa: \"A840-A877\",\r\n        Rejang: \"A930-A953A95F\",\r\n        Runic: \"16A0-16EA16EE-16F0\",\r\n        Samaritan: \"0800-082D0830-083E\",\r\n        Saurashtra: \"A880-A8C4A8CE-A8D9\",\r\n        Sinhala: \"0D820D830D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60DCA0DCF-0DD40DD60DD8-0DDF0DF2-0DF4\",\r\n        Sundanese: \"1B80-1BBF1CC0-1CC7\",\r\n        Syloti_Nagri: \"A800-A82B\",\r\n        Syriac: \"0700-070D070F-074A074D-074F\",\r\n        Tagalog: \"1700-170C170E-1714\",\r\n        Tagbanwa: \"1760-176C176E-177017721773\",\r\n        Tai_Le: \"1950-196D1970-1974\",\r\n        Tai_Tham: \"1A20-1A5E1A60-1A7C1A7F-1A891A90-1A991AA0-1AAD\",\r\n        Tai_Viet: \"AA80-AAC2AADB-AADF\",\r\n        Tamil: \"0B820B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BBE-0BC20BC6-0BC80BCA-0BCD0BD00BD70BE6-0BFA\",\r\n        Telugu: \"0C01-0C030C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D-0C440C46-0C480C4A-0C4D0C550C560C580C590C60-0C630C66-0C6F0C78-0C7F\",\r\n        Thaana: \"0780-07B1\",\r\n        Thai: \"0E01-0E3A0E40-0E5B\",\r\n        Tibetan: \"0F00-0F470F49-0F6C0F71-0F970F99-0FBC0FBE-0FCC0FCE-0FD40FD90FDA\",\r\n        Tifinagh: \"2D30-2D672D6F2D702D7F\",\r\n        Vai: \"A500-A62B\",\r\n        Yi: \"A000-A48CA490-A4C6\"\r\n    });\r\n\r\n}(XRegExp));\r\n\r\n\n/***** unicode-blocks.js *****/\n\n/*!\r\n * XRegExp Unicode Blocks v1.2.0\r\n * (c) 2010-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Uses Unicode 6.1 <http://unicode.org/>\r\n */\r\n\r\n/**\r\n * Adds support for all Unicode blocks in the Basic Multilingual Plane (U+0000-U+FFFF). Unicode\r\n * blocks use the prefix \"In\". E.g., `\\p{InBasicLatin}`. Token names are case insensitive, and any\r\n * spaces, hyphens, and underscores are ignored.\r\n * @requires XRegExp, XRegExp Unicode Base\r\n */\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n    if (!XRegExp.addUnicodePackage) {\r\n        throw new ReferenceError(\"Unicode Base must be loaded before Unicode Blocks\");\r\n    }\r\n\r\n    XRegExp.install(\"extensibility\");\r\n\r\n    XRegExp.addUnicodePackage({\r\n        InBasic_Latin: \"0000-007F\",\r\n        InLatin_1_Supplement: \"0080-00FF\",\r\n        InLatin_Extended_A: \"0100-017F\",\r\n        InLatin_Extended_B: \"0180-024F\",\r\n        InIPA_Extensions: \"0250-02AF\",\r\n        InSpacing_Modifier_Letters: \"02B0-02FF\",\r\n        InCombining_Diacritical_Marks: \"0300-036F\",\r\n        InGreek_and_Coptic: \"0370-03FF\",\r\n        InCyrillic: \"0400-04FF\",\r\n        InCyrillic_Supplement: \"0500-052F\",\r\n        InArmenian: \"0530-058F\",\r\n        InHebrew: \"0590-05FF\",\r\n        InArabic: \"0600-06FF\",\r\n        InSyriac: \"0700-074F\",\r\n        InArabic_Supplement: \"0750-077F\",\r\n        InThaana: \"0780-07BF\",\r\n        InNKo: \"07C0-07FF\",\r\n        InSamaritan: \"0800-083F\",\r\n        InMandaic: \"0840-085F\",\r\n        InArabic_Extended_A: \"08A0-08FF\",\r\n        InDevanagari: \"0900-097F\",\r\n        InBengali: \"0980-09FF\",\r\n        InGurmukhi: \"0A00-0A7F\",\r\n        InGujarati: \"0A80-0AFF\",\r\n        InOriya: \"0B00-0B7F\",\r\n        InTamil: \"0B80-0BFF\",\r\n        InTelugu: \"0C00-0C7F\",\r\n        InKannada: \"0C80-0CFF\",\r\n        InMalayalam: \"0D00-0D7F\",\r\n        InSinhala: \"0D80-0DFF\",\r\n        InThai: \"0E00-0E7F\",\r\n        InLao: \"0E80-0EFF\",\r\n        InTibetan: \"0F00-0FFF\",\r\n        InMyanmar: \"1000-109F\",\r\n        InGeorgian: \"10A0-10FF\",\r\n        InHangul_Jamo: \"1100-11FF\",\r\n        InEthiopic: \"1200-137F\",\r\n        InEthiopic_Supplement: \"1380-139F\",\r\n        InCherokee: \"13A0-13FF\",\r\n        InUnified_Canadian_Aboriginal_Syllabics: \"1400-167F\",\r\n        InOgham: \"1680-169F\",\r\n        InRunic: \"16A0-16FF\",\r\n        InTagalog: \"1700-171F\",\r\n        InHanunoo: \"1720-173F\",\r\n        InBuhid: \"1740-175F\",\r\n        InTagbanwa: \"1760-177F\",\r\n        InKhmer: \"1780-17FF\",\r\n        InMongolian: \"1800-18AF\",\r\n        InUnified_Canadian_Aboriginal_Syllabics_Extended: \"18B0-18FF\",\r\n        InLimbu: \"1900-194F\",\r\n        InTai_Le: \"1950-197F\",\r\n        InNew_Tai_Lue: \"1980-19DF\",\r\n        InKhmer_Symbols: \"19E0-19FF\",\r\n        InBuginese: \"1A00-1A1F\",\r\n        InTai_Tham: \"1A20-1AAF\",\r\n        InBalinese: \"1B00-1B7F\",\r\n        InSundanese: \"1B80-1BBF\",\r\n        InBatak: \"1BC0-1BFF\",\r\n        InLepcha: \"1C00-1C4F\",\r\n        InOl_Chiki: \"1C50-1C7F\",\r\n        InSundanese_Supplement: \"1CC0-1CCF\",\r\n        InVedic_Extensions: \"1CD0-1CFF\",\r\n        InPhonetic_Extensions: \"1D00-1D7F\",\r\n        InPhonetic_Extensions_Supplement: \"1D80-1DBF\",\r\n        InCombining_Diacritical_Marks_Supplement: \"1DC0-1DFF\",\r\n        InLatin_Extended_Additional: \"1E00-1EFF\",\r\n        InGreek_Extended: \"1F00-1FFF\",\r\n        InGeneral_Punctuation: \"2000-206F\",\r\n        InSuperscripts_and_Subscripts: \"2070-209F\",\r\n        InCurrency_Symbols: \"20A0-20CF\",\r\n        InCombining_Diacritical_Marks_for_Symbols: \"20D0-20FF\",\r\n        InLetterlike_Symbols: \"2100-214F\",\r\n        InNumber_Forms: \"2150-218F\",\r\n        InArrows: \"2190-21FF\",\r\n        InMathematical_Operators: \"2200-22FF\",\r\n        InMiscellaneous_Technical: \"2300-23FF\",\r\n        InControl_Pictures: \"2400-243F\",\r\n        InOptical_Character_Recognition: \"2440-245F\",\r\n        InEnclosed_Alphanumerics: \"2460-24FF\",\r\n        InBox_Drawing: \"2500-257F\",\r\n        InBlock_Elements: \"2580-259F\",\r\n        InGeometric_Shapes: \"25A0-25FF\",\r\n        InMiscellaneous_Symbols: \"2600-26FF\",\r\n        InDingbats: \"2700-27BF\",\r\n        InMiscellaneous_Mathematical_Symbols_A: \"27C0-27EF\",\r\n        InSupplemental_Arrows_A: \"27F0-27FF\",\r\n        InBraille_Patterns: \"2800-28FF\",\r\n        InSupplemental_Arrows_B: \"2900-297F\",\r\n        InMiscellaneous_Mathematical_Symbols_B: \"2980-29FF\",\r\n        InSupplemental_Mathematical_Operators: \"2A00-2AFF\",\r\n        InMiscellaneous_Symbols_and_Arrows: \"2B00-2BFF\",\r\n        InGlagolitic: \"2C00-2C5F\",\r\n        InLatin_Extended_C: \"2C60-2C7F\",\r\n        InCoptic: \"2C80-2CFF\",\r\n        InGeorgian_Supplement: \"2D00-2D2F\",\r\n        InTifinagh: \"2D30-2D7F\",\r\n        InEthiopic_Extended: \"2D80-2DDF\",\r\n        InCyrillic_Extended_A: \"2DE0-2DFF\",\r\n        InSupplemental_Punctuation: \"2E00-2E7F\",\r\n        InCJK_Radicals_Supplement: \"2E80-2EFF\",\r\n        InKangxi_Radicals: \"2F00-2FDF\",\r\n        InIdeographic_Description_Characters: \"2FF0-2FFF\",\r\n        InCJK_Symbols_and_Punctuation: \"3000-303F\",\r\n        InHiragana: \"3040-309F\",\r\n        InKatakana: \"30A0-30FF\",\r\n        InBopomofo: \"3100-312F\",\r\n        InHangul_Compatibility_Jamo: \"3130-318F\",\r\n        InKanbun: \"3190-319F\",\r\n        InBopomofo_Extended: \"31A0-31BF\",\r\n        InCJK_Strokes: \"31C0-31EF\",\r\n        InKatakana_Phonetic_Extensions: \"31F0-31FF\",\r\n        InEnclosed_CJK_Letters_and_Months: \"3200-32FF\",\r\n        InCJK_Compatibility: \"3300-33FF\",\r\n        InCJK_Unified_Ideographs_Extension_A: \"3400-4DBF\",\r\n        InYijing_Hexagram_Symbols: \"4DC0-4DFF\",\r\n        InCJK_Unified_Ideographs: \"4E00-9FFF\",\r\n        InYi_Syllables: \"A000-A48F\",\r\n        InYi_Radicals: \"A490-A4CF\",\r\n        InLisu: \"A4D0-A4FF\",\r\n        InVai: \"A500-A63F\",\r\n        InCyrillic_Extended_B: \"A640-A69F\",\r\n        InBamum: \"A6A0-A6FF\",\r\n        InModifier_Tone_Letters: \"A700-A71F\",\r\n        InLatin_Extended_D: \"A720-A7FF\",\r\n        InSyloti_Nagri: \"A800-A82F\",\r\n        InCommon_Indic_Number_Forms: \"A830-A83F\",\r\n        InPhags_pa: \"A840-A87F\",\r\n        InSaurashtra: \"A880-A8DF\",\r\n        InDevanagari_Extended: \"A8E0-A8FF\",\r\n        InKayah_Li: \"A900-A92F\",\r\n        InRejang: \"A930-A95F\",\r\n        InHangul_Jamo_Extended_A: \"A960-A97F\",\r\n        InJavanese: \"A980-A9DF\",\r\n        InCham: \"AA00-AA5F\",\r\n        InMyanmar_Extended_A: \"AA60-AA7F\",\r\n        InTai_Viet: \"AA80-AADF\",\r\n        InMeetei_Mayek_Extensions: \"AAE0-AAFF\",\r\n        InEthiopic_Extended_A: \"AB00-AB2F\",\r\n        InMeetei_Mayek: \"ABC0-ABFF\",\r\n        InHangul_Syllables: \"AC00-D7AF\",\r\n        InHangul_Jamo_Extended_B: \"D7B0-D7FF\",\r\n        InHigh_Surrogates: \"D800-DB7F\",\r\n        InHigh_Private_Use_Surrogates: \"DB80-DBFF\",\r\n        InLow_Surrogates: \"DC00-DFFF\",\r\n        InPrivate_Use_Area: \"E000-F8FF\",\r\n        InCJK_Compatibility_Ideographs: \"F900-FAFF\",\r\n        InAlphabetic_Presentation_Forms: \"FB00-FB4F\",\r\n        InArabic_Presentation_Forms_A: \"FB50-FDFF\",\r\n        InVariation_Selectors: \"FE00-FE0F\",\r\n        InVertical_Forms: \"FE10-FE1F\",\r\n        InCombining_Half_Marks: \"FE20-FE2F\",\r\n        InCJK_Compatibility_Forms: \"FE30-FE4F\",\r\n        InSmall_Form_Variants: \"FE50-FE6F\",\r\n        InArabic_Presentation_Forms_B: \"FE70-FEFF\",\r\n        InHalfwidth_and_Fullwidth_Forms: \"FF00-FFEF\",\r\n        InSpecials: \"FFF0-FFFF\"\r\n    });\r\n\r\n}(XRegExp));\r\n\r\n\n/***** unicode-properties.js *****/\n\n/*!\r\n * XRegExp Unicode Properties v1.0.0\r\n * (c) 2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Uses Unicode 6.1 <http://unicode.org/>\r\n */\r\n\r\n/**\r\n * Adds Unicode properties necessary to meet Level 1 Unicode support (detailed in UTS#18 RL1.2).\r\n * Includes code points from the Basic Multilingual Plane (U+0000-U+FFFF) only. Token names are\r\n * case insensitive, and any spaces, hyphens, and underscores are ignored.\r\n * @requires XRegExp, XRegExp Unicode Base\r\n */\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n    if (!XRegExp.addUnicodePackage) {\r\n        throw new ReferenceError(\"Unicode Base must be loaded before Unicode Properties\");\r\n    }\r\n\r\n    XRegExp.install(\"extensibility\");\r\n\r\n    XRegExp.addUnicodePackage({\r\n        Alphabetic: \"0041-005A0061-007A00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE03450370-037403760377037A-037D03860388-038A038C038E-03A103A3-03F503F7-0481048A-05270531-055605590561-058705B0-05BD05BF05C105C205C405C505C705D0-05EA05F0-05F20610-061A0620-06570659-065F066E-06D306D5-06DC06E1-06E806ED-06EF06FA-06FC06FF0710-073F074D-07B107CA-07EA07F407F507FA0800-0817081A-082C0840-085808A008A2-08AC08E4-08E908F0-08FE0900-093B093D-094C094E-09500955-09630971-09770979-097F0981-09830985-098C098F09900993-09A809AA-09B009B209B6-09B909BD-09C409C709C809CB09CC09CE09D709DC09DD09DF-09E309F009F10A01-0A030A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A3E-0A420A470A480A4B0A4C0A510A59-0A5C0A5E0A70-0A750A81-0A830A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD-0AC50AC7-0AC90ACB0ACC0AD00AE0-0AE30B01-0B030B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D-0B440B470B480B4B0B4C0B560B570B5C0B5D0B5F-0B630B710B820B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BBE-0BC20BC6-0BC80BCA-0BCC0BD00BD70C01-0C030C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D-0C440C46-0C480C4A-0C4C0C550C560C580C590C60-0C630C820C830C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD-0CC40CC6-0CC80CCA-0CCC0CD50CD60CDE0CE0-0CE30CF10CF20D020D030D05-0D0C0D0E-0D100D12-0D3A0D3D-0D440D46-0D480D4A-0D4C0D4E0D570D60-0D630D7A-0D7F0D820D830D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60DCF-0DD40DD60DD8-0DDF0DF20DF30E01-0E3A0E40-0E460E4D0E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB90EBB-0EBD0EC0-0EC40EC60ECD0EDC-0EDF0F000F40-0F470F49-0F6C0F71-0F810F88-0F970F99-0FBC1000-10361038103B-103F1050-10621065-1068106E-1086108E109C109D10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A135F1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA16EE-16F01700-170C170E-17131720-17331740-17531760-176C176E-1770177217731780-17B317B6-17C817D717DC1820-18771880-18AA18B0-18F51900-191C1920-192B1930-19381950-196D1970-19741980-19AB19B0-19C91A00-1A1B1A20-1A5E1A61-1A741AA71B00-1B331B35-1B431B45-1B4B1B80-1BA91BAC-1BAF1BBA-1BE51BE7-1BF11C00-1C351C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF31CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E2160-218824B6-24E92C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2DE0-2DFF2E2F3005-30073021-30293031-30353038-303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA674-A67BA67F-A697A69F-A6EFA717-A71FA722-A788A78B-A78EA790-A793A7A0-A7AAA7F8-A801A803-A805A807-A80AA80C-A827A840-A873A880-A8C3A8F2-A8F7A8FBA90A-A92AA930-A952A960-A97CA980-A9B2A9B4-A9BFA9CFAA00-AA36AA40-AA4DAA60-AA76AA7AAA80-AABEAAC0AAC2AADB-AADDAAE0-AAEFAAF2-AAF5AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABEAAC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1D-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\",\r\n        Uppercase: \"0041-005A00C0-00D600D8-00DE01000102010401060108010A010C010E01100112011401160118011A011C011E01200122012401260128012A012C012E01300132013401360139013B013D013F0141014301450147014A014C014E01500152015401560158015A015C015E01600162016401660168016A016C016E017001720174017601780179017B017D018101820184018601870189-018B018E-0191019301940196-0198019C019D019F01A001A201A401A601A701A901AC01AE01AF01B1-01B301B501B701B801BC01C401C701CA01CD01CF01D101D301D501D701D901DB01DE01E001E201E401E601E801EA01EC01EE01F101F401F6-01F801FA01FC01FE02000202020402060208020A020C020E02100212021402160218021A021C021E02200222022402260228022A022C022E02300232023A023B023D023E02410243-02460248024A024C024E03700372037603860388-038A038C038E038F0391-03A103A3-03AB03CF03D2-03D403D803DA03DC03DE03E003E203E403E603E803EA03EC03EE03F403F703F903FA03FD-042F04600462046404660468046A046C046E04700472047404760478047A047C047E0480048A048C048E04900492049404960498049A049C049E04A004A204A404A604A804AA04AC04AE04B004B204B404B604B804BA04BC04BE04C004C104C304C504C704C904CB04CD04D004D204D404D604D804DA04DC04DE04E004E204E404E604E804EA04EC04EE04F004F204F404F604F804FA04FC04FE05000502050405060508050A050C050E05100512051405160518051A051C051E05200522052405260531-055610A0-10C510C710CD1E001E021E041E061E081E0A1E0C1E0E1E101E121E141E161E181E1A1E1C1E1E1E201E221E241E261E281E2A1E2C1E2E1E301E321E341E361E381E3A1E3C1E3E1E401E421E441E461E481E4A1E4C1E4E1E501E521E541E561E581E5A1E5C1E5E1E601E621E641E661E681E6A1E6C1E6E1E701E721E741E761E781E7A1E7C1E7E1E801E821E841E861E881E8A1E8C1E8E1E901E921E941E9E1EA01EA21EA41EA61EA81EAA1EAC1EAE1EB01EB21EB41EB61EB81EBA1EBC1EBE1EC01EC21EC41EC61EC81ECA1ECC1ECE1ED01ED21ED41ED61ED81EDA1EDC1EDE1EE01EE21EE41EE61EE81EEA1EEC1EEE1EF01EF21EF41EF61EF81EFA1EFC1EFE1F08-1F0F1F18-1F1D1F28-1F2F1F38-1F3F1F48-1F4D1F591F5B1F5D1F5F1F68-1F6F1FB8-1FBB1FC8-1FCB1FD8-1FDB1FE8-1FEC1FF8-1FFB21022107210B-210D2110-211221152119-211D212421262128212A-212D2130-2133213E213F21452160-216F218324B6-24CF2C00-2C2E2C602C62-2C642C672C692C6B2C6D-2C702C722C752C7E-2C802C822C842C862C882C8A2C8C2C8E2C902C922C942C962C982C9A2C9C2C9E2CA02CA22CA42CA62CA82CAA2CAC2CAE2CB02CB22CB42CB62CB82CBA2CBC2CBE2CC02CC22CC42CC62CC82CCA2CCC2CCE2CD02CD22CD42CD62CD82CDA2CDC2CDE2CE02CE22CEB2CED2CF2A640A642A644A646A648A64AA64CA64EA650A652A654A656A658A65AA65CA65EA660A662A664A666A668A66AA66CA680A682A684A686A688A68AA68CA68EA690A692A694A696A722A724A726A728A72AA72CA72EA732A734A736A738A73AA73CA73EA740A742A744A746A748A74AA74CA74EA750A752A754A756A758A75AA75CA75EA760A762A764A766A768A76AA76CA76EA779A77BA77DA77EA780A782A784A786A78BA78DA790A792A7A0A7A2A7A4A7A6A7A8A7AAFF21-FF3A\",\r\n        Lowercase: \"0061-007A00AA00B500BA00DF-00F600F8-00FF01010103010501070109010B010D010F01110113011501170119011B011D011F01210123012501270129012B012D012F01310133013501370138013A013C013E014001420144014601480149014B014D014F01510153015501570159015B015D015F01610163016501670169016B016D016F0171017301750177017A017C017E-0180018301850188018C018D019201950199-019B019E01A101A301A501A801AA01AB01AD01B001B401B601B901BA01BD-01BF01C601C901CC01CE01D001D201D401D601D801DA01DC01DD01DF01E101E301E501E701E901EB01ED01EF01F001F301F501F901FB01FD01FF02010203020502070209020B020D020F02110213021502170219021B021D021F02210223022502270229022B022D022F02310233-0239023C023F0240024202470249024B024D024F-02930295-02B802C002C102E0-02E40345037103730377037A-037D039003AC-03CE03D003D103D5-03D703D903DB03DD03DF03E103E303E503E703E903EB03ED03EF-03F303F503F803FB03FC0430-045F04610463046504670469046B046D046F04710473047504770479047B047D047F0481048B048D048F04910493049504970499049B049D049F04A104A304A504A704A904AB04AD04AF04B104B304B504B704B904BB04BD04BF04C204C404C604C804CA04CC04CE04CF04D104D304D504D704D904DB04DD04DF04E104E304E504E704E904EB04ED04EF04F104F304F504F704F904FB04FD04FF05010503050505070509050B050D050F05110513051505170519051B051D051F05210523052505270561-05871D00-1DBF1E011E031E051E071E091E0B1E0D1E0F1E111E131E151E171E191E1B1E1D1E1F1E211E231E251E271E291E2B1E2D1E2F1E311E331E351E371E391E3B1E3D1E3F1E411E431E451E471E491E4B1E4D1E4F1E511E531E551E571E591E5B1E5D1E5F1E611E631E651E671E691E6B1E6D1E6F1E711E731E751E771E791E7B1E7D1E7F1E811E831E851E871E891E8B1E8D1E8F1E911E931E95-1E9D1E9F1EA11EA31EA51EA71EA91EAB1EAD1EAF1EB11EB31EB51EB71EB91EBB1EBD1EBF1EC11EC31EC51EC71EC91ECB1ECD1ECF1ED11ED31ED51ED71ED91EDB1EDD1EDF1EE11EE31EE51EE71EE91EEB1EED1EEF1EF11EF31EF51EF71EF91EFB1EFD1EFF-1F071F10-1F151F20-1F271F30-1F371F40-1F451F50-1F571F60-1F671F70-1F7D1F80-1F871F90-1F971FA0-1FA71FB0-1FB41FB61FB71FBE1FC2-1FC41FC61FC71FD0-1FD31FD61FD71FE0-1FE71FF2-1FF41FF61FF72071207F2090-209C210A210E210F2113212F21342139213C213D2146-2149214E2170-217F218424D0-24E92C30-2C5E2C612C652C662C682C6A2C6C2C712C732C742C76-2C7D2C812C832C852C872C892C8B2C8D2C8F2C912C932C952C972C992C9B2C9D2C9F2CA12CA32CA52CA72CA92CAB2CAD2CAF2CB12CB32CB52CB72CB92CBB2CBD2CBF2CC12CC32CC52CC72CC92CCB2CCD2CCF2CD12CD32CD52CD72CD92CDB2CDD2CDF2CE12CE32CE42CEC2CEE2CF32D00-2D252D272D2DA641A643A645A647A649A64BA64DA64FA651A653A655A657A659A65BA65DA65FA661A663A665A667A669A66BA66DA681A683A685A687A689A68BA68DA68FA691A693A695A697A723A725A727A729A72BA72DA72F-A731A733A735A737A739A73BA73DA73FA741A743A745A747A749A74BA74DA74FA751A753A755A757A759A75BA75DA75FA761A763A765A767A769A76BA76DA76F-A778A77AA77CA77FA781A783A785A787A78CA78EA791A793A7A1A7A3A7A5A7A7A7A9A7F8-A7FAFB00-FB06FB13-FB17FF41-FF5A\",\r\n        White_Space: \"0009-000D0020008500A01680180E2000-200A20282029202F205F3000\",\r\n        Noncharacter_Code_Point: \"FDD0-FDEFFFFEFFFF\",\r\n        Default_Ignorable_Code_Point: \"00AD034F115F116017B417B5180B-180D200B-200F202A-202E2060-206F3164FE00-FE0FFEFFFFA0FFF0-FFF8\",\r\n        // \\p{Any} matches a code unit. To match any code point via surrogate pairs, use (?:[\\0-\\uD7FF\\uDC00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF])\r\n        Any: \"0000-FFFF\", // \\p{^Any} compiles to [^\\u0000-\\uFFFF]; [\\p{^Any}] to []\r\n        Ascii: \"0000-007F\",\r\n        // \\p{Assigned} is equivalent to \\p{^Cn}\r\n        //Assigned: XRegExp(\"[\\\\p{^Cn}]\").source.replace(/[[\\]]|\\\\u/g, \"\") // Negation inside a character class triggers inversion\r\n        Assigned: \"0000-0377037A-037E0384-038A038C038E-03A103A3-05270531-05560559-055F0561-05870589058A058F0591-05C705D0-05EA05F0-05F40600-06040606-061B061E-070D070F-074A074D-07B107C0-07FA0800-082D0830-083E0840-085B085E08A008A2-08AC08E4-08FE0900-09770979-097F0981-09830985-098C098F09900993-09A809AA-09B009B209B6-09B909BC-09C409C709C809CB-09CE09D709DC09DD09DF-09E309E6-09FB0A01-0A030A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A3C0A3E-0A420A470A480A4B-0A4D0A510A59-0A5C0A5E0A66-0A750A81-0A830A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABC-0AC50AC7-0AC90ACB-0ACD0AD00AE0-0AE30AE6-0AF10B01-0B030B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3C-0B440B470B480B4B-0B4D0B560B570B5C0B5D0B5F-0B630B66-0B770B820B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BBE-0BC20BC6-0BC80BCA-0BCD0BD00BD70BE6-0BFA0C01-0C030C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D-0C440C46-0C480C4A-0C4D0C550C560C580C590C60-0C630C66-0C6F0C78-0C7F0C820C830C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBC-0CC40CC6-0CC80CCA-0CCD0CD50CD60CDE0CE0-0CE30CE6-0CEF0CF10CF20D020D030D05-0D0C0D0E-0D100D12-0D3A0D3D-0D440D46-0D480D4A-0D4E0D570D60-0D630D66-0D750D79-0D7F0D820D830D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60DCA0DCF-0DD40DD60DD8-0DDF0DF2-0DF40E01-0E3A0E3F-0E5B0E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB90EBB-0EBD0EC0-0EC40EC60EC8-0ECD0ED0-0ED90EDC-0EDF0F00-0F470F49-0F6C0F71-0F970F99-0FBC0FBE-0FCC0FCE-0FDA1000-10C510C710CD10D0-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A135D-137C1380-139913A0-13F41400-169C16A0-16F01700-170C170E-17141720-17361740-17531760-176C176E-1770177217731780-17DD17E0-17E917F0-17F91800-180E1810-18191820-18771880-18AA18B0-18F51900-191C1920-192B1930-193B19401944-196D1970-19741980-19AB19B0-19C919D0-19DA19DE-1A1B1A1E-1A5E1A60-1A7C1A7F-1A891A90-1A991AA0-1AAD1B00-1B4B1B50-1B7C1B80-1BF31BFC-1C371C3B-1C491C4D-1C7F1CC0-1CC71CD0-1CF61D00-1DE61DFC-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FC41FC6-1FD31FD6-1FDB1FDD-1FEF1FF2-1FF41FF6-1FFE2000-2064206A-20712074-208E2090-209C20A0-20B920D0-20F02100-21892190-23F32400-24262440-244A2460-26FF2701-2B4C2B50-2B592C00-2C2E2C30-2C5E2C60-2CF32CF9-2D252D272D2D2D30-2D672D6F2D702D7F-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2DE0-2E3B2E80-2E992E9B-2EF32F00-2FD52FF0-2FFB3000-303F3041-30963099-30FF3105-312D3131-318E3190-31BA31C0-31E331F0-321E3220-32FE3300-4DB54DC0-9FCCA000-A48CA490-A4C6A4D0-A62BA640-A697A69F-A6F7A700-A78EA790-A793A7A0-A7AAA7F8-A82BA830-A839A840-A877A880-A8C4A8CE-A8D9A8E0-A8FBA900-A953A95F-A97CA980-A9CDA9CF-A9D9A9DEA9DFAA00-AA36AA40-AA4DAA50-AA59AA5C-AA7BAA80-AAC2AADB-AAF6AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABEDABF0-ABF9AC00-D7A3D7B0-D7C6D7CB-D7FBD800-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1D-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBC1FBD3-FD3FFD50-FD8FFD92-FDC7FDF0-FDFDFE00-FE19FE20-FE26FE30-FE52FE54-FE66FE68-FE6BFE70-FE74FE76-FEFCFEFFFF01-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDCFFE0-FFE6FFE8-FFEEFFF9-FFFD\"\r\n    });\r\n\r\n}(XRegExp));\r\n\r\n\n/***** matchrecursive.js *****/\n\n/*!\r\n * XRegExp.matchRecursive v0.2.0\r\n * (c) 2009-2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n */\r\n\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n/**\r\n * Returns a match detail object composed of the provided values.\r\n * @private\r\n */\r\n    function row(value, name, start, end) {\r\n        return {value:value, name:name, start:start, end:end};\r\n    }\r\n\r\n/**\r\n * Returns an array of match strings between outermost left and right delimiters, or an array of\r\n * objects with detailed match parts and position data. An error is thrown if delimiters are\r\n * unbalanced within the data.\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {String} left Left delimiter as an XRegExp pattern.\r\n * @param {String} right Right delimiter as an XRegExp pattern.\r\n * @param {String} [flags] Flags for the left and right delimiters. Use any of: `gimnsxy`.\r\n * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.\r\n * @returns {Array} Array of matches, or an empty array.\r\n * @example\r\n *\r\n * // Basic usage\r\n * var str = '(t((e))s)t()(ing)';\r\n * XRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');\r\n * // -> ['t((e))s', '', 'ing']\r\n *\r\n * // Extended information mode with valueNames\r\n * str = 'Here is <div> <div>an</div></div> example';\r\n * XRegExp.matchRecursive(str, '<div\\\\s*>', '</div>', 'gi', {\r\n *   valueNames: ['between', 'left', 'match', 'right']\r\n * });\r\n * // -> [\r\n * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},\r\n * // {name: 'left',    value: '<div>',          start: 8,  end: 13},\r\n * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},\r\n * // {name: 'right',   value: '</div>',         start: 27, end: 33},\r\n * // {name: 'between', value: ' example',       start: 33, end: 41}\r\n * // ]\r\n *\r\n * // Omitting unneeded parts with null valueNames, and using escapeChar\r\n * str = '...{1}\\\\{{function(x,y){return y+x;}}';\r\n * XRegExp.matchRecursive(str, '{', '}', 'g', {\r\n *   valueNames: ['literal', null, 'value', null],\r\n *   escapeChar: '\\\\'\r\n * });\r\n * // -> [\r\n * // {name: 'literal', value: '...', start: 0, end: 3},\r\n * // {name: 'value',   value: '1',   start: 4, end: 5},\r\n * // {name: 'literal', value: '\\\\{', start: 6, end: 8},\r\n * // {name: 'value',   value: 'function(x,y){return y+x;}', start: 9, end: 35}\r\n * // ]\r\n *\r\n * // Sticky mode via flag y\r\n * str = '<1><<<2>>><3>4<5>';\r\n * XRegExp.matchRecursive(str, '<', '>', 'gy');\r\n * // -> ['1', '<<2>>', '3']\r\n */\r\n    XRegExp.matchRecursive = function (str, left, right, flags, options) {\r\n        flags = flags || \"\";\r\n        options = options || {};\r\n        var global = flags.indexOf(\"g\") > -1,\r\n            sticky = flags.indexOf(\"y\") > -1,\r\n            basicFlags = flags.replace(/y/g, \"\"), // Flag y controlled internally\r\n            escapeChar = options.escapeChar,\r\n            vN = options.valueNames,\r\n            output = [],\r\n            openTokens = 0,\r\n            delimStart = 0,\r\n            delimEnd = 0,\r\n            lastOuterEnd = 0,\r\n            outerStart,\r\n            innerStart,\r\n            leftMatch,\r\n            rightMatch,\r\n            esc;\r\n        left = XRegExp(left, basicFlags);\r\n        right = XRegExp(right, basicFlags);\r\n\r\n        if (escapeChar) {\r\n            if (escapeChar.length > 1) {\r\n                throw new SyntaxError(\"can't use more than one escape character\");\r\n            }\r\n            escapeChar = XRegExp.escape(escapeChar);\r\n            // Using XRegExp.union safely rewrites backreferences in `left` and `right`\r\n            esc = new RegExp(\r\n                \"(?:\" + escapeChar + \"[\\\\S\\\\s]|(?:(?!\" + XRegExp.union([left, right]).source + \")[^\" + escapeChar + \"])+)+\",\r\n                flags.replace(/[^im]+/g, \"\") // Flags gy not needed here; flags nsx handled by XRegExp\r\n            );\r\n        }\r\n\r\n        while (true) {\r\n            // If using an escape character, advance to the delimiter's next starting position,\r\n            // skipping any escaped characters in between\r\n            if (escapeChar) {\r\n                delimEnd += (XRegExp.exec(str, esc, delimEnd, \"sticky\") || [\"\"])[0].length;\r\n            }\r\n            leftMatch = XRegExp.exec(str, left, delimEnd);\r\n            rightMatch = XRegExp.exec(str, right, delimEnd);\r\n            // Keep the leftmost match only\r\n            if (leftMatch && rightMatch) {\r\n                if (leftMatch.index <= rightMatch.index) {\r\n                    rightMatch = null;\r\n                } else {\r\n                    leftMatch = null;\r\n                }\r\n            }\r\n            /* Paths (LM:leftMatch, RM:rightMatch, OT:openTokens):\r\n            LM | RM | OT | Result\r\n            1  | 0  | 1  | loop\r\n            1  | 0  | 0  | loop\r\n            0  | 1  | 1  | loop\r\n            0  | 1  | 0  | throw\r\n            0  | 0  | 1  | throw\r\n            0  | 0  | 0  | break\r\n            * Doesn't include the sticky mode special case\r\n            * Loop ends after the first completed match if `!global` */\r\n            if (leftMatch || rightMatch) {\r\n                delimStart = (leftMatch || rightMatch).index;\r\n                delimEnd = delimStart + (leftMatch || rightMatch)[0].length;\r\n            } else if (!openTokens) {\r\n                break;\r\n            }\r\n            if (sticky && !openTokens && delimStart > lastOuterEnd) {\r\n                break;\r\n            }\r\n            if (leftMatch) {\r\n                if (!openTokens) {\r\n                    outerStart = delimStart;\r\n                    innerStart = delimEnd;\r\n                }\r\n                ++openTokens;\r\n            } else if (rightMatch && openTokens) {\r\n                if (!--openTokens) {\r\n                    if (vN) {\r\n                        if (vN[0] && outerStart > lastOuterEnd) {\r\n                            output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));\r\n                        }\r\n                        if (vN[1]) {\r\n                            output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));\r\n                        }\r\n                        if (vN[2]) {\r\n                            output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));\r\n                        }\r\n                        if (vN[3]) {\r\n                            output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));\r\n                        }\r\n                    } else {\r\n                        output.push(str.slice(innerStart, delimStart));\r\n                    }\r\n                    lastOuterEnd = delimEnd;\r\n                    if (!global) {\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                throw new Error(\"string contains unbalanced delimiters\");\r\n            }\r\n            // If the delimiter matched an empty string, avoid an infinite loop\r\n            if (delimStart === delimEnd) {\r\n                ++delimEnd;\r\n            }\r\n        }\r\n\r\n        if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {\r\n            output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));\r\n        }\r\n\r\n        return output;\r\n    };\r\n\r\n}(XRegExp));\r\n\r\n\n/***** build.js *****/\n\n/*!\r\n * XRegExp.build v0.1.0\r\n * (c) 2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n * Inspired by RegExp.create by Lea Verou <http://lea.verou.me/>\r\n */\r\n\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n    var subparts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*]/g,\r\n        parts = XRegExp.union([/\\({{([\\w$]+)}}\\)|{{([\\w$]+)}}/, subparts], \"g\");\r\n\r\n/**\r\n * Strips a leading `^` and trailing unescaped `$`, if both are present.\r\n * @private\r\n * @param {String} pattern Pattern to process.\r\n * @returns {String} Pattern with edge anchors removed.\r\n */\r\n    function deanchor(pattern) {\r\n        var startAnchor = /^(?:\\(\\?:\\))?\\^/, // Leading `^` or `(?:)^` (handles /x cruft)\r\n            endAnchor = /\\$(?:\\(\\?:\\))?$/; // Trailing `$` or `$(?:)` (handles /x cruft)\r\n        if (endAnchor.test(pattern.replace(/\\\\[\\s\\S]/g, \"\"))) { // Ensure trailing `$` isn't escaped\r\n            return pattern.replace(startAnchor, \"\").replace(endAnchor, \"\");\r\n        }\r\n        return pattern;\r\n    }\r\n\r\n/**\r\n * Converts the provided value to an XRegExp.\r\n * @private\r\n * @param {String|RegExp} value Value to convert.\r\n * @returns {RegExp} XRegExp object with XRegExp syntax applied.\r\n */\r\n    function asXRegExp(value) {\r\n        return XRegExp.isRegExp(value) ?\r\n                (value.xregexp && !value.xregexp.isNative ? value : XRegExp(value.source)) :\r\n                XRegExp(value);\r\n    }\r\n\r\n/**\r\n * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in the\r\n * outer pattern and provided subpatterns are automatically renumbered to work correctly. Native\r\n * flags used by provided subpatterns are ignored in favor of the `flags` argument.\r\n * @memberOf XRegExp\r\n * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows\r\n *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within\r\n *   character classes.\r\n * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A\r\n *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.\r\n * @param {String} [flags] Any combination of XRegExp flags.\r\n * @returns {RegExp} Regex with interpolated subpatterns.\r\n * @example\r\n *\r\n * var time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {\r\n *   hours: XRegExp.build('{{h12}} : | {{h24}}', {\r\n *     h12: /1[0-2]|0?[1-9]/,\r\n *     h24: /2[0-3]|[01][0-9]/\r\n *   }, 'x'),\r\n *   minutes: /^[0-5][0-9]$/\r\n * });\r\n * time.test('10:59'); // -> true\r\n * XRegExp.exec('10:59', time).minutes; // -> '59'\r\n */\r\n    XRegExp.build = function (pattern, subs, flags) {\r\n        var inlineFlags = /^\\(\\?([\\w$]+)\\)/.exec(pattern),\r\n            data = {},\r\n            numCaps = 0, // Caps is short for captures\r\n            numPriorCaps,\r\n            numOuterCaps = 0,\r\n            outerCapsMap = [0],\r\n            outerCapNames,\r\n            sub,\r\n            p;\r\n\r\n        // Add flags within a leading mode modifier to the overall pattern's flags\r\n        if (inlineFlags) {\r\n            flags = flags || \"\";\r\n            inlineFlags[1].replace(/./g, function (flag) {\r\n                flags += (flags.indexOf(flag) > -1 ? \"\" : flag); // Don't add duplicates\r\n            });\r\n        }\r\n\r\n        for (p in subs) {\r\n            if (subs.hasOwnProperty(p)) {\r\n                // Passing to XRegExp enables entended syntax for subpatterns provided as strings\r\n                // and ensures independent validity, lest an unescaped `(`, `)`, `[`, or trailing\r\n                // `\\` breaks the `(?:)` wrapper. For subpatterns provided as regexes, it dies on\r\n                // octals and adds the `xregexp` property, for simplicity\r\n                sub = asXRegExp(subs[p]);\r\n                // Deanchoring allows embedding independently useful anchored regexes. If you\r\n                // really need to keep your anchors, double them (i.e., `^^...$$`)\r\n                data[p] = {pattern: deanchor(sub.source), names: sub.xregexp.captureNames || []};\r\n            }\r\n        }\r\n\r\n        // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;\r\n        // helps keep this simple. Named captures will be put back\r\n        pattern = asXRegExp(pattern);\r\n        outerCapNames = pattern.xregexp.captureNames || [];\r\n        pattern = pattern.source.replace(parts, function ($0, $1, $2, $3, $4) {\r\n            var subName = $1 || $2, capName, intro;\r\n            if (subName) { // Named subpattern\r\n                if (!data.hasOwnProperty(subName)) {\r\n                    throw new ReferenceError(\"undefined property \" + $0);\r\n                }\r\n                if ($1) { // Named subpattern was wrapped in a capturing group\r\n                    capName = outerCapNames[numOuterCaps];\r\n                    outerCapsMap[++numOuterCaps] = ++numCaps;\r\n                    // If it's a named group, preserve the name. Otherwise, use the subpattern name\r\n                    // as the capture name\r\n                    intro = \"(?<\" + (capName || subName) + \">\";\r\n                } else {\r\n                    intro = \"(?:\";\r\n                }\r\n                numPriorCaps = numCaps;\r\n                return intro + data[subName].pattern.replace(subparts, function (match, paren, backref) {\r\n                    if (paren) { // Capturing group\r\n                        capName = data[subName].names[numCaps - numPriorCaps];\r\n                        ++numCaps;\r\n                        if (capName) { // If the current capture has a name, preserve the name\r\n                            return \"(?<\" + capName + \">\";\r\n                        }\r\n                    } else if (backref) { // Backreference\r\n                        return \"\\\\\" + (+backref + numPriorCaps); // Rewrite the backreference\r\n                    }\r\n                    return match;\r\n                }) + \")\";\r\n            }\r\n            if ($3) { // Capturing group\r\n                capName = outerCapNames[numOuterCaps];\r\n                outerCapsMap[++numOuterCaps] = ++numCaps;\r\n                if (capName) { // If the current capture has a name, preserve the name\r\n                    return \"(?<\" + capName + \">\";\r\n                }\r\n            } else if ($4) { // Backreference\r\n                return \"\\\\\" + outerCapsMap[+$4]; // Rewrite the backreference\r\n            }\r\n            return $0;\r\n        });\r\n\r\n        return XRegExp(pattern, flags);\r\n    };\r\n\r\n}(XRegExp));\r\n\r\n\n/***** prototypes.js *****/\n\n/*!\r\n * XRegExp Prototype Methods v1.0.0\r\n * (c) 2012 Steven Levithan <http://xregexp.com/>\r\n * MIT License\r\n */\r\n\r\n/**\r\n * Adds a collection of methods to `XRegExp.prototype`. RegExp objects copied by XRegExp are also\r\n * augmented with any `XRegExp.prototype` methods. Hence, the following work equivalently:\r\n *\r\n * XRegExp('[a-z]', 'ig').xexec('abc');\r\n * XRegExp(/[a-z]/ig).xexec('abc');\r\n * XRegExp.globalize(/[a-z]/i).xexec('abc');\r\n */\r\n(function (XRegExp) {\r\n    \"use strict\";\r\n\r\n/**\r\n * Copy properties of `b` to `a`.\r\n * @private\r\n * @param {Object} a Object that will receive new properties.\r\n * @param {Object} b Object whose properties will be copied.\r\n */\r\n    function extend(a, b) {\r\n        for (var p in b) {\r\n            if (b.hasOwnProperty(p)) {\r\n                a[p] = b[p];\r\n            }\r\n        }\r\n        //return a;\r\n    }\r\n\r\n    extend(XRegExp.prototype, {\r\n\r\n/**\r\n * Implicitly calls the regex's `test` method with the first value in the provided arguments array.\r\n * @memberOf XRegExp.prototype\r\n * @param {*} context Ignored. Accepted only for congruity with `Function.prototype.apply`.\r\n * @param {Array} args Array with the string to search as its first value.\r\n * @returns {Boolean} Whether the regex matched the provided value.\r\n * @example\r\n *\r\n * XRegExp('[a-z]').apply(null, ['abc']); // -> true\r\n */\r\n        apply: function (context, args) {\r\n            return this.test(args[0]);\r\n        },\r\n\r\n/**\r\n * Implicitly calls the regex's `test` method with the provided string.\r\n * @memberOf XRegExp.prototype\r\n * @param {*} context Ignored. Accepted only for congruity with `Function.prototype.call`.\r\n * @param {String} str String to search.\r\n * @returns {Boolean} Whether the regex matched the provided value.\r\n * @example\r\n *\r\n * XRegExp('[a-z]').call(null, 'abc'); // -> true\r\n */\r\n        call: function (context, str) {\r\n            return this.test(str);\r\n        },\r\n\r\n/**\r\n * Implicitly calls {@link #XRegExp.forEach}.\r\n * @memberOf XRegExp.prototype\r\n * @example\r\n *\r\n * XRegExp('\\\\d').forEach('1a2345', function (match, i) {\r\n *   if (i % 2) this.push(+match[0]);\r\n * }, []);\r\n * // -> [2, 4]\r\n */\r\n        forEach: function (str, callback, context) {\r\n            return XRegExp.forEach(str, this, callback, context);\r\n        },\r\n\r\n/**\r\n * Implicitly calls {@link #XRegExp.globalize}.\r\n * @memberOf XRegExp.prototype\r\n * @example\r\n *\r\n * var globalCopy = XRegExp('regex').globalize();\r\n * globalCopy.global; // -> true\r\n */\r\n        globalize: function () {\r\n            return XRegExp.globalize(this);\r\n        },\r\n\r\n/**\r\n * Implicitly calls {@link #XRegExp.exec}.\r\n * @memberOf XRegExp.prototype\r\n * @example\r\n *\r\n * var match = XRegExp('U\\\\+(?<hex>[0-9A-F]{4})').xexec('U+2620');\r\n * match.hex; // -> '2620'\r\n */\r\n        xexec: function (str, pos, sticky) {\r\n            return XRegExp.exec(str, this, pos, sticky);\r\n        },\r\n\r\n/**\r\n * Implicitly calls {@link #XRegExp.test}.\r\n * @memberOf XRegExp.prototype\r\n * @example\r\n *\r\n * XRegExp('c').xtest('abc'); // -> true\r\n */\r\n        xtest: function (str, pos, sticky) {\r\n            return XRegExp.test(str, this, pos, sticky);\r\n        }\r\n\r\n    });\r\n\r\n}(XRegExp));\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/xregexp/xregexp-all.js\n// module id = ./node_modules/xregexp/xregexp-all.js\n// module chunks = 5","import { Component } from 'react'\nimport styled, { hydrate, injectGlobal } from 'react-emotion'\nimport { css } from 'emotion'\nimport { loadGetInitialProps } from 'next/dist/lib/utils'\nimport Head from 'next/head'\nimport Lessons from '../components/Lessons'\nimport codeStyles from '../components/CodeStyles'\nimport CourseDescription from '../components/CourseDescription.md'\n\nlet ReactGA\nif (process.browser) {\n  ReactGA = require('react-ga') // eslint-disable-line global-require\n}\n\nif (typeof window !== 'undefined') {\n  hydrate(window.__NEXT_DATA__.ids)\n}\n\ninjectGlobal`\n  html, body {\n    padding: 3rem 1rem;\n    margin: 0;\n    background: white;\n    min-height: 100%;\n    font-family: Helvetica, Arial, sans-serif;\n    font-size: 18px;\n  }\n  img {\n    max-width: 100%;\n  }\n  pre {\n    background: #fafafa;\n    padding: 25px;\n  }\n  ${codeStyles}\n`\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    if (process.browser) {\n      ReactGA.initialize('UA-36512724-5')\n    }\n  }\n\n  componentDidMount() {\n    const page = window.location.pathname\n    ReactGA.set({ page })\n    ReactGA.pageview(page)\n  }\n\n  render() {\n    return (\n      <div>\n        <Head>\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n          <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n          <meta name=\"google-site-verification\" content=\"IIrF63zU-1tJ9wTakA176fZd_hNrbW1QD_5oticuUv0\" />\n          <meta\n            name=\"description\"\n            content=\"Learn how to use Redux in your React apps in the tutorial from the creator of Redux, Dan Abramov.\"\n          />\n          <title>Learn Redux with Dan Abramov</title>\n        </Head>\n        <div\n          className={css`\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n          `}\n        >\n          <div>\n            <h1>Learn Redux with Dan Abramov</h1>\n          </div>\n          <div>\n            <h3>Redux presents a sane and scalable way to manage complex state in your React applications.</h3>\n          </div>\n\n          <div\n            className={css`\n              padding: 30px;\n            `}\n          >\n            <a\n              className={css`\n                background: black;\n                color: white;\n                font-size: 14px;\n                text-decoration: none;\n                padding: 10px;\n              `}\n              href=\"https://egghead.io/lessons/react-redux-the-single-immutable-state-tree?utm_source=microsite\"\n            >\n              watch the screencasts on egghead.io\n            </a>\n          </div>\n          <div\n            className={css`\n              flex: 1 1 320px;\n              max-width: 800px;\n              padding-top: 50px;\n            `}\n          >\n            <CourseDescription />\n          </div>\n        </div>\n\n        <Lessons />\n      </div>\n    )\n  }\n}\n\nexport default App\n\n\n\n// WEBPACK FOOTER //\n// pages/index.js"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAEA;AAAA;AACA;AADA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AA7BA;AACA;AADA;;;;;;;;;;;;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAlxFA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApDA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcccA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtOA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAccA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhrIA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA9CA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjFA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1DA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApEA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnCA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjhHA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtBA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzlEA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AArCA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAppEA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACphBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvvfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjpiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvnwEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AALA;AAKA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AADA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AADA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AADA;AAAA;AAOA;AARA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AACA;AADA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;AA1EA;AACA;AA4EA;AAAA;;;;;;;;;;;;AAzGA;AA4BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}